import os
import subprocess
import sqlite3
from pathlib import Path
import hashlib
import logging
import time

# --- Config ---
PROJECT_ROOT = Path("/Users/stevencohen/Projects/universal_recycling/orders_project")
OUTPUT_FILE = PROJECT_ROOT / "all_project_scripts.md"
LOG_FILE = PROJECT_ROOT / "logs/output_scripts.log"
DB_FILE = PROJECT_ROOT / "data/orders.db"

# Only include files from these directories
INCLUDE_DIRS = [
    PROJECT_ROOT / "backend",
    PROJECT_ROOT / "frontend",
]

# Only these file types
INCLUDE_EXTENSIONS = ['.py', '.js', '.html']

# Exclude entire folders
EXCLUDE_DIRS = {
    'scripts', 'logs', 'data', 'uploads', 'venv'
}

# Logging setup
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)

def get_file_hash(file_path):
    try:
        sha256 = hashlib.sha256()
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b""):
                sha256.update(chunk)
        return sha256.hexdigest()
    except Exception as e:
        logging.error(f"Failed to hash {file_path}: {e}")
        return None

def get_file_mtime(file_path):
    try:
        mtime = os.path.getmtime(file_path)
        return time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(mtime))
    except Exception as e:
        logging.error(f"Failed to get mtime for {file_path}: {e}")
        return "Unknown"

def get_directory_tree():
    try:
        result = subprocess.run(
            ["tree", "-L", "5", str(PROJECT_ROOT)],
            capture_output=True,
            text=True,
            check=True
        )
        logging.info("Directory tree generated successfully")
        return result.stdout
    except subprocess.CalledProcessError as e:
        logging.error(f"Error generating directory tree: {e}")
        return f"Error generating directory tree: {e}"

def get_database_schema():
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT name, sql FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'")
        schema = []
        for name, sql in cursor.fetchall():
            schema.append(f"### Table: {name}\n```sql\n{sql}\n```")
        conn.close()
        logging.info("Database schema extracted successfully")
        return "\n\n".join(schema) if schema else "No tables found in database."
    except sqlite3.Error as e:
        logging.error(f"Error accessing database: {e}")
        return f"Error accessing database: {e}"

def collect_files(directory):
    contents = []
    missing_folders = []
    for root, dirs, files in os.walk(directory):
        rel_root = Path(root).relative_to(PROJECT_ROOT)

        # Skip excluded dirs
        if any(part in EXCLUDE_DIRS for part in rel_root.parts):
            continue

        script_files = [f for f in files if Path(f).suffix in INCLUDE_EXTENSIONS]

        if not script_files:
            missing_folders.append(str(rel_root))

        for file in sorted(script_files):
            file_path = Path(root) / file
            relative_path = file_path.relative_to(PROJECT_ROOT)
            try:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                line_count = len(content.splitlines())
                file_hash = get_file_hash(file_path)
                file_mtime = get_file_mtime(file_path)
                contents.append(
                    f"### File: {relative_path}\n"
                    f"**SHA-256 Hash**: {file_hash}\n"
                    f"**Line Count**: {line_count}\n"
                    f"**Last Modified**: {file_mtime}\n"
                    f"```{file_path.suffix[1:]}\n{content}\n```"
                )
                logging.info(f"Added file: {relative_path}")
            except Exception as e:
                logging.error(f"Error reading file {relative_path}: {e}")
                contents.append(f"### File: {relative_path}\n(Error reading file: {e})")

    return contents, missing_folders

def main():
    logging.info("Starting full script generation")
    try:
        with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
            f.write("# Orders Project Scripts\n\n")
            f.write("Generated by improved script to accurately capture all .py, .js, .html scripts in backend/ and frontend/, directory structure, missing folders, and database schema.\n\n")

            # Directory tree
            f.write("## Directory Tree\n```")
            f.write(get_directory_tree())
            f.write("```\n\n")

            # Database schema
            f.write("## Database Schema\n")
            f.write(get_database_schema())
            f.write("\n\n")

            # File contents
            f.write("## File Contents\n")
            all_missing = []
            for directory in INCLUDE_DIRS:
                if not directory.exists():
                    f.write(f"### Directory: {directory.relative_to(PROJECT_ROOT)}\n(Directory not found)\n\n")
                    logging.error(f"Directory not found: {directory}")
                    continue
                f.write(f"### Directory: {directory.relative_to(PROJECT_ROOT)}\n")
                contents, missing = collect_files(directory)
                for entry in contents:
                    f.write(entry)
                    f.write("\n\n")
                all_missing.extend(missing)

            # List missing folders
            if all_missing:
                f.write("## Missing or Empty Folders\n")
                for missing in sorted(set(all_missing)):
                    f.write(f"- {missing}\n")

        logging.info(f"Output successfully written to {OUTPUT_FILE}")
        print(f"✅ Output written to {OUTPUT_FILE}")
    except Exception as e:
        logging.error(f"Failed to generate output: {e}")
        print(f"❌ Error: Failed to generate output. Check {LOG_FILE} for details.")

if __name__ == "__main__":
    main()
