DIRECTORY TREE:
/Users/stevencohen/Projects/universal_recycling/orders_project
├── backend
│   ├── __pycache__
│   │   ├── database.cpython-313.pyc
│   │   └── main.cpython-313.pyc
│   ├── database.py
│   ├── endpoints
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-313.pyc
│   │   │   ├── admin.cpython-313.pyc
│   │   │   ├── auth.cpython-313.pyc
│   │   │   ├── html_routes.cpython-313.pyc
│   │   │   ├── new_order_pdf_generator.cpython-313.pyc
│   │   │   ├── order_attachments.cpython-313.pyc
│   │   │   ├── order_email.cpython-313.pyc
│   │   │   ├── order_notes.cpython-313.pyc
│   │   │   ├── order_queries.cpython-313.pyc
│   │   │   ├── order_receiving.cpython-313.pyc
│   │   │   ├── orders.cpython-313.pyc
│   │   │   ├── pending_order_pdf_generator.cpython-313.pyc
│   │   │   ├── requisition_attachments.cpython-313.pyc
│   │   │   ├── requisitions.cpython-313.pyc
│   │   │   └── utils.cpython-313.pyc
│   │   ├── admin.py
│   │   ├── auth.py
│   │   ├── html_routes.py
│   │   ├── lookups
│   │   │   ├── __init__.py
│   │   │   ├── __pycache__
│   │   │   ├── business_details.py
│   │   │   ├── items.py
│   │   │   ├── mark_cod_paid_api.py
│   │   │   ├── projects.py
│   │   │   ├── requesters.py
│   │   │   ├── requisitioners.py
│   │   │   ├── settings.py
│   │   │   ├── suppliers.py
│   │   │   └── users.py
│   │   ├── mobile
│   │   │   ├── __pycache__
│   │   │   ├── mobile_auth.py
│   │   │   └── mobile_awaiting_authorisation.py
│   │   ├── new_order_pdf_generator.py
│   │   ├── order_attachments.py
│   │   ├── order_email.py
│   │   ├── order_notes.py
│   │   ├── order_queries.py
│   │   ├── order_receiving.py
│   │   ├── orders.py
│   │   ├── pending_order_pdf_generator.py
│   │   ├── requisition_attachments.py
│   │   ├── requisitions.py
│   │   ├── users.py
│   │   ├── utils.py
│   │   └── whatsapp.py
│   ├── main.py
│   ├── scrapers
│   ├── twilio
│   │   ├── __init__.py
│   │   └── twilio_utils.py
│   ├── utils
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-313.pyc
│   │   │   ├── db_utils.cpython-313.pyc
│   │   │   ├── order_utils.cpython-313.pyc
│   │   │   └── send_email.cpython-313.pyc
│   │   ├── db_utils.py
│   │   ├── order_utils.py
│   │   ├── permissions_utils.py
│   │   └── send_email.py
│   └── utils.py
├── bootstrap_admin_user.py
├── cookies.txt
├── data
│   ├── orders_backup_20250509_081210.db
│   ├── orders_backup_20250509_081218.db
│   ├── orders_backup_before_clear_dynamic_20250526_073429.db
│   ├── orders_backup_before_clear_dynamic_20250601_060426.db
│   ├── orders_backup_before_reset_20250519_105625.db
│   ├── orders_backup_before_reset_20250521_062017.db
│   ├── orders_backup_before_reset_20250525_103031.db
│   ├── orders.db
│   ├── pdfs
│   │   ├── order_URC1200.pdf
│   │   ├── order_URC1201.pdf
│   │   └── order_URC1203.pdf
│   ├── printouts
│   │   ├── order_1.txt
│   │   ├── order_3.txt
│   │   └── order_7.txt
│   ├── test_orders.db
│   └── uploads
│       ├── 101_2025-05-07_11-05.pdf
│       ├── 101_Screenshot_2025-05-07_at_13.34.24.png
│       ├── 13_Screenshot_2025-04-23_at_05.19.18.png
│       ├── 14_Screenshot_2025-04-23_at_05.19.18.png
│       ├── 153_Intimisso.pdf
│       ├── 155_Investment_Made_-_12_May_2025.jpg
│       ├── 17_Intimisso.pdf
│       ├── 18_Hydehurst RC- Proof of submission.pdf
│       ├── 19_Fidessa Consulting.PDF
│       ├── 20_test_invoice.pdf
│       ├── 20250530141159_Intimisso.pdf
│       ├── 20250530150935_Intimisso.pdf
│       ├── 20250531111129_Screenshot 2025-05-31 at 07.25.57.png
│       ├── 20250531111608_Screenshot 2025-05-31 at 07.25.57.png
│       ├── 20250531111656_Screenshot 2025-05-31 at 07.25.57.png
│       ├── 20250531111720_Screenshot 2025-05-31 at 07.25.57.png
│       ├── 20250531111949_Screenshot 2025-05-31 at 07.25.57.png
│       ├── 20250531112017_Screenshot 2025-05-31 at 07.25.57.png
│       ├── 20250531112627_Screenshot 2025-05-31 at 07.25.57.png
│       ├── 20250531113406_Screenshot 2025-05-31 at 07.25.57.png
│       ├── 20250531114549_Screenshot 2025-05-31 at 07.25.57.png
│       ├── 20250531114726_Screenshot 2025-05-31 at 07.25.57.png
│       ├── 20250531121244_Screenshot 2025-05-31 at 07.25.57.png
│       ├── 20250531121316_Screenshot 2025-05-31 at 12.09.01.png
│       ├── 20250531121421_Screenshot 2025-05-31 at 07.25.57.png
│       ├── 20250601054831_Screenshot 2025-05-31 at 12.09.01.png
│       ├── 20250601054842_Intimisso.pdf
│       ├── 20250601064115_Screenshot 2025-05-31 at 12.09.01.png
│       ├── 20250601064525_Screenshot 1.png
│       ├── 205_Intimisso.pdf
│       ├── 206_Screenshot_2025-05-31_at_10.53.46.png
│       ├── 209_Screenshot_2.png
│       ├── 21_Fidessa Consulting.PDF
│       ├── 21_test_invoice.pdf
│       ├── 22_Hydehurst RC- Proof of submission.pdf
│       ├── 24_Fidessa Consulting.PDF
│       ├── 25_Screenshot 2025-04-20 at 17.12.14.png
│       ├── 26_Intimisso.pdf
│       ├── 27_test_invoice.pdf
│       ├── 28_Deposit - 2.pdf
│       ├── 28_test_invoice.pdf
│       ├── 30_2025-04-22_18-29.pdf
│       ├── 30_2025-04-22_18-44_1.pdf
│       ├── 30_2025-04-22_18-44.pdf
│       ├── 30_Intimisso.pdf
│       ├── 31_Screenshot_2025-04-23_at_05.19.18.png
│       ├── 42_Intimisso.pdf
│       ├── 43_Intimisso.pdf
│       ├── 44_order_URC1201.pdf
│       └── test_invoice.pdf
├── frontend
│   ├── static
│   │   ├── audio
│   │   │   └── Alert.wav
│   │   ├── css
│   │   │   └── style.css
│   │   ├── images
│   │   │   └── universal_logo.jpg
│   │   ├── js
│   │   │   ├── __pycache__
│   │   │   ├── audit_trail.js
│   │   │   ├── authorisations_per_user.js
│   │   │   ├── cod_orders.js
│   │   │   ├── components
│   │   │   ├── login.js
│   │   │   ├── maintenance_screen
│   │   │   ├── maintenance.js
│   │   │   ├── new_order_main.js
│   │   │   ├── new_order_modals.js
│   │   │   ├── new_order_screen
│   │   │   ├── new_requisition_main.js
│   │   │   ├── new_requisitions_pdf_generator.py
│   │   │   ├── partially_delivered.js
│   │   │   ├── pending_orders.js
│   │   │   ├── pending_requisitions.js
│   │   │   ├── received_orders.js
│   │   │   └── send_email.js
│   │   └── mobile
│   │       ├── css
│   │       ├── js
│   │       ├── manifest.json
│   │       └── service-worker.js
│   └── templates
│       ├── _tab_nav.html
│       ├── access_denied.html
│       ├── audit_trail.html
│       ├── authorisations_per_user.html
│       ├── base.html
│       ├── cod_orders.html
│       ├── home.html
│       ├── index.html
│       ├── login.html
│       ├── maintenance.html
│       ├── mobile
│       │   ├── mobile_authorisations.html
│       │   └── mobile_login.html
│       ├── new_order.html
│       ├── new_requisition.html
│       ├── partially_delivered.html
│       ├── pdf_template.html
│       ├── pending_orders.html
│       ├── pending_requisitions.html
│       ├── print_template.html
│       └── received_orders.html
├── generated_pdfs
│   └── requisition_1.pdf
├── logs
│   ├── client.log
│   ├── cod_payments.log
│   ├── db_activity_log.txt
│   ├── new_orders_log.txt
│   ├── order_receiving_log.txt
│   ├── route_audit.log
│   └── server.log
├── requirements.txt
├── scripts
│   ├── __pycache__
│   │   └── add_debug_validation_handler.cpython-313.pyc
│   ├── add_debug_validation_handler.py
│   ├── database_scripts
│   │   ├── clear_all_database_tables.py
│   │   ├── clear_dynamic_database_tables.py
│   │   ├── print_all_data.py
│   │   └── push_database_to_vm.py
│   ├── dump_scripts
│   │   ├── individual_screens
│   │   │   ├── output_all_mobile_scripts.py
│   │   │   ├── output_all_pdf_scripts.py
│   │   │   ├── output_all_receiving_scripts.py
│   │   │   ├── output_audit_trail_screen_files.py
│   │   │   ├── output_authorisations_per_user.py
│   │   │   ├── output_cod_screen.py
│   │   │   ├── output_login_screen_files.py
│   │   │   ├── output_maintenance_screen_files.py
│   │   │   ├── output_new_order_screen.py
│   │   │   ├── output_requisitions_screen.py
│   │   │   └── tree_dependencies_database.py
│   │   └── mother_output_all_files_code_to_text.py
│   ├── git_scripts
│   │   ├── google_vm_pull_and_start.py
│   │   ├── google_vm_push_and_leave.py
│   │   ├── pull_and_start.py
│   │   ├── pull_database_from_google_vm.py
│   │   ├── push_and_leave.py
│   │   └── push_database_to_vm.py
│   ├── start_server.py
│   └── stop_server.py
├── scripts_for_each_screen
├── scripts_for_entire_project
│   └── entire_project_dump.txt
├── setup_env.py
└── venv
    ├── bin
    │   ├── activate
    │   ├── activate.csh
    │   ├── activate.fish
    │   ├── Activate.ps1
    │   ├── dotenv
    │   ├── fastapi
    │   ├── fonttools
    │   ├── normalizer
    │   ├── pip
    │   ├── pip3
    │   ├── pip3.13
    │   ├── pyftmerge
    │   ├── pyftsubset
    │   ├── python -> python3.13
    │   ├── python3 -> python3.13
    │   ├── python3.13 -> /opt/homebrew/opt/python@3.13/bin/python3.13
    │   ├── ttx
    │   ├── uvicorn
    │   └── weasyprint
    ├── include
    │   └── python3.13
    ├── lib
    │   └── python3.13
    │       └── site-packages
    ├── pyvenv.cfg
    └── share
        └── man
            └── man1

52 directories, 223 files

================================================================================
DATABASE SCHEMA:
CREATE TABLE requesters (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE
        )
CREATE TABLE sqlite_sequence(name,seq)
CREATE TABLE suppliers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            account_number TEXT,
            name TEXT,
            telephone TEXT,
            vat_number TEXT,
            registration_number TEXT,
            email TEXT,
            contact_name TEXT,
            contact_telephone TEXT,
            address_line1 TEXT,
            address_line2 TEXT,
            address_line3 TEXT,
            postal_code TEXT
        )
CREATE TABLE orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_number TEXT,
            status TEXT,
            created_date TEXT DEFAULT CURRENT_TIMESTAMP,
            received_date TEXT,
            total REAL,
            order_note TEXT,
            note_to_supplier TEXT,
            supplier_id INTEGER REFERENCES suppliers(id),
            requester_id INTEGER REFERENCES requesters(id)
        , required_auth_band INTEGER, payment_terms TEXT DEFAULT 'On account', payment_date TEXT, amount_paid REAL)
CREATE TABLE order_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER REFERENCES orders(id),
            item_code TEXT,
            item_description TEXT,
            project TEXT,
            qty_ordered REAL,
            qty_received REAL,
            received_date TEXT,
            price REAL,
            total REAL
        )
CREATE TABLE attachments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER REFERENCES orders(id),
            filename TEXT NOT NULL,
            file_path TEXT NOT NULL,
            upload_date TEXT NOT NULL
        , requisition_id INTEGER, requisition_number TEXT)
CREATE TABLE audit_trail (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER REFERENCES orders(id),
            action TEXT,
            details TEXT,
            action_date TEXT DEFAULT CURRENT_TIMESTAMP,
            user_id INTEGER
        , timestamp TEXT)
CREATE TABLE projects (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            project_code TEXT UNIQUE
        , project_name TEXT)
CREATE TABLE items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            item_code TEXT UNIQUE,
            item_description TEXT
        )
CREATE TABLE business_details (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_name TEXT NOT NULL,
                    address_line1 TEXT,
                    address_line2 TEXT,
                    city TEXT,
                    province TEXT,
                    postal_code TEXT,
                    telephone TEXT,
                    vat_number TEXT
                )
CREATE TABLE received_item_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_item_id INTEGER NOT NULL REFERENCES order_items(id),
    qty_received REAL NOT NULL,
    received_by_user_id INTEGER NOT NULL REFERENCES users(id),
    received_date TEXT NOT NULL  -- comes from user input on the modal
)
CREATE TABLE "settings" (
    id INTEGER PRIMARY KEY CHECK (id = 1),
    order_number_start TEXT,
    auth_threshold_1 INTEGER,
    auth_threshold_2 INTEGER,
    auth_threshold_3 INTEGER,
    auth_threshold_4 INTEGER
, requisition_number_start TEXT DEFAULT 'REQ1000')
CREATE TABLE "users" (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE,
    password_hash TEXT NOT NULL,
    rights TEXT NOT NULL,
    auth_threshold_band INTEGER CHECK (auth_threshold_band IN (1, 2, 3, 4))
, roles TEXT)
CREATE TABLE requisitions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    requisition_number TEXT UNIQUE,
    requisitioner_id INTEGER NOT NULL REFERENCES requisitioners(id),
    requisition_date TEXT DEFAULT CURRENT_TIMESTAMP,
    requisition_note TEXT,
    status TEXT DEFAULT 'submitted',  -- options: submitted, ordered, archived
    converted_order_id INTEGER DEFAULT NULL  -- optional future reference
)
CREATE TABLE requisitioners (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE NOT NULL
)
CREATE TABLE requisition_attachments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    requisition_id INTEGER REFERENCES requisitions(id),
    filename TEXT NOT NULL,
    file_path TEXT NOT NULL,
    upload_date TEXT NOT NULL
)
CREATE TABLE requisition_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    requisition_id INTEGER NOT NULL REFERENCES requisitions(id),
    description TEXT NOT NULL,
    quantity REAL
)
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/.DS_Store
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/.DS_Store

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/.DS_Store
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/.DS_Store
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/.DS_Store

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/.DS_Store
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/css/style.css
  body {
    font-family: Arial, sans-serif;
    margin: 2rem;
    background-color: #f4f6f8;
  }

  h2 {
    margin-bottom: 1.5rem;
    font-size: 1.8rem;
    color: #1a3c5e;
  }

  /* ------------------ TABLE ------------------ */
  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
    background-color: #fff;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    overflow: hidden;
  }

  th {
    background-color: #e8eef4;
    font-weight: 600;
    color: #1a3c5e;
    text-transform: none;
    font-size: 0.95rem;
    height: 48px;
  }

  td {
    border: 1px solid #e0e4e8;
    padding: 0.75rem;
    text-align: center;
    font-size: 0.95rem;
    color: #333;
  }

  /* Add spacing between buttons in table cells */
  td button {
    margin-right: 0.5rem;
  }

  td button:last-child {
    margin-right: 0;
  }

  /* Left-align all cells in maintenance screen tables */
  #users-table td,
  #requesters-table td,
  #items-table td,
  #suppliers-table td,
  #projects-table td {
    text-align: left;
  }

  /* ------------------ FILTERS ------------------ */
  .filters {
    margin-bottom: 1.5rem;
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    align-items: center;
    background-color: #fff;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .filters label {
    font-weight: 600;
    color: #1a3c5e;
    margin-right: 0.5rem;
    font-size: 0.95rem;
  }

  input[type="date"],
  input[type="text"],
  input[type="number"],
  select,
  textarea {
    padding: 0.6rem;
    font-size: 0.95rem;
    font-family: Arial, sans-serif;
    border: 1px solid #c7d0d9;
    border-radius: 6px;
    background-color: #fff;
    min-width: 180px;
    max-width: 240px;
    transition: border-color 0.2s;
  }

  input[type="date"]:focus,
  select:focus,
  input[type="text"]:focus,
  textarea:focus {
    outline: none;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px rgba(0, 102, 204, 0.2);
  }

  /* ------------------ BUTTONS ------------------ */
  button {
    padding: 0.6rem 1.5rem;
    cursor: pointer;
    background-color: #0066cc;
    color: #fff;
    border: none;
    border-radius: 6px;
    font-size: 0.95rem;
    font-weight: 500;
    transition: background-color 0.2s;
  }

  button:hover {
    background-color: #0055aa;
  }

  /* ------------------ ICONS ------------------ */
  .expand-icon,
  .clip-icon,
  .eye-icon,
  .note-icon,
  .supplier-note-icon,
  .receive-icon,
  .pdf-icon {
    cursor: pointer;
    font-size: 1.2rem;
    margin: 0 0.4rem;
    display: inline-block;
    color: #0066cc;
    transition: color 0.2s;
  }

  .expand-icon:hover,
  .clip-icon:hover,
  .eye-icon:hover,
  .note-icon:hover,
  .supplier-note-icon:hover,
  .receive-icon:hover {
    color: #003366;
  }

  .eye-icon.disabled {
    opacity: 0.3;
    cursor: default;
  }

  /* ------------------ LOGIN ------------------ */
  .login-box {
    background: white;
    padding: 2rem 3rem;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
    text-align: center;
    margin: 5rem auto;
  }

  .login-box h2 {
    margin-bottom: 1.5rem;
    font-size: 1.5rem;
    color: #333;
  }

  .login-box input {
    width: 100%;
    padding: 0.8rem;
    margin-bottom: 1.2rem;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1rem;
  }

  .login-box button {
    width: 100%;
    padding: 0.8rem;
    background-color: #0056b3;
    border: none;
    color: white;
    font-size: 1rem;
    border-radius: 5px;
    cursor: pointer;
  }

  .login-box button:hover {
    background-color: #004a99;
  }

  #login-error {
    margin-top: 0.5rem;
    color: red;
    font-size: 0.9rem;
  }

  /* ------------------ MAINTENANCE ------------------ */
  .tabs {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .tab {
    padding: 0.5rem 1rem;
    cursor: pointer;
    background: #ddd;
    border-radius: 4px 4px 0 0;
  }

  .tab.active {
    background: #007BFF;
    color: white;
  }

  .tab-content {
    display: none;
    padding: 1rem;
    border: 1px solid #ccc;
    border-radius: 0 4px 4px 4px;
    background-color: white;
  }

  .tab-content.active {
    display: block;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    font-weight: bold;
  }

  /* ------------------ NEW ORDER SCREEN ONLY ------------------ */
  .order-header {
    margin-bottom: 2rem;
  }

  .order-header label span {
    font-weight: bold;
    font-size: 1.05rem;
    margin-left: 0.5rem;
  }

  .form-row {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .column {
    flex: 1 1 240px;
    display: flex;
    flex-direction: column;
  }

  #note_to_supplier {
    min-height: 100px;
  }

  .delivery-block {
    margin-top: 2.5rem;
    margin-bottom: 2.5rem;
  }

  .add-item-block {
    margin-top: 2rem;
    margin-bottom: 2rem;
  }

  .summary {
    margin-bottom: 2rem;
  }

  .button-group {
    margin-top: 2rem;
  }

  /* Reusable table styling for modals */
  .receive-modal table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
    font-size: 14px;
  }

  .receive-modal th,
  .receive-modal td {
    border: 1px solid #ccc;
    padding: 8px;
    text-align: left;
  }

  .receive-modal input[type="number"] {
    width: 80px;
  }
  i:hover {
    cursor: pointer;
  }
  .note-icon:hover,
  .clip-icon:hover,
  .expand-icon:hover,
  .receive-icon:hover,
  .supplier-note-icon:hover {
    cursor: pointer;
  }
  .email-icon {
    cursor: pointer;
    margin-left: 5px;
    font-size: 1.2em;
  }
  .email-icon:hover {
    color: #007bff;
  }

  /* ------------------ FORM FIELD SPACING (MAINTENANCE) ------------------ */

  #settings .form-group label,
  #settings .form-group input {
    display: block;
    margin-bottom: 0.5rem;
  }

  #settings .form-group input {
    width: 250px;
    padding: 0.5rem;
  }

  #settings .form-group {
    margin-bottom: 1.2rem;
  }

  /* ------------------ BUSINESS DETAILS FORM SPACING ------------------ */

  #business_details .form-group label,
  #business_details .form-group input {
    display: block;
    margin-bottom: 0.5rem;
  }

  #business_details .form-group input {
    width: 280px;
    padding: 0.5rem;
  }

  #business_details .form-group {
    margin-bottom: 1.2rem;
  }

  /* ------------------ USERS TAB FORM SPACING ------------------ */

  #users .form-group label,
  #users .form-group input,
  #users .form-group select {
    display: block;
    margin-bottom: 0.5rem;
  }

  #users .form-group input,
  #users .form-group select {
    width: 280px;
    padding: 0.5rem;
  }

  #users .form-group {
    margin-bottom: 1.2rem;
  }

  .receive-icon.disabled {
  opacity: 0.4;
  pointer-events: none;
  cursor: not-allowed;
}
/* ------------------ TOP TAB NAV ------------------ */
.tab-nav {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 0.8rem;
  margin: 1.5rem 0 2rem 0;
}

.tab-nav a {
  display: inline-block;
  padding: 0.6rem 1.2rem;
  background-color: #007bff;
  color: white;
  text-decoration: none;
  border-radius: 8px;
  font-weight: bold;
  transition: background-color 0.2s;
}

.tab-nav a:hover {
  background-color: #005fa3;
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/css/style.css
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/images/universal_logo.jpg
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/images/universal_logo.jpg

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/images/universal_logo.jpg
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/received_orders.js
import { expandLineItemsWithReceipts } from "/static/js/components/expand_line_items.js";
import { showUploadAttachmentsModal, checkAttachments, showViewAttachmentsModal } from "/static/js/components/attachment_modal.js";
import { showOrderNoteModal, showSupplierNoteModal } from "/static/js/components/order_note_modal.js";
import { loadRequesters, loadSuppliers } from "/static/js/components/shared_filters.js";
import { showPDFModal } from "/static/js/components/pdf_modal.js";

function escapeHTML(str) {
  if (!str) return "";
  return str
    .replace(/&/g, "&")
    .replace(/</g, "<")
    .replace(/>/g, ">")
    .replace(/"/g, "\"")
    .replace(/'/g, "\'");
}

async function loadFiltersAndOrders() {
  try {
    await loadRequesters("filter-requester");
    await loadSuppliers("filter-supplier");
    await loadOrders();
  } catch (err) {
    console.error("❌ Failed to load filters or orders:", err);
    document.getElementById("received-body").innerHTML = `<tr><td colspan="7">Error loading filters: ${escapeHTML(err.message)}</td></tr>`;
  }
}

async function loadOrders() {
  const startDate = document.getElementById("start-date").value;
  const endDate = document.getElementById("end-date").value;
  const requester = document.getElementById("filter-requester").value;
  const supplier = document.getElementById("filter-supplier").value;
  const status = document.getElementById("filter-status").value;

  const params = new URLSearchParams();
  if (startDate) params.append("start_date", startDate);
  if (endDate) params.append("end_date", endDate);
  if (requester && requester !== "All") params.append("requester", requester);
  if (supplier && supplier !== "All") params.append("supplier", supplier);
  if (status && status !== "All") params.append("status", status);

  try {
    const res = await fetch(`/orders/api/received_orders?${params.toString()}`);
    if (!res.ok) throw new Error(`HTTP ${res.status}: ${await res.text()}`);
    const data = await res.json();

    const tbody = document.getElementById("received-body");
    tbody.innerHTML = "";

    if (data.orders && Array.isArray(data.orders) && data.orders.length > 0) {
      data.orders.forEach((order, index) => {
        const row = document.createElement("tr");
        const sanitizedOrderNote = escapeHTML(order.order_note || "");
        const sanitizedSupplierNote = escapeHTML(order.note_to_supplier || "");
        const sanitizedOrderNumber = escapeHTML(order.order_number);
        const sanitizedSupplier = escapeHTML(order.supplier || "N/A");
        const sanitizedRequester = escapeHTML(order.requester);
        const sanitizedDate = escapeHTML(order.created_date || "");
        const sanitizedTotal = order.total != null ? `R${parseFloat(order.total).toFixed(2)}` : "R0.00";
        const sanitizedStatus = escapeHTML(order.status || "");

        row.innerHTML = `
          <td>${sanitizedDate}</td>
          <td>${sanitizedOrderNumber}</td>
          <td>${sanitizedRequester}</td>
          <td>${sanitizedSupplier}</td>
          <td>${sanitizedTotal}</td>
          <td><span class="status">${sanitizedStatus}</span></td>
          <td>
            <span class="expand-icon" style="cursor:pointer" title="View Line Items">⬇️</span>
            <span class="clip-icon" style="cursor:pointer" title="View/Upload Attachments">📎</span>
            <span class="note-icon" style="cursor:pointer" title="Edit Order Note">📝</span>
            <span class="supplier-note-icon" style="cursor:pointer" title="View Note to Supplier">📦</span>
            <span class="pdf-icon" style="cursor:pointer" title="View Purchase Order PDF">📄</span>
          </td>`;

        tbody.appendChild(row);

        row.querySelector(".expand-icon").addEventListener("click", (e) => {
          expandLineItemsWithReceipts(order.id, e.target);
        });

        row.querySelector(".clip-icon").addEventListener("click", async (e) => {
          const target = e.target;
          const has = await checkAttachments(order.id);
          if (has) {
            showViewAttachmentsModal(order.id, sanitizedOrderNumber);
          } else {
            showUploadAttachmentsModal(order.id, sanitizedOrderNumber, async () => {
              const newHas = await checkAttachments(order.id);
              target.classList.toggle("eye-icon", newHas);
            });
          }
        });

        row.querySelector(".note-icon").addEventListener("click", (e) => {
          const target = e.target;
          showOrderNoteModal(sanitizedOrderNote, order.id, (newNote) => {
            target.setAttribute("data-order-note", escapeHTML(newNote));
          });
        });

        row.querySelector(".supplier-note-icon").addEventListener("click", () => {
          try {
            showSupplierNoteModal(sanitizedSupplierNote);
          } catch (e) {
            console.error(`Failed to show supplier note for order ${sanitizedOrderNumber}:`, e);
            alert(`Error displaying supplier note: ${e.message}`);
          }
        });

        row.querySelector(".pdf-icon").addEventListener("click", async () => {
          try {
            const response = await fetch(`/orders/api/generate_pdf_for_order/${order.id}`);
            if (!response.ok) throw new Error(`PDF generation failed with status ${response.status}`);

            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/pdf')) {
              const blob = await response.blob();
              if (blob.size === 0) {
                throw new Error('Received empty PDF file');
              }
              showPDFModal(blob);
            } else {
              const data = await response.json();
              throw new Error(`Unexpected response: ${JSON.stringify(data)}`);
            }
          } catch (err) {
            alert("❌ Could not generate PDF");
            console.error(err);
          }
        });
      });
    } else {
      tbody.innerHTML = '<tr><td colspan="7">No received orders found.</td></tr>';
    }
  } catch (err) {
    console.error("❌ Error loading received orders:", err);
    document.getElementById("received-body").innerHTML = `<tr><td colspan="7">Error loading orders: ${escapeHTML(err.message)}</td></tr>`;
  }
}

function clearFilters() {
  document.getElementById("start-date").value = "";
  document.getElementById("end-date").value = "";
  document.getElementById("filter-requester").value = "All";
  document.getElementById("filter-supplier").value = "All";
  document.getElementById("filter-status").value = "All";
  loadOrders();
}

document.getElementById("run-btn").addEventListener("click", loadOrders);
document.getElementById("clear-btn").addEventListener("click", clearFilters);
document.addEventListener("DOMContentLoaded", loadFiltersAndOrders);

window.showUploadAttachmentsModal = showUploadAttachmentsModal;
window.checkAttachments = checkAttachments;
window.showViewAttachmentsModal = showViewAttachmentsModal;
window.showOrderNoteModal = showOrderNoteModal;
window.showSupplierNoteModal = showSupplierNoteModal;

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/received_orders.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/authorisations_per_user.js
// File: frontend/static/js/authorisations_per_user.js

import { loadRequesters, loadSuppliers } from "./components/shared_filters.js";

export async function setupAuthorisationUI({
  user,
  mountPointId,
  showPDF,
  onAuthorised = () => {},
  onError = () => {}
}) {
  console.log("🔐 My Authorisations screen (desktop) loaded");

  const tableBody = document.getElementById(mountPointId);
  if (!tableBody) {
    console.error(`❌ Mount point '${mountPointId}' not found.`);
    return;
  }

  await loadRequesters("filter-requester");
  await loadSuppliers("filter-supplier");

  await loadOrdersForUser(user);

  async function loadOrdersForUser(user) {
    tableBody.innerHTML = "<tr><td colspan='7'>Loading orders...</td></tr>";

    try {
      const res = await fetch("/orders/api/awaiting_authorisation");
      const orders = await res.json();

      const userBand = parseInt(user.auth_threshold_band);
      const eligibleOrders = orders.filter(
        order => parseInt(order.required_auth_band) === userBand
      );

      if (eligibleOrders.length === 0) {
        tableBody.innerHTML = "<tr><td colspan='7'>✅ No orders awaiting your authorisation.</td></tr>";
        return;
      }

      tableBody.innerHTML = "";

      for (const order of eligibleOrders) {
        const row = document.createElement("tr");
        const created = new Date(order.created_date);
        const formattedDate = `${created.getDate()} ${created.toLocaleString("default", {
          month: "short"
        })} ${created.getFullYear()}`;

        row.innerHTML = `
          <td>${formattedDate}</td>
          <td>${order.order_number}</td>
          <td>${order.requester_name}</td>
          <td>${order.supplier_name}</td>
          <td>R${order.total}</td>
          <td>${order.status}</td>
          <td>
            <button class="view-btn">View</button>
            <button class="auth-btn">Authorise</button>
          </td>
        `;

        row.querySelector(".view-btn").addEventListener("click", () => {
          try {
            showPDF(order.id);  // ✅ delegate to external handler
          } catch (err) {
            console.error("❌ Error triggering PDF display:", err);
            onError("❌ Could not open PDF preview.");
          }
        });

        row.querySelector(".auth-btn").addEventListener("click", async () => {
          try {
            const res = await fetch(`/orders/api/authorise_order/${order.id}`, { method: "POST" });
            const result = await res.json();

            if (result.message === "Order authorised") {
              console.log(`✅ Authorised order ${order.order_number}`);
              onAuthorised(order);
              row.remove();
            } else {
              onError("❌ Failed to authorise: " + result.message);
            }
          } catch (err) {
            console.error("❌ Error during authorisation:", err);
            onError("❌ Network or server error while authorising.");
          }
        });

        tableBody.appendChild(row);
      }
    } catch (err) {
      console.error("❌ Could not load orders:", err);
      tableBody.innerHTML = "<tr><td colspan='7'>❌ Error loading orders.</td></tr>";
    }
  }
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/authorisations_per_user.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/new_order_modals.js
export { showOrderNoteModal, showSupplierNoteModal } from './components/order_note_modal.js';

export function showViewAttachmentsModal(orderId, orderNumber, onUploadComplete = null, customFiles = null) {  
   // Use customFiles if provided, otherwise fetch attachments  
   const filesPromise = customFiles ? Promise.resolve({ attachments: customFiles }) : fetch(`/orders/attachments/${orderId}`).then(res => res.json());

   filesPromise  
       .then(data => {  
           const files = data.attachments || [];  
           const modal = createBaseModal();  
           const title = document.createElement("h3");  
           title.textContent = `Attachments for ${orderNumber}`;  
           modal.inner.appendChild(title);

           if (files.length > 0) {  
               const list = document.createElement("ul");  
               list.style.listStyle = "none";  
               list.style.padding = "0";

               files.forEach(f => {  
                   const li = document.createElement("li");  
                   const link = document.createElement("a");  
                   link.href = f.file_path;  
                   link.textContent = f.filename;  
                   link.target = "_blank";  
                   link.style.display = "block";  
                   link.style.marginBottom = "0.5rem";  
                   link.style.color = "green";  
                   link.style.textDecoration = "underline";  
                   li.appendChild(link);  
                   list.appendChild(li);  
               });

               modal.inner.appendChild(list);  
           }

           const dropzone = document.createElement("div");  
           dropzone.textContent = "Drag and drop files here or click to select";  
           dropzone.style.border = "2px dashed #aaa";  
           dropzone.style.padding = "2rem";  
           dropzone.style.textAlign = "center";  
           dropzone.style.cursor = "pointer";  
           dropzone.style.marginTop = "1rem";  
           dropzone.style.background = "#fafafa";

           dropzone.onclick = () => {  
               const input = document.createElement("input");  
               input.type = "file";  
               input.multiple = true;  
               input.onchange = () => handleFiles(input.files, orderId, modal.inner, onUploadComplete);  
               input.click();  
           };

           dropzone.ondragover = e => {  
               e.preventDefault();  
               dropzone.style.background = "#eee";  
           };  
           dropzone.ondragleave = () => {  
               dropzone.style.background = "#fafafa";  
           };  
           dropzone.ondrop = e => {  
               e.preventDefault();  
               dropzone.style.background = "#fafafa";  
               handleFiles(e.dataTransfer.files, orderId, modal.inner, onUploadComplete);  
           };

           modal.inner.appendChild(dropzone);

           const closeBtn = document.createElement("button");  
           closeBtn.textContent = "Close";  
           closeBtn.style.marginTop = "1.5rem";  
           closeBtn.style.padding = "0.5rem 1rem";  
           closeBtn.style.border = "none";  
           closeBtn.style.cursor = "pointer";  
           closeBtn.style.background = "#ccc";  
           closeBtn.onclick = () => document.body.removeChild(modal.container);

           modal.inner.appendChild(closeBtn);

           document.body.appendChild(modal.container);  
       })  
       .catch(err => {  
           alert("❌ Failed to load attachments");  
           console.error(err);  
       });  
}

export function handleFiles(fileList, orderId, modalInner, onUploadComplete = null) {  
   Array.from(fileList).forEach(file => {  
       const formData = new FormData();  
       formData.append("file", file);  
       formData.append("order_id", orderId);

       fetch("/orders/upload_attachment", {  
           method: "POST",  
           body: formData,  
       })  
           .then(res => res.json())  
           .then(data => {  
               const msg = document.createElement("p");  
               msg.textContent = data.status;  
               msg.style.color = "green";  
               modalInner.appendChild(msg);  
               if (onUploadComplete) onUploadComplete();  
           })  
           .catch(err => {  
               const msg = document.createElement("p");  
               msg.textContent = `❌ Failed to upload: ${file.name}`;  
               msg.style.color = "red";  
               modalInner.appendChild(msg);  
               console.error(err);  
           });  
   });  
}

export function createBaseModal() {  
   const container = document.createElement("div");  
   container.style.position = "fixed";  
   container.style.top = "0";  
   container.style.left = "0";  
   container.style.width = "100vw";  
   container.style.height = "100vh";  
   container.style.backgroundColor = "rgba(0,0,0,0.5)";  
   container.style.display = "flex";  
   container.style.alignItems = "center";  
   container.style.justifyContent = "center";  
   container.style.zIndex = "9999";

   const inner = document.createElement("div");  
   inner.style.backgroundColor = "white";  
   inner.style.padding = "1.5rem";  
   inner.style.borderRadius = "8px";  
   inner.style.width = "90%";  
   inner.style.maxWidth = "500px";  
   inner.style.maxHeight = "80vh";  
   inner.style.overflowY = "auto";  
   inner.style.fontFamily = "Arial, sans-serif";  
   inner.style.position = "relative";

   const close = document.createElement("button");  
   close.textContent = "✖";  
   close.style.position = "absolute";  
   close.style.top = "10px";  
   close.style.right = "10px";  
   close.style.background = "none";  
   close.style.border = "none";  
   close.style.fontSize = "1.2rem";  
   close.style.cursor = "pointer";  
   close.onclick = () => document.body.removeChild(container);

   inner.appendChild(close);  
   container.appendChild(inner);

   return { container, inner };  
}
END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/new_order_modals.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance.js
// File: /frontend/static/js/maintenance.js

import { initMaintenanceScreen } from './maintenance_screen/index.js';

document.addEventListener("DOMContentLoaded", () => {
  initMaintenanceScreen();
});

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/new_requisition_main.js
import { logToServer, populateDropdown } from "./components/utils.js";

let rowCount = 0;
let currentRequisitionId = null;
let currentRequisitionNumber = null;

document.addEventListener("DOMContentLoaded", async () => {
  await populateDropdown("/lookups/requisitioners", "requisitioner");
  addLineItem();

  try {
    const settings = await fetch("/lookups/settings").then(res => res.json());
    const nextReqNum = settings.requisition_number_start || "REQ1000";
    const today = new Date().toISOString().split("T")[0];

    currentRequisitionNumber = nextReqNum;
    document.getElementById("requisition-number").value = nextReqNum;
    document.getElementById("requisition-date").value = today;
  } catch (err) {
    console.error("❌ Failed to load settings:", err);
  }

  document.getElementById("add-line").addEventListener("click", addLineItem);
  document.getElementById("submit-requisition").addEventListener("click", submitRequisition);
  document.getElementById("preview-pdf").addEventListener("click", previewPDF);
});

function addLineItem() {
  const tbody = document.getElementById("line-items-body");
  const row = document.createElement("tr");
  row.dataset.row = rowCount;

  row.innerHTML = `
    <td><input type="text" class="description" required placeholder="Enter item description"></td>
    <td><input type="number" class="quantity" required min="0" step="1" value="1"></td>
    <td><button type="button" onclick="this.closest('tr').remove()">🗑️</button></td>
  `;

  tbody.appendChild(row);
  rowCount++;
}

async function submitRequisition() {
  const log = document.getElementById("requisition-log");
  log.textContent = "";

  const requisitionerId = document.getElementById("requisitioner").value;
  const note = document.getElementById("requisition-note").value;
  const date = document.getElementById("requisition-date").value;

  if (!requisitionerId) {
    log.textContent = "⚠️ Please select a requisitioner.";
    return;
  }

  const items = [];
  document.querySelectorAll("#line-items-body tr").forEach(row => {
    const desc = row.querySelector(".description").value.trim();
    const qty = parseFloat(row.querySelector(".quantity").value);

    if (desc && qty > 0) {
      items.push({ description: desc, quantity: qty });
    }
  });

  if (items.length === 0) {
    log.textContent = "⚠️ Please add at least one valid line item.";
    return;
  }

  try {
    const payload = {
      requisition_number: currentRequisitionNumber,
      requisitioner_id: parseInt(requisitionerId),
      requisition_note: note,
      requisition_date: date,
      items
    };

    const res = await fetch("/requisitions", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });

    const data = await res.json();
    if (res.ok) {
      log.textContent = `✅ Requisition submitted (ID: ${data.requisition_id})`;
      currentRequisitionId = data.requisition_id;
    } else {
      log.textContent = `❌ Submission failed: ${data.detail}`;
    }

  } catch (err) {
    log.textContent = `❌ Error: ${err.message}`;
  }
}

function previewPDF() {
  alert("📄 PDF preview not yet implemented.");
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/new_requisition_main.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/partially_delivered.js
import { loadRequesters, loadSuppliers } from './components/shared_filters.js';
import { expandLineItems } from './components/expand_line_items.js';
import { showUploadAttachmentsModal, checkAttachments, showViewAttachmentsModal } from './components/attachment_modal.js';
import { showOrderNoteModal, showSupplierNoteModal } from './components/order_note_modal.js';
import { showReceiveModal } from './components/receive_modal.js';
import { showPDFModal } from './components/pdf_modal.js';

console.log("Loading partially_delivered.js");

async function loadFiltersAndOrders() {
    try {
        console.log("Loading filters...");
        await Promise.all([
            loadRequesters("filter-requester"),
            loadSuppliers("filter-supplier")
        ]);
        console.log("Filters loaded successfully");
        await loadOrders();
    } catch (error) {
        console.error("Error loading filters or orders:", error);
        document.getElementById("partially-delivered-body").innerHTML = '<tr><td colspan="7">Error loading filters: ' + escapeHTML(error.message) + '</td></tr>';
    }
}

function escapeHTML(str) {
    if (typeof str !== 'string') return '';
    return str
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;');
}

async function loadOrders() {
    const startDate = document.getElementById("start-date").value;
    const endDate = document.getElementById("end-date").value;
    const requester = document.getElementById("filter-requester").value;
    const supplier = document.getElementById("filter-supplier").value;
    const status = document.getElementById("filter-status").value;

    const params = new URLSearchParams();
    if (startDate) params.append("start_date", startDate);
    if (endDate) params.append("end_date", endDate);
    if (requester && requester !== "All") params.append("requester", requester);
    if (supplier && supplier !== "All") params.append("supplier", supplier);
    if (status && status !== "All") params.append("status", status);

    try {
        console.log("Fetching partially delivered orders with params:", params.toString());
        const res = await fetch(`/orders/api/partially_delivered?${params.toString()}`);
        if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}, Message: ${await res.text()}`);
        const data = await res.json();

        const tbody = document.getElementById("partially-delivered-body");
        tbody.innerHTML = "";

        if (data.orders && Array.isArray(data.orders) && data.orders.length > 0) {
            data.orders.forEach((order, index) => {
                const row = document.createElement("tr");
                const sanitizedOrderNote = escapeHTML(order.order_note || "");
                const sanitizedSupplierNote = escapeHTML(order.note_to_supplier || "");
                const sanitizedOrderNumber = escapeHTML(order.order_number || "");
                const sanitizedSupplier = escapeHTML(order.supplier || "N/A");
                const sanitizedRequester = escapeHTML(order.requester || "N/A");
                const sanitizedDate = escapeHTML(order.created_date || "");
                const sanitizedTotal = order.total != null ? `R${parseFloat(order.total).toFixed(2)}` : "R0.00";
                const sanitizedStatus = escapeHTML(order.status || "");
                const rawStatus = (order.status || "").trim();
                const receiveIconHTML = (["Pending", "Authorised", "Partially Received"].includes(rawStatus))
                    ? `<span class="receive-icon" style="color: green; cursor: pointer;" title="Receive More Items" data-order-id="${order.id || ''}" data-order-number="${sanitizedOrderNumber}">✅</span>`
                    : (rawStatus === "Awaiting Authorisation"
                        ? `<span class="receive-icon disabled" style="color: grey; cursor: not-allowed;" title="Cannot receive until authorised">✅</span>`
                        : "");

                row.innerHTML = `
                    <td>${sanitizedDate}</td>
                    <td>${sanitizedOrderNumber}</td>
                    <td>${sanitizedRequester}</td>
                    <td>${sanitizedSupplier}</td>
                    <td>${sanitizedTotal}</td>
                    <td><span class="status">${sanitizedStatus}</span></td>
                    <td>
                        <span class="expand-icon" data-order-id="${order.id || ''}">⬇️</span>
                        <span class="clip-icon" title="View/Upload Attachments" data-order-id="${order.id || ''}" data-order-number="${sanitizedOrderNumber}">📎</span>
                        <span class="note-icon" title="Edit Order Note" data-order-id="${order.id || ''}" data-order-note="${sanitizedOrderNote}" id="order-note-${index}">📝</span>
                        <span class="supplier-note-icon" title="View Note to Supplier" data-supplier-note="${sanitizedSupplierNote}" data-order-number="${sanitizedOrderNumber}" id="supplier-note-${index}">📦</span>
                        ${receiveIconHTML}
                        <span class="complete-icon" title="Mark as Complete" data-order-id="${order.id || ''}" data-order-number="${sanitizedOrderNumber}">✔️</span>
                        <span class="pdf-icon" title="View Purchase Order PDF" data-order-id="${order.id || ''}" data-order-number="${sanitizedOrderNumber}">📄</span>
                    </td>
                `;
                tbody.appendChild(row);

                if (["Pending", "Authorised", "Partially Received"].includes(rawStatus)) {
                    const receiveIcon = row.querySelector(".receive-icon");
                    if (receiveIcon) {
                        receiveIcon.addEventListener("click", () =>
                            window.showReceiveModal(order.id || '', sanitizedOrderNumber)
                        );
                    }
                }

                row.querySelector(`#supplier-note-${index}`).addEventListener("click", () => {
                    try {
                        window.showSupplierNoteModal(sanitizedSupplierNote);
                    } catch (e) {
                        console.error(`Failed to show supplier note for order ${sanitizedOrderNumber}:`, e);
                        alert(`Error displaying supplier note: ${e.message}`);
                    }
                });

                row.querySelector(`#order-note-${index}`).addEventListener("click", (e) => {
                    const target = e.target;
                    window.showOrderNoteModal(sanitizedOrderNote, order.id || '', (newNote) => {
                        target.setAttribute("data-order-note", escapeHTML(newNote));
                    });
                });

                row.querySelector(".expand-icon").addEventListener("click", (e) => {
                    if (!order.id) {
                        console.error("No order ID provided for expanding line items");
                        alert("Cannot expand line items: No order ID available");
                        return;
                    }
                    window.expandLineItems(order.id, e.target);
                });

                row.querySelector(".clip-icon").addEventListener("click", async (e) => {
                    const target = e.target;
                    const has = await window.checkAttachments(order.id || '');
                    if (has) {
                        window.showViewAttachmentsModal(order.id || '', sanitizedOrderNumber);
                    } else {
                        window.showUploadAttachmentsModal(order.id || '', sanitizedOrderNumber, async () => {
                            const recheck = await window.checkAttachments(order.id || '');
                            target.classList.toggle('eye-icon', recheck);
                        });
                    }
                });

                row.querySelector(".complete-icon").addEventListener("click", async () => {
                    if (confirm(`Are you sure you want to mark order ${sanitizedOrderNumber} as complete with partial delivery?`)) {
                        try {
                            const res = await fetch(`/orders/mark_complete/${order.id}`, {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                            });
                            if (!res.ok) {
                                const errorText = await res.text();
                                throw new Error(`Failed to mark order as complete: ${res.status} - ${errorText}`);
                            }
                            alert(`Order ${sanitizedOrderNumber} marked as complete.`);
                            loadOrders();
                        } catch (error) {
                            console.error("Error marking order as complete:", error);
                            alert(`Failed to mark order as complete: ${error.message}`);
                        }
                    }
                });

                row.querySelector(".pdf-icon").addEventListener("click", async () => {
                    try {
                        const response = await fetch(`/orders/api/generate_pdf_for_order/${order.id}`);
                        if (!response.ok) throw new Error(`PDF generation failed with status ${response.status}`);

                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/pdf')) {
                            const blob = await response.blob();
                            if (blob.size === 0) {
                                throw new Error('Received empty PDF file');
                            }
                            showPDFModal(blob);
                        } else {
                            const data = await response.json();
                            throw new Error(`Unexpected response: ${JSON.stringify(data)}`);
                        }
                    } catch (err) {
                        alert("❌ Could not generate PDF");
                        console.error(err);
                    }
                });
            });
        } else {
            tbody.innerHTML = '<tr><td colspan="7">No partially delivered orders found.</td></tr>';
        }
    } catch (error) {
        console.error("Error loading orders:", error);
        document.getElementById("partially-delivered-body").innerHTML = '<tr><td colspan="7">Error loading orders: ' + escapeHTML(error.message) + '</td></tr>';
    }
}

function clearFilters() {
    document.getElementById("start-date").value = "";
    document.getElementById("end-date").value = "";
    document.getElementById("filter-requester").value = "All";
    document.getElementById("filter-supplier").value = "All";
    document.getElementById("filter-status").value = "All";
    loadOrders();
}

document.getElementById("run-btn").addEventListener("click", loadOrders);
document.getElementById("clear-btn").addEventListener("click", clearFilters);
document.addEventListener("DOMContentLoaded", loadFiltersAndOrders);

window.expandLineItems = expandLineItems;
window.showUploadAttachmentsModal = showUploadAttachmentsModal;
window.checkAttachments = checkAttachments;
window.showViewAttachmentsModal = showViewAttachmentsModal;
window.showOrderNoteModal = showOrderNoteModal;
window.showSupplierNoteModal = showSupplierNoteModal;
window.showReceiveModal = showReceiveModal;

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/partially_delivered.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/pending_orders.js
import { loadRequesters, loadSuppliers } from './components/shared_filters.js';
import { expandLineItems } from './components/expand_line_items.js';
import { showUploadAttachmentsModal, checkAttachments, showViewAttachmentsModal } from './components/attachment_modal.js';
import { showOrderNoteModal, showSupplierNoteModal } from './components/order_note_modal.js';
import { showReceiveModal } from './components/receive_modal.js';
import { showPDFModal } from './components/pdf_modal.js';

console.log("Loading pending_orders.js");

async function loadFiltersAndOrders() {
    try {
        console.log("Loading filters...");
        await Promise.all([
            loadRequesters("filter-requester").catch(err => { console.error("Failed to load requesters:", err); throw err; }),
            loadSuppliers("filter-supplier").catch(err => { console.error("Failed to load suppliers:", err); throw err; })
        ]);
        console.log("Filters loaded successfully");
        await loadOrders();
    } catch (error) {
        console.error("Error loading filters or orders:", error);
        document.getElementById("pending-body").innerHTML = '<tr><td colspan="7">Error loading filters: ' + escapeHTML(error.message) + '</td></tr>';
    }
}

function escapeHTML(str) {
    if (typeof str !== 'string') return '';
    return str
        .replace(/&/g, '&')
        .replace(/</g, '<')
        .replace(/>/g, '>')
        .replace(/"/g, '"')
        .replace(/'/g, '');
}

async function loadOrders() {
    const startDate = document.getElementById("start-date").value;
    const endDate = document.getElementById("end-date").value;
    const requester = document.getElementById("filter-requester").value;
    const supplier = document.getElementById("filter-supplier").value;
    const status = document.getElementById("filter-status").value;

    const params = new URLSearchParams();
    if (startDate) params.append("start_date", startDate);
    if (endDate) params.append("end_date", endDate);
    if (requester && requester !== "All") params.append("requester", requester);
    if (supplier && supplier !== "All") params.append("supplier", supplier);
    if (status && status !== "All") params.append("status", status);

    try {
        console.log("Fetching orders with params:", params.toString());
        const res = await fetch(`/orders/api/pending_orders?${params.toString()}`);
        if (!res.ok) {
            const errorText = await res.text();
            throw new Error(`HTTP error! Status: ${res.status}, Message: ${errorText}`);
        }
        const data = await res.json();

        console.log("Pending Orders API Response:", JSON.stringify(data, null, 2));

        const tbody = document.getElementById("pending-body");
        tbody.innerHTML = "";

        if (data.orders && Array.isArray(data.orders) && data.orders.length > 0) {
            data.orders.forEach((order, index) => {
                const row = document.createElement("tr");
                const sanitizedOrderNote = escapeHTML(order.order_note || "");
                const sanitizedSupplierNote = escapeHTML(order.note_to_supplier || "");
                const sanitizedOrderNumber = escapeHTML(order.order_number || "");
                const sanitizedSupplier = escapeHTML(order.supplier || "N/A");
                const sanitizedRequester = escapeHTML(order.requester || "N/A");
                const sanitizedDate = escapeHTML(order.created_date || "");
                const sanitizedTotal = order.total != null ? `R${parseFloat(order.total).toFixed(2)}` : "R0.00";
                const rawStatus = (order.status || "").trim();
                const sanitizedStatus = escapeHTML(rawStatus);

                const receiveIconHTML = (["Pending", "Authorised", "Partially Received"].includes(rawStatus))
                    ? `<span class="receive-icon" style="color: green; cursor: pointer;" title="Mark as Received" data-order-id="${order.id || ''}" data-order-number="${sanitizedOrderNumber}">✅</span>`
                    : (rawStatus === "Awaiting Authorisation"
                          ? `<span class="receive-icon disabled" style="color: grey; cursor: not-allowed;" title="Cannot receive until authorised">✅</span>`
                        : "");

                row.innerHTML = `
                    <td>${sanitizedDate}</td>
                    <td>${sanitizedOrderNumber}</td>
                    <td>${sanitizedRequester}</td>
                    <td>${sanitizedSupplier}</td>
                    <td>${sanitizedTotal}</td>
                    <td><span class="status">${sanitizedStatus}</span></td>
                    <td>
                        <span class="expand-icon" data-order-id="${order.id || ''}">⬇️</span>
                        <span class="clip-icon" title="View/Upload Attachments" data-order-id="${order.id || ''}" data-order-number="${sanitizedOrderNumber}">📎</span>
                        <span class="note-icon" title="Edit Order Note" data-order-id="${order.id || ''}" data-order-note="${sanitizedOrderNote}" id="order-note-${index}">📝</span>
                        <span class="supplier-note-icon" title="View Note to Supplier" data-supplier-note="${sanitizedSupplierNote}" data-order-number="${sanitizedOrderNumber}" id="supplier-note-${index}">📦</span>
                        ${receiveIconHTML}
                        <span class="pdf-icon" title="View Purchase Order PDF" data-order-id="${order.id || ''}" data-order-number="${sanitizedOrderNumber}">📄</span>
                    </td>
                `;
                tbody.appendChild(row);

                row.querySelector(`#supplier-note-${index}`).addEventListener("click", () => {
                    try {
                        window.showSupplierNoteModal(sanitizedSupplierNote);
                    } catch (e) {
                        console.error(`Failed to show supplier note for order ${sanitizedOrderNumber}:`, e);
                        alert(`Error displaying supplier note: ${e.message}`);
                    }
                });
                const noteIcon = row.querySelector(`#order-note-${index}`);
                noteIcon.addEventListener("click", (e) => {
                    const orderId = noteIcon.getAttribute("data-order-id");
                    const note = noteIcon.getAttribute("data-order-note");
                    window.showOrderNoteModal(note, orderId, (newNote) => {
                        noteIcon.setAttribute("data-order-note", escapeHTML(newNote));
                        noteIcon.title = "Edit Order Note\n" + newNote;

                    });
                });
                row.querySelector(".expand-icon").addEventListener("click", (e) => {
                    if (!order.id) {
                        console.error("No order ID provided for expanding line items");
                        alert("Cannot expand line items: No order ID available");
                        return;
                    }
                    window.expandLineItems(order.id, e.target);
                });
                row.querySelector(".clip-icon").addEventListener("click", (e) => {
                    const target = e.target;
                    window.checkAttachments(order.id || '').then(has => {
                        if (has) {
                            window.showViewAttachmentsModal(order.id || '', sanitizedOrderNumber);
                        } else {
                            window.showUploadAttachmentsModal(order.id || '', sanitizedOrderNumber, () => {
                                window.checkAttachments(order.id || '').then(has => target.classList.toggle('eye-icon', has));
                            });
                        }
                    });
                });
                if (["Pending", "Authorised", "Partially Received"].includes(rawStatus)) {
                    row.querySelector(".receive-icon").addEventListener("click", () => window.showReceiveModal(order.id || '', sanitizedOrderNumber));
                }
                row.querySelector(".pdf-icon").addEventListener("click", async () => {
                    try {
                        const response = await fetch(`/orders/api/generate_pdf_for_order/${order.id}`);
                        if (!response.ok) throw new Error(`PDF generation failed with status ${response.status}`);

                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/pdf')) {
                            const blob = await response.blob();
                            if (blob.size === 0) {
                                throw new Error('Received empty PDF file');
                            }
                            showPDFModal(blob);
                        } else {
                            const data = await response.json();
                            throw new Error(`Unexpected response: ${JSON.stringify(data)}`);
                        }
                    } catch (err) {
                        alert("❌ Could not generate PDF");
                        console.error(err);
                    }
                });
            });
        } else {
            tbody.innerHTML = '<tr><td colspan="7">No pending orders found.</td></tr>';
        }
    } catch (error) {
        console.error("Error loading orders:", error);
        document.getElementById("pending-body").innerHTML = '<tr><td colspan="7">Error loading orders: ' + escapeHTML(error.message) + '</td></tr>';
    }
}

function clearFilters() {
    document.getElementById("start-date").value = "";
    document.getElementById("end-date").value = "";
    document.getElementById("filter-requester").value = "All";
    document.getElementById("filter-supplier").value = "All";
    document.getElementById("filter-status").value = "All";
    loadOrders();
}

document.getElementById("run-btn").addEventListener("click", loadOrders);
document.getElementById("clear-btn").addEventListener("click", clearFilters);
document.addEventListener("DOMContentLoaded", loadFiltersAndOrders);

window.expandLineItems = expandLineItems;
window.showUploadAttachmentsModal = showUploadAttachmentsModal;
window.checkAttachments = checkAttachments;
window.showViewAttachmentsModal = showViewAttachmentsModal;
window.showOrderNoteModal = showOrderNoteModal;
window.showSupplierNoteModal = showSupplierNoteModal;
window.showReceiveModal = showReceiveModal;

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/pending_orders.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/send_email.js
/**
 * Sends an email containing a purchase order PDF generated from raw HTML.
 *
 * @param {string} html - The full HTML string to convert into a PDF.
 * @param {string} orderNumber - The order number (e.g. "URC1024").
 * @param {string} recipientEmail - The supplier’s email address.
 */
export async function emailPurchaseOrder(html, orderNumber, recipientEmail) {
    try {
      const response = await fetch("/orders/email_purchase_order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          html: html,
          order_number: orderNumber,
          recipient_email: recipientEmail
        })
      });
  
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.detail || "Email sending failed");
      }
  
      const result = await response.json();
      alert(result.message || `✅ Purchase Order ${orderNumber} emailed successfully`);
    } catch (error) {
      console.error(`❌ Failed to email PO ${orderNumber}:`, error);
      alert(`❌ Error emailing PO ${orderNumber}: ${error.message}`);
    }
  }
  
END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/send_email.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/new_requisitions_pdf_generator.py
from pathlib import Path
import sqlite3
from datetime import datetime
from weasyprint import HTML

DB_PATH = Path("data/orders.db")
OUTPUT_DIR = Path("generated_pdfs")
OUTPUT_DIR.mkdir(exist_ok=True)

def generate_requisition_pdf(requisition_id: int) -> Path:
    # --- Step 1: Get data from DB ---
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    cursor.execute("""
        SELECT r.requisition_number, r.requisition_note, r.requisition_date, rq.name AS requisitioner
        FROM requisitions r
        LEFT JOIN requisitioners rq ON r.requisitioner_id = rq.id
        WHERE r.id = ?
    """, (requisition_id,))
    header = cursor.fetchone()

    if not header:
        raise ValueError("Requisition not found")

    cursor.execute("""
        SELECT description, project, quantity
        FROM requisition_items
        WHERE requisition_id = ?
    """, (requisition_id,))
    items = cursor.fetchall()
    conn.close()

    # --- Step 2: Build HTML ---
    html = f"""
    <html>
    <head>
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 2rem;
            }}
            h2 {{
                color: #2a2a2a;
            }}
            table {{
                width: 100%;
                border-collapse: collapse;
                margin-top: 1rem;
            }}
            th, td {{
                border: 1px solid #ccc;
                padding: 8px;
                text-align: left;
            }}
            th {{
                background-color: #f2f2f2;
            }}
        </style>
    </head>
    <body>
        <h2>📦 Requisition PDF</h2>
        <p><strong>Requisition Number:</strong> {header['requisition_number']}</p>
        <p><strong>Requisitioner:</strong> {header['requisitioner']}</p>
        <p><strong>Date:</strong> {datetime.fromisoformat(header['requisition_date']).strftime("%d %b %Y")}</p>
        <p><strong>Note:</strong> {header['requisition_note'] or "—"}</p>

        <table>
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Project</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody>
    """

    for item in items:
        html += f"""
        <tr>
            <td>{item['description']}</td>
            <td>{item['project']}</td>
            <td>{item['quantity']}</td>
        </tr>
        """

    html += """
            </tbody>
        </table>
        <p style="margin-top: 2rem; font-size: 0.9rem;">Generated by Universal Recycling system</p>
    </body>
    </html>
    """

    # --- Step 3: Generate PDF ---
    pdf_path = OUTPUT_DIR / f"requisition_{requisition_id}.pdf"
    HTML(string=html).write_pdf(str(pdf_path))

    return pdf_path

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/new_requisitions_pdf_generator.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/login.js
document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("login-form");
  const usernameInput = document.getElementById("username");
  const passwordInput = document.getElementById("password");
  const errorBox = document.getElementById("login-error");

  if (!form || !usernameInput || !passwordInput || !errorBox) {
    console.error("Login form elements not found in the DOM");
    return;
  }

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const username = usernameInput.value.trim().toLowerCase();
    const password = passwordInput.value;

    if (!username || !password) {
      errorBox.textContent = "Please enter both username and password";
      return;
    }

    try {
      const response = await fetch("/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      });

      if (response.ok) {
        window.location.href = "/orders/pending_orders";
      } else {
        let errorMessage = "Invalid credentials. Please try again.";
        try {
          const errorData = await response.json();
          errorMessage = errorData?.error || errorData?.detail || errorMessage;
        } catch (parseErr) {
          console.warn("Non-JSON error response:", parseErr);
        }
        errorBox.textContent = errorMessage;
      }
    } catch (err) {
      console.error("Login request failed:", err);
      errorBox.textContent = "Unexpected error occurred. Please try again later.";
    }
  });
});

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/login.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/new_order_main.js
// frontend/static/js/new_order_main.js

import { previewOrder } from "./new_order_screen/pdf_utils.js";
import { submitOrder } from "./new_order_screen/submit_utils.js";
import { logToServer } from "./components/utils.js";
import { enableFuzzySearch } from "./components/utils.js";

let itemsList = [];
let projectsList = [];
let rowCount = 0;
let currentOrderNumber = "URC1000";
let authThreshold = 0; // Added for authorization threshold
let currentOrderId = null; // Added to store order ID after submission

// Debounce function
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
      const later = () => {
          clearTimeout(timeout);
          func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
  };
}

// Load dropdowns
async function loadDropdowns() {
  try {
      const requestersData = await fetchData("/lookups/requesters");
      populateDropdown("requester_id", requestersData?.requesters, "name");
      const suppliersData = await fetchData("/lookups/suppliers");
      populateDropdown("supplier_id", suppliersData?.suppliers, "name");
      enableFuzzySearch("supplier_id");
      const itemsData = await fetchData("/lookups/items");
      itemsList = itemsData?.items || [];
      enableFuzzySearch("item_code_1");
      const projectsData = await fetchData("/lookups/projects");
      projectsList = projectsData?.projects || [];
      enableFuzzySearch("project_1");
  } catch (error) {
      console.error("Error loading dropdowns:", error);
      throw error;
  }
}

// Load order number and authorization threshold
async function loadOrderNumber() {
  try {
      const settingsData = await fetchData("/lookups/settings");
      currentOrderNumber = settingsData.order_number_start || "URC1000";
      authThreshold = [
        parseFloat(settingsData.auth_threshold_1 || 0),
        parseFloat(settingsData.auth_threshold_2 || 0),
        parseFloat(settingsData.auth_threshold_3 || 0),
        parseFloat(settingsData.auth_threshold_4 || 0)
      ];
      
      document.getElementById("order-number").textContent = currentOrderNumber;
  } catch (error) {
      console.error("Error loading order number:", error);
      document.getElementById("order-number").textContent = "URC1000"; // Fallback
  }
}

// Added: Function to increment and update order number
async function incrementOrderNumber(currentOrderNumber) {
  const current = currentOrderNumber.match(/\d+$/);
  const prefix = currentOrderNumber.replace(/\d+$/, "");
  const nextNum = current ? String(parseInt(current[0]) + 1).padStart(4, "0") : "1001";
  const newOrderNumber = `${prefix}${nextNum}`;

  try {
      const res = await fetch('/lookups/order_number', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ order_number_start: newOrderNumber })
      });

      if (!res.ok) {
          const errorText = await res.text();
          console.error("Failed to update order number:", errorText);
      }

      return newOrderNumber;
  } catch (err) {
      console.error("Exception during order number update:", err.message);
      return currentOrderNumber;  // fallback
  }
}

// Add a row to the table
function addRow() {
  // Check if itemsList and projectsList are populated
  if (itemsList.length === 0 || projectsList.length === 0) {
      alert('Cannot add items: Failed to load items or projects. Please refresh the page.');
      return;
  }

  const tbody = document.getElementById("items-body");
  const row = document.createElement("tr");
  row.id = `row_${rowCount++}`;

  // Item Code dropdown (show code + description)
  const itemCell = document.createElement("td");
  const itemSelect = document.createElement("select");
  itemSelect.className = "item-code";
  itemSelect.id = `item_code_${rowCount}`;
  itemSelect.innerHTML = '<option value="">Select Item</option>';
  itemsList.forEach(item => {
      const option = document.createElement("option");
      option.value = item.item_code;
      option.textContent = `${item.item_code} - ${item.item_description}`;
      option.dataset.description = item.item_description?.toLowerCase() || "";
      itemSelect.appendChild(option);
  });
  itemCell.appendChild(itemSelect);
  row.appendChild(itemCell);

  // Project dropdown (show code + name)
  const projectCell = document.createElement("td");
  const projectSelect = document.createElement("select");
  projectSelect.className = "project";
  projectSelect.id = `project_${rowCount}`;
  projectSelect.innerHTML = '<option value="">Select Project</option>';
  projectsList.forEach(project => {
      const option = document.createElement("option");
      option.value = project.project_code;
      option.textContent = `${project.project_code} - ${project.project_name}`;
      option.dataset.description = project.project_name?.toLowerCase() || "";
      projectSelect.appendChild(option);
  });
  projectCell.appendChild(projectSelect);
  row.appendChild(projectCell);

// Quantity input
  const qtyCell = document.createElement("td");
  const qtyInput = document.createElement("input");
  qtyInput.type = "number";
  qtyInput.className = "qty-ordered";
  qtyInput.id = `qty_${rowCount}`;
  qtyInput.value = "1";
  qtyInput.min = "1";
  qtyCell.appendChild(qtyInput);
  row.appendChild(qtyCell);

// Price input
  const priceCell = document.createElement("td");
  const priceInput = document.createElement("input");
  priceInput.type = "number";
  priceInput.className = "price";
  priceInput.id = `price_${rowCount}`;
  priceInput.value = "0.00";
  priceInput.step = "0.01";
  priceCell.appendChild(priceInput);
  row.appendChild(priceCell);

// Total
  const totalCell = document.createElement("td");
  const totalInput = document.createElement("input");
  totalInput.type = "text";
  totalInput.className = "total";
  totalInput.id = `total_${rowCount}`;
  totalInput.value = "0.00";
  totalInput.readOnly = true;
  totalCell.appendChild(totalInput);
  row.appendChild(totalCell);

// Actions
  const actionsCell = document.createElement("td");
  const deleteBtn = document.createElement("button");
  deleteBtn.textContent = "Delete";
  deleteBtn.onclick = () => deleteRow(row.id);
  actionsCell.appendChild(deleteBtn);
  row.appendChild(actionsCell);

  tbody.appendChild(row);
  enableFuzzySearch(itemSelect.id);
  enableFuzzySearch(projectSelect.id);
  updateTotal(itemSelect);
}

// Update row total
function updateTotal(itemSelect) {
    const row = itemSelect.closest("tr");
    const qty = parseFloat(row.querySelector(".qty-ordered").value) || 0;
    const price = parseFloat(row.querySelector(".price").value) || 0;
    const total = qty * price;
    row.querySelector(".total").value = total.toFixed(2);
    updateGrandTotal();
  }
  
  // Update grand total
  function updateGrandTotal() {
    const totals = Array.from(document.querySelectorAll(".total")).map(input => parseFloat(input.value) || 0);
    const grandTotal = totals.reduce((sum, val) => sum + val, 0);
    document.getElementById("grand-total").textContent = grandTotal.toFixed(2);
    return grandTotal; // Added return for use in submitOrder
  }
  
  // Delete a row
  function deleteRow(rowId) {
    const row = document.getElementById(rowId);
    if (row) {
        row.remove();
        updateGrandTotal();
    }
  }
  
  // Modal functions (inlined since new_order_modals.js is not provided)
  function showOrderNoteModal(note, callback) {
    const modal = createBaseModal();
    const title = document.createElement("h3");
    title.textContent = "Order Note";
    modal.inner.appendChild(title);
  
    const textarea = document.createElement("textarea");
    textarea.value = note || "";
    textarea.style.width = "100%";
    textarea.style.height = "150px";
    modal.inner.appendChild(textarea);
  
    const saveBtn = document.createElement("button");
    saveBtn.textContent = "Save";
    saveBtn.style.marginTop = "1rem";
    saveBtn.onclick = () => {
        callback(textarea.value);
        document.body.removeChild(modal.container);
    };
    modal.inner.appendChild(saveBtn);
  
    const closeBtn = document.createElement("button");
    closeBtn.textContent = "Close";
    closeBtn.style.marginTop = "1rem";
    closeBtn.style.marginLeft = "1rem";
    closeBtn.onclick = () => document.body.removeChild(modal.container);
    modal.inner.appendChild(closeBtn);
  
    document.body.appendChild(modal.container);
  }
  
  function showSupplierNoteModal(note) {
    const modal = createBaseModal();
    const title = document.createElement("h3");
    title.textContent = "Note to Supplier";
    modal.inner.appendChild(title);
  
    const p = document.createElement("p");
    p.textContent = note || "No note provided";
    modal.inner.appendChild(p);
  
    const closeBtn = document.createElement("button");
    closeBtn.textContent = "Close";
    closeBtn.style.marginTop = "1rem";
    closeBtn.onclick = () => document.body.removeChild(modal.container);
    modal.inner.appendChild(closeBtn);
  
    document.body.appendChild(modal.container);
  }
  
  function createBaseModal() {
    const container = document.createElement("div");
    container.style.position = "fixed";
    container.style.top = "0";
    container.style.left = "0";
    container.style.width = "100vw";
    container.style.height = "100vh";
    container.style.backgroundColor = "rgba(0,0,0,0.5)";
    container.style.display = "flex";
    container.style.alignItems = "center";
    container.style.justifyContent = "center";
    container.style.zIndex = "9999";
  
    const inner = document.createElement("div");
    inner.style.backgroundColor = "white";
    inner.style.padding = "1.5rem";
    inner.style.borderRadius = "8px";
    inner.style.width = "90%";
    inner.style.maxWidth = "500px";
    inner.style.maxHeight = "80vh";
    inner.style.overflowY = "auto";
    container.appendChild(inner);
  
    return { container, inner };
  }
  
  // Core functionality
  let businessDetails = null;
  
  async function fetchData(endpoint) {
    try {
        const response = await fetch(endpoint, {
            method: 'GET',
            credentials: 'include'
        });
        if (!response.ok) {
            throw new Error(`Failed to fetch ${endpoint}: ${response.status}`);
        }
        return await response.json();
    } catch (error) {
        console.error(`Error fetching ${endpoint}:`, error);
        throw error;
    }
  }
  
  function populateDropdown(dropdownId, items, key, idKey = "id") {
    const dropdown = document.getElementById(dropdownId);
    dropdown.innerHTML = '<option value="">Select ' + dropdownId.replace('_id', '') + '</option>';

    if (items && Array.isArray(items)) {
      items.forEach(item => {
        const option = document.createElement("option");
        option.value = item[idKey];
        option.textContent = item[key];

        // ✨ Description used for fuzzy filtering
        option.dataset.description = item[key]?.toLowerCase() || "";

        dropdown.appendChild(option);
      });
    }
}
  
  // Added: Function to send email
  async function sendEmail(orderId) {
      try {
          const response = await fetch(`/orders/email_purchase_order/${orderId}`, {
              method: 'POST',
              credentials: 'include'
          });
          if (!response.ok) throw new Error('Failed to send email');
          await logToServer('INFO', 'Email sent successfully', { orderId });
          alert('Email sent successfully');
      } catch (error) {
          await logToServer('ERROR', 'Failed to send email', { orderId, error: error.message });
          alert('Failed to send email: ' + error.message);
      }
  }

function setupEventListeners() {
    const submitBtn = document.getElementById('submit-order');
    if (submitBtn) {
      console.log('Submit button exists:', !!submitBtn);
      submitBtn.addEventListener('click', () => {
  console.log('Submit button clicked');
  const paymentTerms = document.getElementById("payment_terms")?.value || "On account";

  debounce(() => submitOrder({
    currentOrderNumber,
    authThresholds: authThreshold,
    itemsList,
    updateGrandTotal,
    incrementOrderNumber,
    logToServer,
    setCurrentOrderId: (id) => currentOrderId = id,
    setCurrentOrderNumber: (newNum) => currentOrderNumber = newNum,
    paymentTerms
  }), 500)();
});

    } else {
      console.error('Submit button not found');
    }
  
    const previewBtn = document.getElementById('preview-order');
    if (previewBtn) {
      previewBtn.addEventListener('click', () => {
        previewOrder({
          itemsList, 
          updateGrandTotal, 
          logToServer });
      });
    } else {
      console.error('Preview button not found');
    }

    document.getElementById('add-line').addEventListener('click', () => {
      addRow();
    });
  
    document.getElementById('items-body').addEventListener('change', (e) => {
      if (e.target.classList.contains('item-code')) {
        updateTotal(e.target);
      }
      if (e.target.classList.contains('qty-ordered') || e.target.classList.contains('price')) {
        const itemSelect = e.target.closest('tr').querySelector('.item-code');
        updateTotal(itemSelect);
      }
    });
  }
  
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('Page loaded');
    setupEventListeners();
    try {
      businessDetails = window.businessDetails;
      if (!businessDetails || !businessDetails.company_name) {
        throw new Error('No business details found');
      }
      console.log('Business details loaded:', businessDetails);
      await loadDropdowns();
      console.log('Requester dropdown options:', document.getElementById('requester_id').options.length);
      console.log('Supplier dropdown options:', document.getElementById('supplier_id').options.length);
      await loadOrderNumber();
      const dateField = document.getElementById("request_date");
      if (dateField) {
        const today = new Date().toISOString().split('T')[0];
        dateField.value = today;
      }
    } catch (err) {
      console.error('Initialization failed:', err.message);
      alert(`Error: ${err.message}`);
    }
  });
END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/new_order_main.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/cod_orders.js
// /frontend/static/js/cod_orders.js

import { loadRequesters, loadSuppliers } from "./components/shared_filters.js";
import { expandLineItems } from "./components/expand_line_items.js";
import { showUploadAttachmentsModal, checkAttachments, showViewAttachmentsModal } from "./components/attachment_modal.js";
import { showOrderNoteModal, showSupplierNoteModal } from "./components/order_note_modal.js";
import { showPDFModal } from "./components/pdf_modal.js";
import { showCodPaymentModal } from "./components/payments_modal.js"; // ✅ REQUIRED

console.log("✅ cod_orders.js loaded");

async function loadFiltersAndOrders() {
  try {
    await Promise.all([
      loadRequesters("filter-requester"),
      loadSuppliers("filter-supplier")
    ]);
    await loadOrders();
  } catch (err) {
    console.error("❌ Error loading filters:", err);
    document.getElementById("cod-body").innerHTML = `<tr><td colspan="7">Error loading filters: ${err.message}</td></tr>`;
  }
}

async function loadOrders() {
  const startDate = document.getElementById("start-date").value;
  const endDate = document.getElementById("end-date").value;
  const requester = document.getElementById("filter-requester").value;
  const supplier = document.getElementById("filter-supplier").value;
  const status = document.getElementById("filter-status").value;

  const params = new URLSearchParams();
  if (startDate) params.append("start_date", startDate);
  if (endDate) params.append("end_date", endDate);
  if (requester && requester !== "All") params.append("requester", requester);
  if (supplier && supplier !== "All") params.append("supplier", supplier);
  if (status && status !== "All") params.append("status", status);

  try {
    const res = await fetch(`/orders/api/cod_orders?${params.toString()}`);
    if (!res.ok) throw new Error(await res.text());
    const data = await res.json();

    const tbody = document.getElementById("cod-body");
    tbody.innerHTML = "";

    if (Array.isArray(data.orders) && data.orders.length > 0) {
      data.orders.forEach((order, index) => {
        const row = document.createElement("tr");

        row.innerHTML = `
          <td>${escapeHTML(order.created_date || "")}</td>
          <td>${escapeHTML(order.order_number || "")}</td>
          <td>${escapeHTML(order.requester || "")}</td>
          <td>${escapeHTML(order.supplier || "")}</td>
          <td>R${parseFloat(order.total || 0).toFixed(2)}</td>
          <td>${escapeHTML(order.status || "")}</td>
          <td>
            <span class="expand-icon" data-order-id="${order.id}">⬇️</span>
            <span class="clip-icon" data-order-id="${order.id}" data-order-number="${order.order_number}">📎</span>
            <span class="note-icon" data-order-id="${order.id}" data-order-note="${escapeHTML(order.order_note || "")}">📝</span>
            <span class="supplier-note-icon" data-note="${escapeHTML(order.note_to_supplier || "")}">📦</span>
            <span 
              class="receive-icon" 
              style="color: green; cursor: pointer;" 
              title="Mark COD as Paid" 
              data-order-id="${order.id}" 
              data-order-number="${escapeHTML(order.order_number || "")}"
            >✅</span>
            <span class="pdf-icon" data-order-id="${order.id}">📄</span>

          </td>
        `;

        tbody.appendChild(row);

        row.querySelector(".expand-icon").addEventListener("click", (e) =>
          expandLineItems(order.id, e.target)
        );

        row.querySelector(".clip-icon").addEventListener("click", async (e) => {
          const has = await checkAttachments(order.id);
          if (has) {
            showViewAttachmentsModal(order.id, order.order_number);
          } else {
            showUploadAttachmentsModal(order.id, order.order_number);
          }
        });

        row.querySelector(".note-icon").addEventListener("click", (e) => {
          const el = e.target;
          showOrderNoteModal(el.getAttribute("data-order-note"), order.id, (newNote) => {
            el.setAttribute("data-order-note", escapeHTML(newNote));
          });
        });

        row.querySelector(".supplier-note-icon").addEventListener("click", (e) => {
          const note = e.target.getAttribute("data-note");
          showSupplierNoteModal(note);
        });

        row.querySelector(".receive-icon").addEventListener("click", () => {
          showCodPaymentModal(order.id, parseFloat(order.total || 0), new Date().toISOString().split("T")[0]);
        });

        row.querySelector(".pdf-icon").addEventListener("click", async () => {
          try {
            const res = await fetch(`/orders/api/generate_pdf_for_order/${order.id}`);
            if (!res.ok) throw new Error(`PDF failed (${res.status})`);
            const blob = await res.blob();
            if (!blob.size) throw new Error("Empty PDF");
            showPDFModal(blob);
          } catch (err) {
            alert("❌ Could not generate PDF");
            console.error(err);
          }
        });
      });
    } else {
      tbody.innerHTML = "<tr><td colspan='7'>No COD orders found.</td></tr>";
    }
  } catch (err) {
    console.error("❌ Error loading orders:", err);
    document.getElementById("cod-body").innerHTML = `<tr><td colspan="7">Error loading orders: ${err.message}</td></tr>`;
  }
}

function clearFilters() {
  document.getElementById("start-date").value = "";
  document.getElementById("end-date").value = "";
  document.getElementById("filter-requester").value = "All";
  document.getElementById("filter-supplier").value = "All";
  document.getElementById("filter-status").value = "All";
  loadOrders();
}

function escapeHTML(str) {
  return (str || "").replace(/&/g, "&amp;")
                   .replace(/</g, "&lt;")
                   .replace(/>/g, "&gt;")
                   .replace(/"/g, "&quot;")
                   .replace(/'/g, "&#39;");
}

document.getElementById("run-btn").addEventListener("click", loadOrders);
document.getElementById("clear-btn").addEventListener("click", clearFilters);
document.addEventListener("DOMContentLoaded", loadFiltersAndOrders);

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/cod_orders.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/audit_trail.js
import { expandLineItemsWithReceipts } from "/static/js/components/expand_line_items.js";
import { showUploadAttachmentsModal, checkAttachments, showViewAttachmentsModal } from "/static/js/components/attachment_modal.js";
import { showOrderNoteModal, showSupplierNoteModal } from "/static/js/components/order_note_modal.js";
import { loadRequesters, loadSuppliers } from "/static/js/components/shared_filters.js";
import { showPDFModal } from "/static/js/components/pdf_modal.js";

function escapeHTML(str) {
  if (!str) return "";
  return str
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#39;");
}

async function loadFiltersAndOrders() {
  try {
    await loadRequesters("filter-requester");
    await loadSuppliers("filter-supplier");
    await loadOrders();
  } catch (err) {
    console.error("❌ Failed to load filters or orders:", err);
    document.getElementById("audit-body").innerHTML = `<tr><td colspan="8">Error loading filters: ${escapeHTML(err.message)}</td></tr>`;
  }
}

async function loadOrders() {
  const startDate = document.getElementById("start-date").value;
  const endDate = document.getElementById("end-date").value;
  const requester = document.getElementById("filter-requester").value;
  const supplier = document.getElementById("filter-supplier").value;
  const status = document.getElementById("filter-status").value;

  const params = new URLSearchParams();
  if (startDate) params.append("start_date", startDate);
  if (endDate) params.append("end_date", endDate);
  if (requester && requester !== "All") params.append("requester", requester);
  if (supplier && supplier !== "All") params.append("supplier", supplier);
  if (status && status !== "All") params.append("status", status);

  try {
    const res = await fetch(`/orders/api/audit_trail_orders?${params.toString()}`);
    if (!res.ok) throw new Error(`HTTP ${res.status}: ${await res.text()}`);
    const data = await res.json();

    const tbody = document.getElementById("audit-body");
    tbody.innerHTML = "";

    if (data.orders && Array.isArray(data.orders) && data.orders.length > 0) {
      for (const order of data.orders) {
        const row = document.createElement("tr");
        const sanitizedOrderNote = escapeHTML(order.order_note || "");
        const sanitizedSupplierNote = escapeHTML(order.note_to_supplier || "");
        const sanitizedOrderNumber = escapeHTML(order.order_number);
        const sanitizedSupplier = escapeHTML(order.supplier || "N/A");
        const sanitizedRequester = escapeHTML(order.requester);
        const sanitizedDate = escapeHTML(order.created_date || "");
        const sanitizedTotal = order.total != null ? `R${parseFloat(order.total).toFixed(2)}` : "R0.00";
        const sanitizedStatus = escapeHTML(order.status || "");

        row.innerHTML = `
          <td>${sanitizedDate}</td>
          <td>${sanitizedOrderNumber}</td>
          <td>${sanitizedRequester}</td>
          <td>${sanitizedSupplier}</td>
          <td>${sanitizedTotal}</td>
          <td><span class="status">${sanitizedStatus}</span></td>
          <td class="last-action-cell">Loading...</td>
          <td>
            <span class="expand-icon" style="cursor:pointer" title="View Line Items">⬇️</span>
            <span class="clip-icon" style="cursor:pointer" title="View/Upload Attachments">📎</span>
            <span class="note-icon" style="cursor:pointer" title="Edit Order Note">📝</span>
            <span class="supplier-note-icon" style="cursor:pointer" title="View Note to Supplier">📦</span>
            <span class="pdf-icon" style="cursor:pointer" title="View Purchase Order PDF">📄</span>
          </td>`;

        tbody.appendChild(row);

        // Fetch and inject latest audit action
        try {
          const actionRes = await fetch(`/orders/api/last_audit_action/${order.id}`);
          const actionData = await actionRes.json();
          const lastActionCell = row.querySelector(".last-action-cell");
          lastActionCell.textContent = actionData.details || "No actions yet";
        } catch (err) {
          console.error(`❌ Error fetching last action for order ${order.order_number}:`, err);
        }

        row.querySelector(".expand-icon").addEventListener("click", (e) => {
          expandLineItemsWithReceipts(order.id, e.target);
        });

        row.querySelector(".clip-icon").addEventListener("click", async (e) => {
          const target = e.target;
          const has = await checkAttachments(order.id);
          if (has) {
            showViewAttachmentsModal(order.id, sanitizedOrderNumber);
          } else {
            showUploadAttachmentsModal(order.id, sanitizedOrderNumber, async () => {
              const newHas = await checkAttachments(order.id);
              target.classList.toggle("eye-icon", newHas);
            });
          }
        });

        row.querySelector(".pdf-icon").addEventListener("click", async () => {
          try {
            const response = await fetch(`/orders/api/generate_pdf_for_order/${order.id}`);
            if (!response.ok) throw new Error(`PDF generation failed with status ${response.status}`);

            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/pdf')) {
              const blob = await response.blob();
              if (blob.size === 0) throw new Error('Received empty PDF file');
              showPDFModal(blob);
            } else {
              const data = await response.json();
              throw new Error(`Unexpected response: ${JSON.stringify(data)}`);
            }
          } catch (err) {
            console.error(`❌ Failed to show PDF for order ${sanitizedOrderNumber}:`, err);
            alert("❌ Could not load purchase order PDF.");
          }
        });

        row.querySelector(".note-icon").addEventListener("click", (e) => {
          const target = e.target;
          showOrderNoteModal(sanitizedOrderNote, order.id, (newNote) => {
            target.setAttribute("data-order-note", escapeHTML(newNote));
          });
        });

        row.querySelector(".supplier-note-icon").addEventListener("click", () => {
          try {
            showSupplierNoteModal(sanitizedSupplierNote);
          } catch (e) {
            console.error(`Failed to show supplier note for order ${sanitizedOrderNumber}:`, e);
            alert(`Error displaying supplier note: ${e.message}`);
          }
        });
      }
    } else {
      tbody.innerHTML = '<tr><td colspan="8">No audit trail orders found.</td></tr>';
    }
  } catch (err) {
    console.error("❌ Error loading audit trail orders:", err);
    document.getElementById("audit-body").innerHTML = `<tr><td colspan="8">Error loading orders: ${escapeHTML(err.message)}</td></tr>`;
  }
}

function clearFilters() {
  document.getElementById("start-date").value = "";
  document.getElementById("end-date").value = "";
  document.getElementById("filter-requester").value = "All";
  document.getElementById("filter-supplier").value = "All";
  document.getElementById("filter-status").value = "All";
  loadOrders();
}

document.getElementById("run-btn").addEventListener("click", loadOrders);
document.getElementById("clear-btn").addEventListener("click", clearFilters);
document.addEventListener("DOMContentLoaded", loadFiltersAndOrders);

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/audit_trail.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/pending_requisitions.js
import { loadRequisitioners } from "./components/shared_filters.js";
import { showUploadAttachmentsModal, showViewAttachmentsModal, checkAttachments } from "./components/requisitions_attachment_modal.js";
import { showOrderNoteModal } from "./components/order_note_modal.js";
import { showPDFModal } from "./components/pdf_modal.js";

console.log("📦 pending_requisitions.js loaded");

async function loadFiltersAndRequisitions() {
  try {
    await loadRequisitioners("filter-requisitioner");
    await loadRequisitions();
  } catch (err) {
    console.error("❌ Error loading filters:", err);
    document.getElementById("pending-requisition-body").innerHTML = `<tr><td colspan="7">Error loading filters: ${err.message}</td></tr>`;
  }
}

async function loadRequisitions() {
  const startDate = document.getElementById("start-date").value;
  const endDate = document.getElementById("end-date").value;
  const requisitioner = document.getElementById("filter-requisitioner").value;
  const status = document.getElementById("filter-status").value;

  const params = new URLSearchParams();
  if (startDate) params.append("start_date", startDate);
  if (endDate) params.append("end_date", endDate);
  if (requisitioner && requisitioner !== "All") params.append("requisitioner", requisitioner);
  if (status && status !== "All") params.append("status", status);

  try {
    const res = await fetch(`/api/pending_requisitions?${params.toString()}`);
    if (!res.ok) throw new Error(`HTTP ${res.status}: ${await res.text()}`);
    const data = await res.json();

    const tbody = document.getElementById("pending-requisition-body");
    tbody.innerHTML = "";

    if (data.requisitions && Array.isArray(data.requisitions) && data.requisitions.length > 0) {
      data.requisitions.forEach((req, index) => {
        const row = document.createElement("tr");

        const formattedDate = new Date(req.requisition_date).toLocaleDateString("en-ZA");
        const sanitizedNote = escapeHTML(req.requisition_note || "");
        const converted = req.converted_order_id ? "✅" : "";

        row.innerHTML = `
          <td>${formattedDate}</td>
          <td>${escapeHTML(req.requisition_number)}</td>
          <td>${escapeHTML(req.requisitioner)}</td>
          <td>${escapeHTML(req.project || "")}</td>
          <td>${escapeHTML(req.total_quantity || "")}</td>
          <td>${escapeHTML(req.description || "")}</td>
          <td>
            ${converted}
            <span class="pdf-icon" title="View PDF" data-id="${req.id}">📄</span>
            <span class="note-icon" title="Edit Note" data-id="${req.id}" data-note="${sanitizedNote}" id="note-${index}">📝</span>
            <span class="clip-icon" title="View/Upload Attachments" data-id="${req.id}" data-number="${req.requisition_number}">📎</span>
          </td>
        `;

        tbody.appendChild(row);

        row.querySelector(`#note-${index}`).addEventListener("click", (e) => {
          const target = e.target;
          showOrderNoteModal(sanitizedNote, req.id, (newNote) => {
            target.setAttribute("data-note", escapeHTML(newNote));
          });
        });

        row.querySelector(".clip-icon").addEventListener("click", async (e) => {
          const target = e.target;
          const id = parseInt(target.getAttribute("data-id"));
          const number = target.getAttribute("data-number");
          const has = await checkAttachments(number, "requisition");

          if (has) {
            showViewAttachmentsModal(id, number, null, null, "requisition");
          } else {
            showUploadAttachmentsModal(id, number, () => {}, "requisition");
          }
        });

        row.querySelector(".pdf-icon").addEventListener("click", async () => {
          try {
            const response = await fetch(`/requisitions/api/generate_pdf/${req.id}`);
            if (!response.ok) throw new Error(`PDF generation failed with status ${response.status}`);
            const blob = await response.blob();
            showPDFModal(blob);
          } catch (err) {
            alert("❌ Could not generate PDF");
            console.error(err);
          }
        });
      });
    } else {
      tbody.innerHTML = `<tr><td colspan="7">No requisitions found.</td></tr>`;
    }
  } catch (err) {
    console.error("❌ Error loading requisitions:", err);
    document.getElementById("pending-requisition-body").innerHTML = `<tr><td colspan="7">Error loading requisitions: ${err.message}</td></tr>`;
  }
}

function escapeHTML(str) {
  if (typeof str !== "string") return "";
  return str.replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;");
}

function clearFilters() {
  document.getElementById("start-date").value = "";
  document.getElementById("end-date").value = "";
  document.getElementById("filter-requisitioner").value = "All";
  document.getElementById("filter-status").value = "All";
  loadRequisitions();
}

document.getElementById("run-btn").addEventListener("click", loadRequisitions);
document.getElementById("clear-btn").addEventListener("click", clearFilters);
document.addEventListener("DOMContentLoaded", loadFiltersAndRequisitions);

window.showOrderNoteModal = showOrderNoteModal;
window.showUploadAttachmentsModal = showUploadAttachmentsModal;
window.checkAttachments = checkAttachments;
window.showViewAttachmentsModal = showViewAttachmentsModal;
window.showPDFModal = showPDFModal;

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/pending_requisitions.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/new_order_screen/submit_utils.js
export async function submitOrder({
    currentOrderNumber,
    authThresholds, // array: [threshold_1, threshold_2, threshold_3, threshold_4]
    itemsList,
    updateGrandTotal,
    incrementOrderNumber,
    logToServer,
    setCurrentOrderId,
    setCurrentOrderNumber
}) {
    console.log('submitOrder triggered');
    await logToServer('INFO', 'submitOrder started');

    const requesterId = document.getElementById('requester_id').value;
    const supplierId = document.getElementById('supplier_id').value;
    const noteToSupplier = document.getElementById('note_to_supplier').value;
    const paymentTerms = document.getElementById('payment_terms').value;

    if (!requesterId || !supplierId) {
        await logToServer('ERROR', 'Missing required fields', { requesterId, supplierId });
        alert('Please fill in all required fields (Requester, Supplier)');
        return;
    }

    const items = Array.from(document.querySelectorAll('#items-body tr')).map(row => {
        const itemCode = row.querySelector('.item-code')?.value;
        const itemDescription = itemsList.find(i => i.item_code === itemCode)?.item_description || '';
        const project = row.querySelector('.project')?.value;
        const qtyOrdered = parseFloat(row.querySelector('.qty-ordered')?.value) || 0;
        const price = parseFloat(row.querySelector('.price')?.value) || 0;

        if (!itemCode || !project || qtyOrdered <= 0 || price <= 0) {
            throw new Error('All items must have a valid item code, project, quantity, and price');
        }

        return {
            item_code: itemCode,
            item_description: itemDescription,
            project,
            qty_ordered: qtyOrdered,
            price
        };
    });

    const total = updateGrandTotal();

    // --- Determine status and band ---
    let status = "Pending";
    let authBandRequired = null;

    for (let i = 0; i < authThresholds.length; i++) {
        if (total > authThresholds[i]) {
            status = "Awaiting Authorisation";
            authBandRequired = i + 1;
        } else {
            break;
        }
    }

    const orderData = {
        order_number: currentOrderNumber,
        total,
        order_note: document.getElementById("order_note").value,  // ✅ fixed
        note_to_supplier: noteToSupplier,
        payment_terms: paymentTerms,
        requester_id: parseInt(requesterId),
        supplier_id: parseInt(supplierId),
        status,
        ...(authBandRequired ? { auth_band_required: authBandRequired } : {}),
        items
    };

    try {
        const res = await fetch('/orders', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(orderData)
        });

        if (!res.ok) {
            const errorText = await res.text();
            await logToServer('ERROR', 'Failed to submit order', { status: res.status, errorText });
            throw new Error(`Failed to submit order: ${res.status} - ${errorText}`);
        }

        const data = await res.json();
        if (data.message === "Order created successfully") {
            setCurrentOrderId(data.order_id);

            const newOrderNumber = await incrementOrderNumber(currentOrderNumber);
            setCurrentOrderNumber(newOrderNumber);
            document.getElementById("order-number").textContent = newOrderNumber;

            await logToServer('INFO', 'Order submitted and order number incremented', {
                orderNumber: newOrderNumber,
                orderId: data.order_id
            });

            alert('✅ Order submitted successfully!');
            document.getElementById('requester_id').value = '';
            document.getElementById('supplier_id').value = '';
            document.getElementById('note_to_supplier').value = '';
            document.getElementById('items-body').innerHTML = '';
        } else {
            await logToServer('ERROR', 'Unexpected response in submitOrder', { response: data.message });
            throw new Error(`Unexpected response: ${data.message}`);
        }
    } catch (error) {
        console.error('Order submission failed:', error.message);
        await logToServer('ERROR', 'Order submission failed', { error: error.message });
        alert(`❌ Order submission failed: ${error.message}`);
    }
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/new_order_screen/submit_utils.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/new_order_screen/pdf_utils.js
// frontend/static/js/new_order_screen/pdf_utils.js

import { showPDFModal } from "../components/pdf_modal.js";

export async function previewOrder({ itemsList, updateGrandTotal, logToServer }) {
  console.log('previewOrder called');
  await logToServer('INFO', 'previewOrder started');

  const requesterId = document.getElementById('requester_id').value;
  const supplierId = document.getElementById('supplier_id').value;
  const noteToSupplier = document.getElementById('note_to_supplier').value;
  const orderNumber = document.getElementById('order-number').textContent;
  const createdDate = document.getElementById('request_date').value;
  const total = updateGrandTotal();

  if (!requesterId || !supplierId || !createdDate) {
    alert('Please fill in all required fields (Requester, Supplier, Date)');
    return;
  }

  const items = Array.from(document.querySelectorAll('#items-body tr')).map(row => {
    const itemCode = row.querySelector('.item-code')?.value;
    const itemDescription = itemsList.find(i => i.item_code === itemCode)?.item_description || '';
    const project = row.querySelector('.project')?.value;
    const qtyOrdered = parseFloat(row.querySelector('.qty-ordered')?.value) || 0;
    const price = parseFloat(row.querySelector('.price')?.value) || 0;
    if (!itemCode || !project || qtyOrdered <= 0 || price <= 0) {
      throw new Error('Each item must have a valid code, project, quantity, and price');
    }
    return { item_code: itemCode, item_description: itemDescription, project, qty_ordered: qtyOrdered, price };
  });

  if (!items.length) {
    alert("Please add at least one item to the order");
    return;
  }

  const payload = {
    order_number: orderNumber,
    created_date: createdDate,
    supplier_name: document.getElementById("supplier_id").selectedOptions[0]?.text || "",
    requester_name: document.getElementById("requester_id").selectedOptions[0]?.text || "",
    total: total,
    order_note: "",
    note_to_supplier: noteToSupplier,
    requester_id: parseInt(requesterId),
    supplier_id: parseInt(supplierId),
    items
  };

  try {
    const pdfRes = await fetch("/orders/api/preview_pdf_new_order", {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    if (!pdfRes.ok || !pdfRes.headers.get("content-type")?.includes("application/pdf")) {
      const err = await pdfRes.text();
      throw new Error(`Failed to generate PDF: ${pdfRes.status} - ${err}`);
    }

    const blob = await pdfRes.blob();
    if (!blob.size) throw new Error("Empty PDF file");

    showPDFModal(blob);
    await logToServer('INFO', 'Preview PDF displayed (no DB write)');
  } catch (error) {
    console.error("Preview failed:", error);
    await logToServer('ERROR', 'PreviewOrder failed (no DB write)', { error: error.message });
    alert(`Error: ${error.message}`);
  }
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/new_order_screen/pdf_utils.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/requesters.js
// /frontend/static/js/maintenance_screen/requesters.js

export function initRequesters() {
  console.log("initRequesters loaded");

  fetchRequesters();

  const addBtn = document.getElementById("add-requester-button");
  if (addBtn) {
    addBtn.addEventListener("click", addRequester);
  }

  async function fetchRequesters() {
    try {
      const res = await fetch("/lookups/requesters");
      const data = await res.json();

      const tbody = document.getElementById("requesters-table");
      if (!tbody) return;

      tbody.innerHTML = "";
      data.requesters.forEach(requester => {
        const row = document.createElement("tr");

        const nameCell = document.createElement("td");
        nameCell.textContent = requester.name;
        row.appendChild(nameCell);

        const actionsCell = document.createElement("td");
        const deleteButton = document.createElement("button");
        deleteButton.textContent = "Delete";
        deleteButton.addEventListener("click", () => deleteRequester(requester.id));
        actionsCell.appendChild(deleteButton);

        row.appendChild(actionsCell);
        tbody.appendChild(row);
      });
    } catch (err) {
      console.error("Failed to fetch requesters:", err);
    }
  }

  async function addRequester() {
    const input = document.getElementById("requester-name");
    if (!input) return;
    const name = input.value;

    try {
      const res = await fetch("/lookups/requesters", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name })
      });
      if (res.ok) fetchRequesters();
    } catch (err) {
      console.error("Failed to add requester:", err);
    }
  }

  async function deleteRequester(id) {
    try {
      const res = await fetch(`/lookups/requesters/${id}`, { method: "DELETE" });
      if (res.ok) fetchRequesters();
    } catch (err) {
      console.error("Failed to delete requester:", err);
    }
  }
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/requesters.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/requisitioners.js
// File: frontend/static/js/maintenance_screen/requisitioners.js

export function initRequisitioners() {
  const nameInput = document.getElementById("requisitioner-name");
  const addButton = document.getElementById("add-requisitioner-button");
  const tableBody = document.getElementById("requisitioners-table");

  if (!nameInput || !addButton || !tableBody) return;

  async function loadRequisitioners() {
    try {
      const res = await fetch("/lookups/requisitioners");
      const data = await res.json();
      tableBody.innerHTML = "";

      data.forEach(r => {
        const row = document.createElement("tr");
        row.innerHTML = `
          <td>${r.name}</td>
          <td><button data-id="${r.id}" class="delete-btn">Delete</button></td>
        `;
        tableBody.appendChild(row);
      });

      document.querySelectorAll(".delete-btn").forEach(btn => {
        btn.addEventListener("click", async () => {
          const id = btn.getAttribute("data-id");
          await fetch(`/lookups/requisitioners/${id}`, { method: "DELETE" });
          loadRequisitioners();
        });
      });
    } catch (err) {
      console.error("Failed to load requisitioners", err);
    }
  }

  addButton.addEventListener("click", async () => {
    const name = nameInput.value.trim();
    if (!name) return;

    try {
      const res = await fetch("/lookups/requisitioners", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name })
      });

      if (res.ok) {
        nameInput.value = "";
        await loadRequisitioners();
        alert("✅ Added successfully.");
      } else {
        const err = await res.json();
        alert(`❌ Failed: ${err.detail}`);
      }
    } catch (err) {
      console.error("Add requisitioner error", err);
    }
  });

  loadRequisitioners();
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/requisitioners.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/business_details.js
// /frontend/static/js/maintenance_screen/business_details.js

export function initBusinessDetails() {
  console.log("initBusinessDetails loaded");

  fetchBusinessDetails();

  const updateBtn = document.getElementById("update-business-details-button");
  if (updateBtn) {
    updateBtn.addEventListener("click", updateBusinessDetails);
  }

  async function fetchBusinessDetails() {
    try {
      const res = await fetch("/lookups/business_details");
      const data = await res.json();

      setValue("company-name", data.company_name);
      setValue("address-line1", data.address_line1);
      setValue("address-line2", data.address_line2);
      setValue("city", data.city);
      setValue("province", data.province);
      setValue("postal-code", data.postal_code);
      setValue("telephone", data.telephone);
      setValue("vat-number", data.vat_number);
    } catch (err) {
      console.error("Failed to fetch business details:", err);
    }
  }

  async function updateBusinessDetails() {
    const payload = {
      company_name: getValue("company-name"),
      address_line1: getValue("address-line1"),
      address_line2: getValue("address-line2"),
      city: getValue("city"),
      province: getValue("province"),
      postal_code: getValue("postal-code"),
      telephone: getValue("telephone"),
      vat_number: getValue("vat-number")
    };

    try {
      const res = await fetch("/lookups/business_details", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });
      if (res.ok) fetchBusinessDetails();
    } catch (err) {
      console.error("Failed to update business details:", err);
    }
  }

  function setValue(id, value) {
    const el = document.getElementById(id);
    if (el) el.value = value || "";
  }

  function getValue(id) {
    const el = document.getElementById(id);
    return el ? el.value : "";
  }
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/business_details.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/users.js
export function initUsers() {
  console.log("initUsers loaded");

  fetchUsers();

  const cancelBtn = document.getElementById("cancel-user-edit");
  if (cancelBtn) {
    cancelBtn.addEventListener("click", cancelUserEdit);
    cancelBtn.style.display = "none";
  }

  const form = document.querySelector("#users form");
  if (form) {
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      await addOrUpdateUser();
    });
  }

  const addBtn = document.querySelector("#users button[type='submit']");
  if (addBtn) {
    addBtn.textContent = "Add User";
  }
}

async function fetchUsers() {
  try {
    const res = await fetch("/lookups/users");
    if (!res.ok) throw new Error("Failed to fetch users");

    const data = await res.json();
    const tbody = document.getElementById("users-table");
    if (!tbody) return;

    tbody.innerHTML = "";
    data.users.forEach(user => {
      const row = document.createElement("tr");

      row.appendChild(createCell(user.username));
      row.appendChild(createCell(user.rights));
      row.appendChild(createCell(user.auth_threshold_band ?? "Not Set"));
      row.appendChild(createActionsCell(user));

      tbody.appendChild(row);
    });
  } catch (err) {
    console.error("Failed to fetch users:", err);
  }
}

function createCell(content) {
  const cell = document.createElement("td");
  cell.textContent = content;
  return cell;
}

function createActionsCell(user) {
  const cell = document.createElement("td");

  const editBtn = document.createElement("button");
  editBtn.textContent = "Edit";
  editBtn.addEventListener("click", () =>
    populateUserForm(user.id, user.username, user.rights, user.auth_threshold_band)
  );
  cell.appendChild(editBtn);

  const deleteBtn = document.createElement("button");
  deleteBtn.textContent = "Delete";
  deleteBtn.style.marginLeft = "8px";
  deleteBtn.addEventListener("click", () => deleteUser(user.id));
  cell.appendChild(deleteBtn);

  return cell;
}

async function addOrUpdateUser() {
  const id = document.getElementById("user-id")?.value;
  const username = document.getElementById("user-username")?.value.trim();
  const password = document.getElementById("user-password")?.value;
  const rights = document.getElementById("user-rights")?.value;
  const bandRaw = document.getElementById("user-auth-threshold-band")?.value;
  const auth_threshold_band = bandRaw === "" ? null : parseInt(bandRaw, 10);

  if (!username || !rights) {
    alert("Username and rights are required.");
    return;
  }

  if (!id && !password) {
    alert("Password is required when adding a new user.");
    return;
  }

  const method = id ? "PUT" : "POST";
  const url = id ? `/lookups/users/${id}` : "/lookups/users";
  const payload = { username, rights, auth_threshold_band };

  if (method === "POST" || password) {
    payload.password = password;
  }

  try {
    const res = await fetch(url, {
      method,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });

    if (!res.ok) {
      const error = await res.json();
      throw new Error(
        error.detail
          ? (Array.isArray(error.detail)
              ? error.detail.map(e => e.msg).join(", ")
              : error.detail)
          : "Unknown error"
      );
    }

    fetchUsers();
    cancelUserEdit();
  } catch (err) {
    console.error("Failed to save user:", err);
    alert("Failed to save user. " + err.message);
  }
}

function populateUserForm(id, username, rights, auth_threshold_band) {
  document.getElementById("user-id").value = id;
  document.getElementById("user-username").value = username;
  document.getElementById("user-rights").value = rights;
  document.getElementById("user-auth-threshold-band").value = auth_threshold_band ?? "";
  document.getElementById("user-password").value = "";

  document.getElementById("cancel-user-edit").style.display = "inline";
  document.querySelector("#users button[type='submit']").textContent = "Update User";
}

function cancelUserEdit() {
  document.getElementById("user-id").value = "";
  document.getElementById("user-username").value = "";
  document.getElementById("user-password").value = "";
  document.getElementById("user-rights").value = "edit";
  document.getElementById("user-auth-threshold-band").value = "";

  document.getElementById("cancel-user-edit").style.display = "none";
  document.querySelector("#users button[type='submit']").textContent = "Add User";
}

async function deleteUser(id) {
  if (!confirm("Are you sure you want to delete this user?")) return;

  try {
    const res = await fetch(`/lookups/users/${id}`, { method: "DELETE" });
    if (res.ok) {
      fetchUsers();
    } else {
      const err = await res.json();
      throw new Error(err.detail || "Delete failed");
    }
  } catch (err) {
    console.error("Failed to delete user:", err);
    alert("Failed to delete user. " + err.message);
  }
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/users.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/index.js
import { initUsers } from "./users.js";
import { initRequesters } from "./requesters.js";
import { initItems } from "./items.js";
import { initSuppliers } from "./suppliers.js";
import { initProjects } from "./projects.js";
import { initRequisitioners } from "./requisitioners.js";
import { initSettings } from "./settings.js";
import { initBusinessDetails } from "./business_details.js";

function initTabs() {
  const tabs = document.querySelectorAll(".tab");
  const contents = document.querySelectorAll(".tab-content");

  tabs.forEach(tab => {
    tab.addEventListener("click", () => {
      tabs.forEach(t => t.classList.remove("active"));
      contents.forEach(c => c.classList.remove("active"));

      tab.classList.add("active");
      const activeId = tab.dataset.tab;
      document.getElementById(activeId).classList.add("active");
    });
  });
}

function handleCsvImport(buttonId, fileInputId, endpoint, label) {
  const button = document.getElementById(buttonId);
  const fileInput = document.getElementById(fileInputId);

  if (!button || !fileInput) return;

  button.addEventListener("click", async () => {
    const file = fileInput.files[0];
    if (!file) {
      alert(`Please select a CSV file to import ${label}.`);
      return;
    }

    const formData = new FormData();
    formData.append("file", file);

    try {
      const response = await fetch(endpoint, {
        method: "POST",
        body: formData
      });

      if (!response.ok) {
        const err = await response.text();
        throw new Error(`Server error: ${err}`);
      }

      const result = await response.json();
      alert(`✅ Imported ${result.inserted} ${label} successfully.`);
      location.reload();
    } catch (error) {
      console.error(`❌ Import failed for ${label}:`, error);
      alert(`Import failed. Check console for ${label} details.`);
    }
  });
}

export function initMaintenanceScreen() {
  initTabs();
  initUsers();
  initRequesters();
  initItems();
  initSuppliers();
  initProjects();
  initSettings();
  initBusinessDetails();
  initRequisitioners();

  // ✅ CSV import handlers
  handleCsvImport("import-items-button", "items-csv-upload", "/maintenance/import_items_csv", "items");
  handleCsvImport("import-suppliers-button", "suppliers-csv-upload", "/maintenance/import_suppliers_csv", "suppliers");
  handleCsvImport("import-projects-button", "projects-csv-upload", "/maintenance/import_projects_csv", "projects");
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/index.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/projects.js
// /frontend/static/js/maintenance_screen/projects.js
export function initProjects() {
  console.log("initProjects loaded");

  fetchProjects();

  const addBtn = document.getElementById("add-project-button");
  if (addBtn) {
    addBtn.addEventListener("click", addProject);
  }

  async function fetchProjects() {
    try {
      const res = await fetch("/lookups/projects");
      const data = await res.json();
      const tbody = document.getElementById("projects-table");
      if (!tbody) return;

      tbody.innerHTML = "";
      data.projects.forEach(project => {
        const row = document.createElement("tr");

        const codeCell = document.createElement("td");
        codeCell.textContent = project.project_code;
        row.appendChild(codeCell);

        const nameCell = document.createElement("td");
        nameCell.textContent = project.project_name;
        row.appendChild(nameCell);

        const actionsCell = document.createElement("td");
        const deleteButton = document.createElement("button");
        deleteButton.textContent = "Delete";
        deleteButton.onclick = () => deleteProject(project.id);
        actionsCell.appendChild(deleteButton);

        row.appendChild(actionsCell);
        tbody.appendChild(row);
      });
    } catch (err) {
      console.error("Failed to fetch projects:", err);
    }
  }

  async function addProject() {
    const project_code = document.getElementById("project-code")?.value;
    const project_name = document.getElementById("project-name")?.value;

    try {
      const res = await fetch("/lookups/projects", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ project_code, project_name })
      });
      if (res.ok) fetchProjects();
    } catch (err) {
      console.error("Failed to add project:", err);
    }
  }

  async function deleteProject(id) {
    try {
      const res = await fetch(`/lookups/projects/${id}`, { method: "DELETE" });
      if (res.ok) fetchProjects();
    } catch (err) {
      console.error("Failed to delete project:", err);
    }
  }
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/projects.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/suppliers.js
export function initSuppliers() {
  console.log("initSuppliers loaded");

  fetchSuppliers();

  const saveBtn = document.getElementById("save-supplier-button");
  if (saveBtn) {
    saveBtn.textContent = "Add Supplier"; // Default label
    saveBtn.addEventListener("click", saveSupplier);
  }

  const cancelBtn = document.getElementById("cancel-supplier-edit");
  if (cancelBtn) {
    cancelBtn.addEventListener("click", cancelSupplierEdit);
  }

  async function fetchSuppliers() {
    try {
      const res = await fetch("/maintenance/suppliers");
      const data = await res.json();
      const tbody = document.getElementById("suppliers-table");
      if (!tbody) return;

      tbody.innerHTML = "";
      data.suppliers.forEach(supplier => {
        const row = document.createElement("tr");

        const nameCell = document.createElement("td");
        nameCell.textContent = supplier.name;
        row.appendChild(nameCell);

        const actionsCell = document.createElement("td");

        const editButton = document.createElement("button");
        editButton.textContent = "Edit";
        editButton.addEventListener("click", () => editSupplier(supplier.id, supplier.name));
        actionsCell.appendChild(editButton);

        const deleteButton = document.createElement("button");
        deleteButton.textContent = "Delete";
        deleteButton.style.marginLeft = "8px";
        deleteButton.addEventListener("click", () => deleteSupplier(supplier.id));
        actionsCell.appendChild(deleteButton);

        row.appendChild(actionsCell);
        tbody.appendChild(row);
      });
    } catch (err) {
      console.error("Failed to fetch suppliers:", err);
    }
  }

  async function saveSupplier() {
    const idField = document.getElementById("supplier-id");
    const nameField = document.getElementById("supplier-name");
    if (!idField || !nameField) return;

    const id = idField.value;
    const name = nameField.value;

    if (!name.trim()) return;

    try {
      const method = id ? "PUT" : "POST";
      const url = id ? `/maintenance/suppliers/${id}` : "/maintenance/suppliers";

      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name })
      });

      if (res.ok) {
        fetchSuppliers();
        cancelSupplierEdit();
        alert("✅ Supplier saved successfully.");
      }
    } catch (err) {
      console.error("Failed to save supplier:", err);
    }
  }

  function editSupplier(id, name) {
    const idField = document.getElementById("supplier-id");
    const nameField = document.getElementById("supplier-name");
    const cancelBtn = document.getElementById("cancel-supplier-edit");
    const saveBtn = document.getElementById("save-supplier-button");

    if (!idField || !nameField || !cancelBtn || !saveBtn) return;

    idField.value = id;
    nameField.value = name;
    cancelBtn.style.display = "inline";
    saveBtn.textContent = "Update Supplier";
  }

  function cancelSupplierEdit() {
    const idField = document.getElementById("supplier-id");
    const nameField = document.getElementById("supplier-name");
    const cancelBtn = document.getElementById("cancel-supplier-edit");
    const saveBtn = document.getElementById("save-supplier-button");

    if (!idField || !nameField || !cancelBtn || !saveBtn) return;

    idField.value = "";
    nameField.value = "";
    cancelBtn.style.display = "none";
    saveBtn.textContent = "Add Supplier";
  }

  async function deleteSupplier(id) {
    try {
      const res = await fetch(`/maintenance/suppliers/${id}`, { method: "DELETE" });
      if (res.ok) fetchSuppliers();
    } catch (err) {
      console.error("Failed to delete supplier:", err);
    }
  }
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/suppliers.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/items.js
// /frontend/static/js/maintenance_screen/items.js

export function initItems() {
  console.log("initItems loaded");

  fetchItems();

  const addBtn = document.getElementById("add-item-button");
  if (addBtn) {
    addBtn.addEventListener("click", addItem);
  }

  async function fetchItems() {
    try {
      const res = await fetch("/lookups/items");
      const data = await res.json();
      const tbody = document.getElementById("items-table");
      if (!tbody) return;

      tbody.innerHTML = "";
      data.items.forEach(item => {
        const row = document.createElement("tr");

        const codeCell = document.createElement("td");
        codeCell.textContent = item.item_code;
        row.appendChild(codeCell);

        const descCell = document.createElement("td");
        descCell.textContent = item.item_description;
        row.appendChild(descCell);

        const actionsCell = document.createElement("td");
        const deleteButton = document.createElement("button");
        deleteButton.textContent = "Delete";
        deleteButton.onclick = () => deleteItem(item.id);
        actionsCell.appendChild(deleteButton);

        row.appendChild(actionsCell);
        tbody.appendChild(row);
      });
    } catch (err) {
      console.error("Failed to fetch items:", err);
    }
  }

  async function addItem() {
    const item_code = document.getElementById("item-code")?.value;
    const item_description = document.getElementById("item-description")?.value;

    try {
      const res = await fetch("/lookups/items", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ item_code, item_description })
      });

      if (res.ok) {
        showToast("✅ Item saved successfully");
        fetchItems();
      } else {
        const errMsg = await res.text();
        showToast(`❌ Failed to save item: ${errMsg}`, false);
      }
    } catch (err) {
      console.error("Failed to add item:", err);
      showToast("❌ Network or server error", false);
    }
  }

  async function deleteItem(id) {
    try {
      const res = await fetch(`/lookups/items/${id}`, { method: "DELETE" });
      if (res.ok) {
        showToast("🗑️ Item deleted");
        fetchItems();
      } else {
        const errMsg = await res.text();
        showToast(`❌ Failed to delete: ${errMsg}`, false);
      }
    } catch (err) {
      console.error("Failed to delete item:", err);
      showToast("❌ Network or server error", false);
    }
  }

  function showToast(message, success = true) {
    const toast = document.createElement("div");
    toast.textContent = message;
    toast.className = success ? "toast toast-success" : "toast toast-error";
    toast.style.position = "fixed";
    toast.style.bottom = "20px";
    toast.style.right = "20px";
    toast.style.background = success ? "#28a745" : "#c01c1c";
    toast.style.color = "white";
    toast.style.padding = "10px 16px";
    toast.style.borderRadius = "6px";
    toast.style.boxShadow = "0 2px 6px rgba(0,0,0,0.2)";
    toast.style.zIndex = "9999";
    toast.style.fontWeight = "bold";

    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
  }
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/items.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/settings.js
export function initSettings() {
  console.log("initSettings loaded");

  fetchSettings();

  const updateBtn = document.getElementById("update-settings-button");
  if (updateBtn) {
    updateBtn.addEventListener("click", updateSettings);
  }

  async function fetchSettings() {
    try {
      const res = await fetch("/lookups/settings");
      const data = await res.json();

      document.getElementById("order-number-start").value = data.order_number_start || "";
      document.getElementById("requisition-number-start").value = data.requisition_number_start || "";
      document.getElementById("auth-threshold-1").value = data.auth_threshold_1 || "";
      document.getElementById("auth-threshold-2").value = data.auth_threshold_2 || "";
      document.getElementById("auth-threshold-3").value = data.auth_threshold_3 || "";
      document.getElementById("auth-threshold-4").value = data.auth_threshold_4 || "";
    } catch (err) {
      console.error("Failed to fetch settings:", err);
    }
  }

  async function updateSettings() {
    const order_number_start = document.getElementById("order-number-start").value;
    const requisition_number_start = document.getElementById("requisition-number-start").value;
    const auth_threshold_1 = parseInt(document.getElementById("auth-threshold-1").value) || 0;
    const auth_threshold_2 = parseInt(document.getElementById("auth-threshold-2").value) || 0;
    const auth_threshold_3 = parseInt(document.getElementById("auth-threshold-3").value) || 0;
    const auth_threshold_4 = parseInt(document.getElementById("auth-threshold-4").value) || 0;

    try {
      const res = await fetch("/lookups/settings", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          order_number_start,
          requisition_number_start,
          auth_threshold_1,
          auth_threshold_2,
          auth_threshold_3,
          auth_threshold_4
        })
      });
      if (res.ok) fetchSettings();
    } catch (err) {
      console.error("Failed to update settings:", err);
    }
  }
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/maintenance_screen/settings.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/__pycache__/new_requisitions_pdf_generator.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/__pycache__/new_requisitions_pdf_generator.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/__pycache__/new_requisitions_pdf_generator.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/mobile_pdf_modal.js
export async function showMobilePDFModal(orderId) {
  // Remove existing modal if it exists
  const existing = document.getElementById("pdf-modal");
  if (existing) existing.remove();

  const modal = document.createElement("div");
  modal.id = "pdf-modal";
  modal.style.position = "fixed";
  modal.style.top = 0;
  modal.style.left = 0;
  modal.style.width = "100vw";
  modal.style.height = "100vh";
  modal.style.backgroundColor = "rgba(0, 0, 0, 0.85)";
  modal.style.zIndex = 9999;
  modal.style.display = "flex";
  modal.style.flexDirection = "column";

  const closeBtn = document.createElement("button");
  closeBtn.textContent = "✖ Close";
  closeBtn.style.padding = "0.6rem 1.2rem";
  closeBtn.style.alignSelf = "flex-end";
  closeBtn.style.margin = "1rem";
  closeBtn.style.backgroundColor = "#ffffff";
  closeBtn.style.color = "#000";
  closeBtn.style.border = "none";
  closeBtn.style.borderRadius = "6px";
  closeBtn.style.fontSize = "1rem";
  closeBtn.style.cursor = "pointer";
  closeBtn.onclick = () => modal.remove();

  const iframe = document.createElement("iframe");
  iframe.style.flex = 1;
  iframe.style.width = "100%";
  iframe.style.border = "none";
  iframe.style.background = "white";

  try {
    const res = await fetch(`/orders/api/generate_pdf_for_order/${orderId}`);
    if (!res.ok) throw new Error("PDF fetch failed");
    const blob = await res.blob();
    const blobUrl = URL.createObjectURL(blob);
    iframe.src = blobUrl;
  } catch (err) {
    iframe.srcdoc = `<p style="color:white;text-align:center;margin-top:2rem;">❌ Failed to load PDF</p>`;
    console.error("❌ Error loading PDF:", err);
  }

  modal.appendChild(closeBtn);
  modal.appendChild(iframe);
  document.body.appendChild(modal);
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/mobile_pdf_modal.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/payments_modal.js
// File: frontend/static/js/payments_modal.js

console.log("💸 payments_modal.js loaded");

export function showCodPaymentModal(orderId, existingAmount = '', existingDate = '') {
  // Create modal container
  const modal = document.createElement("div");
  modal.classList.add("modal-overlay");
  modal.innerHTML = `
    <div class="modal">
      <h2>Mark COD Payment</h2>
      <label for="cod-amount">Amount Paid:</label>
      <input type="number" id="cod-amount" value="${existingAmount}" placeholder="Enter amount" step="0.01" />

      <label for="cod-date">Payment Date:</label>
      <input type="date" id="cod-date" value="${existingDate}" />

      <div class="modal-buttons">
        <button id="cod-cancel">Cancel</button>
        <button id="cod-save">Save</button>
      </div>
    </div>
  `;

  document.body.appendChild(modal);

  // Add button listeners
  document.getElementById("cod-cancel").onclick = () => modal.remove();
  document.getElementById("cod-save").onclick = async () => {
    const amount = parseFloat(document.getElementById("cod-amount").value);
    const date = document.getElementById("cod-date").value;

    if (isNaN(amount) || !date) {
      alert("Please enter a valid amount and payment date.");
      return;
    }

    try {
      const res = await fetch(`/orders/mark_cod_paid/${orderId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ amount_paid: amount, payment_date: date })
      });

      if (!res.ok) throw new Error("Failed to save COD payment");

      const data = await res.json();
      if (data.success) {
        alert("✅ COD payment recorded");
        modal.remove();
        location.reload();
      } else {
        alert("❌ Failed to save payment");
      }
    } catch (err) {
      console.error("Error saving COD payment:", err);
      alert("❌ Error saving payment");
    }
  };
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/payments_modal.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/requisitions_attachment_modal.js
export function showViewAttachmentsModal(requisitionId, requisitionNumber, onUploadComplete = null) {
  const fetchUrl = `/requisitions/attachments/${requisitionId}`;

  fetch(fetchUrl)
    .then(res => res.json())
    .then(data => {
      const files = data.attachments || [];
      const modal = createBaseModal();
      const title = document.createElement("h3");
      title.textContent = `Attachments for ${requisitionNumber}`;
      modal.inner.appendChild(title);

      if (files.length > 0) {
        const list = document.createElement("ul");
        list.style.listStyle = "none";
        list.style.padding = "0";

        files.forEach(f => {
          const li = document.createElement("li");
          const link = document.createElement("a");
          link.href = "#";
          link.textContent = f.filename;
          link.style.display = "block";
          link.style.marginBottom = "0.5rem";
          link.style.color = "green";
          link.style.textDecoration = "underline";
          link.style.cursor = "pointer";

          link.onclick = async (e) => {
            e.preventDefault();
            try {
              window.currentOrderNumberForPDF = `${requisitionNumber}_${f.filename}`;
              const res = await fetch(`/${f.file_path}`);
              if (!res.ok) throw new Error(`HTTP ${res.status}`);
              const blob = await res.blob();
              const module = await import('./pdf_modal.js');
              module.showPDFModal(blob);
            } catch (err) {
              alert("❌ Failed to preview PDF");
              console.error("PDF preview failed:", err);
            }
          };

          li.appendChild(link);
          list.appendChild(li);
        });

        modal.inner.appendChild(list);
      }

      const dropzone = document.createElement("div");
      dropzone.textContent = "Drag and drop files here or click to select";
      dropzone.style.border = "2px dashed #aaa";
      dropzone.style.padding = "2rem";
      dropzone.style.textAlign = "center";
      dropzone.style.cursor = "pointer";
      dropzone.style.marginTop = "1rem";
      dropzone.style.background = "#fafafa";

      dropzone.onclick = () => {
        const input = document.createElement("input");
        input.type = "file";
        input.multiple = true;
        input.onchange = () => handleFiles(input.files, requisitionId, requisitionNumber, modal.inner, onUploadComplete);
        input.click();
      };

      dropzone.ondragover = e => {
        e.preventDefault();
        dropzone.style.background = "#eee";
      };
      dropzone.ondragleave = () => {
        dropzone.style.background = "#fafafa";
      };
      dropzone.ondrop = e => {
        e.preventDefault();
        dropzone.style.background = "#fafafa";
        handleFiles(e.dataTransfer.files, requisitionId, requisitionNumber, modal.inner, onUploadComplete);
      };

      modal.inner.appendChild(dropzone);

      const closeBtn = document.createElement("button");
      closeBtn.textContent = "Close";
      closeBtn.style.marginTop = "1.5rem";
      closeBtn.style.padding = "0.5rem 1rem";
      closeBtn.style.border = "none";
      closeBtn.style.cursor = "pointer";
      closeBtn.style.background = "#ccc";
      closeBtn.onclick = () => document.body.removeChild(modal.container);

      modal.inner.appendChild(closeBtn);
      document.body.appendChild(modal.container);
    })
    .catch(err => {
      alert("❌ Failed to load attachments");
      console.error(err);
    });
}

export function showUploadAttachmentsModal(requisitionId, requisitionNumber, onUploadComplete = null) {
  showViewAttachmentsModal(requisitionId, requisitionNumber, onUploadComplete);
}

export async function checkAttachments(requisitionId) {
  const url = `/requisitions/attachments/${requisitionId}`;
  try {
    const res = await fetch(url);
    const data = await res.json();
    return Array.isArray(data.attachments) && data.attachments.length > 0;
  } catch (err) {
    console.error("Failed to check attachments:", err);
    return false;
  }
}

function handleFiles(fileList, requisitionId, requisitionNumber, modalInner, onUploadComplete = null) {
  Array.from(fileList).forEach(file => {
    const formData = new FormData();
    formData.append("file", file);

    if (requisitionId !== null && requisitionId !== undefined) {
      formData.append("requisition_id", requisitionId);
    } else if (requisitionNumber) {
      formData.append("requisition_number", requisitionNumber);
    }

    fetch("/requisitions/upload_attachment", {
      method: "POST",
      body: formData,
    })
      .then(res => res.json())
      .then(data => {
        const msg = document.createElement("p");
        msg.textContent = data.message;
        msg.style.color = "green";
        modalInner.appendChild(msg);
        if (onUploadComplete) onUploadComplete();
      })
      .catch(err => {
        const msg = document.createElement("p");
        msg.textContent = `❌ Failed to upload: ${file.name}`;
        msg.style.color = "red";
        modalInner.appendChild(msg);
        console.error(err);
      });
  });
}

function createBaseModal() {
  const container = document.createElement("div");
  container.style.position = "fixed";
  container.style.top = "0";
  container.style.left = "0";
  container.style.width = "100vw";
  container.style.height = "100vh";
  container.style.backgroundColor = "rgba(0,0,0,0.5)";
  container.style.display = "flex";
  container.style.alignItems = "center";
  container.style.justifyContent = "center";
  container.style.zIndex = "9999";

  const inner = document.createElement("div");
  inner.style.backgroundColor = "white";
  inner.style.padding = "1.5rem";
  inner.style.borderRadius = "8px";
  inner.style.width = "90%";
  inner.style.maxWidth = "500px";
  inner.style.maxHeight = "80vh";
  inner.style.overflowY = "auto";
  inner.style.fontFamily = "Arial, sans-serif";
  inner.style.position = "relative";

  const close = document.createElement("button");
  close.textContent = "✖";
  close.style.position = "absolute";
  close.style.top = "10px";
  close.style.right = "10px";
  close.style.background = "none";
  close.style.border = "none";
  close.style.fontSize = "1.2rem";
  close.style.cursor = "pointer";
  close.onclick = () => document.body.removeChild(container);

  inner.appendChild(close);
  container.appendChild(inner);

  return { container, inner };
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/requisitions_attachment_modal.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/pdf_modal.js
// File: frontend/static/js/components/pdf_modal.js

export function showPDFModal(blob) {
    const modal = document.createElement("div");
    modal.style.position = "fixed";
    modal.style.top = 0;
    modal.style.left = 0;
    modal.style.width = "100%";
    modal.style.height = "100%";
    modal.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
    modal.style.display = "flex";
    modal.style.alignItems = "center";
    modal.style.justifyContent = "center";
    modal.style.zIndex = 10000;

    const contentWrapper = document.createElement("div");
    contentWrapper.style.width = "80%";
    contentWrapper.style.height = "80%";
    contentWrapper.style.display = "flex";
    contentWrapper.style.flexDirection = "column";
    contentWrapper.style.backgroundColor = "white";
    contentWrapper.style.borderRadius = "8px";
    contentWrapper.style.boxShadow = "0 0 10px #fff";
    contentWrapper.style.overflow = "hidden";

    const headerBar = document.createElement("div");
    headerBar.style.display = "flex";
    headerBar.style.justifyContent = "flex-end";
    headerBar.style.alignItems = "center";
    headerBar.style.backgroundColor = "#f0f0f0";
    headerBar.style.padding = "8px 12px";

    const pdfURL = URL.createObjectURL(blob);
    const iframe = document.createElement("iframe");
    iframe.src = pdfURL;
    iframe.style.width = "100%";
    iframe.style.height = "100%";
    iframe.style.border = "none";

    // === 📧 Email Button ===
    const emailBtn = document.createElement("button");
    emailBtn.textContent = "📧 Email PDF";
    emailBtn.style.background = "#28a745";
    emailBtn.style.color = "#fff";
    emailBtn.style.border = "none";
    emailBtn.style.padding = "6px 12px";
    emailBtn.style.borderRadius = "4px";
    emailBtn.style.cursor = "pointer";
    emailBtn.style.marginRight = "8px";
    emailBtn.onclick = async () => {
        const orderId = window.currentOrderIdForPDF;
        if (!orderId) return alert("Order ID not available");

        try {
            const response = await fetch(`/orders/email_purchase_order/${orderId}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                credentials: "include"
            });

            if (!response.ok) {
                const error = await response.text();
                throw new Error(error);
            }

            alert("✅ Purchase order emailed successfully.");
        } catch (err) {
            console.error("Email failed:", err);
            alert("❌ Failed to send email. See console for details.");
        }
    };

    // === Download Button ===
    const downloadBtn = document.createElement("button");
    downloadBtn.textContent = "Download PDF";
    downloadBtn.style.background = "#007bff";
    downloadBtn.style.color = "#fff";
    downloadBtn.style.border = "none";
    downloadBtn.style.padding = "6px 12px";
    downloadBtn.style.borderRadius = "4px";
    downloadBtn.style.cursor = "pointer";
    downloadBtn.onclick = () => {
        const link = document.createElement("a");
        link.href = pdfURL;
        const filename = window.currentOrderNumberForPDF || "PurchaseOrder.pdf";
        link.download = filename;
        link.click();
    };

    const buttonGroup = document.createElement("div");
    buttonGroup.style.display = "flex";
    buttonGroup.style.alignItems = "center";
    buttonGroup.style.gap = "10px"; // ← KEY: adds spacing between buttons

    buttonGroup.appendChild(emailBtn);
    buttonGroup.appendChild(downloadBtn);

    const closeBtn = document.createElement("button");
    closeBtn.textContent = "✖";
    closeBtn.style.background = "transparent";
    closeBtn.style.border = "none";
    closeBtn.style.color = "#333";
    closeBtn.style.fontSize = "20px";
    closeBtn.style.cursor = "pointer";
    closeBtn.onclick = () => {
        document.body.removeChild(modal);
        URL.revokeObjectURL(pdfURL);
    };

    headerBar.appendChild(buttonGroup);
    headerBar.appendChild(closeBtn);

    modal.addEventListener("click", (e) => {
        if (e.target === modal) {
            document.body.removeChild(modal);
            URL.revokeObjectURL(pdfURL);
        }
    });

    contentWrapper.appendChild(headerBar);
    contentWrapper.appendChild(iframe);
    modal.appendChild(contentWrapper);
    document.body.appendChild(modal);
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/pdf_modal.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/attachment_modal.js
export function showViewAttachmentsModal(orderId, orderNumber, onUploadComplete = null) {
  const isRequisition = typeof orderNumber === "string" && orderNumber.startsWith("REQ");
  const fetchUrl = isRequisition
    ? `/requisitions/attachments/${orderId}`
    : `/orders/attachments/${orderId}`;

  fetch(fetchUrl)
    .then(res => res.json())
    .then(data => {
      const files = data.attachments || [];
      const modal = createBaseModal();
      const title = document.createElement("h3");
      title.textContent = `Attachments for ${orderNumber}`;
      modal.inner.appendChild(title);

      if (files.length > 0) {
        const list = document.createElement("ul");
        list.style.listStyle = "none";
        list.style.padding = "0";

        files.forEach(f => {
          const li = document.createElement("li");
          const link = document.createElement("a");
          link.href = "#";
          link.textContent = f.filename;
          link.style.display = "block";
          link.style.marginBottom = "0.5rem";
          link.style.color = "green";
          link.style.textDecoration = "underline";
          link.style.cursor = "pointer";

          link.onclick = async (e) => {
            e.preventDefault();
            try {
              window.currentOrderNumberForPDF = `${orderNumber}_${f.filename}`;
              const res = await fetch(`/${f.file_path}`);
              if (!res.ok) throw new Error(`HTTP ${res.status}`);
              const blob = await res.blob();
              const module = await import('./pdf_modal.js');
              module.showPDFModal(blob);
            } catch (err) {
              alert("❌ Failed to preview PDF");
              console.error("PDF preview failed:", err);
            }
          };

          li.appendChild(link);
          list.appendChild(li);
        });

        modal.inner.appendChild(list);
      }

      const dropzone = document.createElement("div");
      dropzone.textContent = "Drag and drop files here or click to select";
      dropzone.style.border = "2px dashed #aaa";
      dropzone.style.padding = "2rem";
      dropzone.style.textAlign = "center";
      dropzone.style.cursor = "pointer";
      dropzone.style.marginTop = "1rem";
      dropzone.style.background = "#fafafa";

      dropzone.onclick = () => {
        const input = document.createElement("input");
        input.type = "file";
        input.multiple = true;
        input.onchange = () => handleFiles(input.files, orderId, orderNumber, modal.inner, onUploadComplete);
        input.click();
      };

      dropzone.ondragover = e => {
        e.preventDefault();
        dropzone.style.background = "#eee";
      };
      dropzone.ondragleave = () => {
        dropzone.style.background = "#fafafa";
      };
      dropzone.ondrop = e => {
        e.preventDefault();
        dropzone.style.background = "#fafafa";
        handleFiles(e.dataTransfer.files, orderId, orderNumber, modal.inner, onUploadComplete);
      };

      modal.inner.appendChild(dropzone);

      const closeBtn = document.createElement("button");
      closeBtn.textContent = "Close";
      closeBtn.style.marginTop = "1.5rem";
      closeBtn.style.padding = "0.5rem 1rem";
      closeBtn.style.border = "none";
      closeBtn.style.cursor = "pointer";
      closeBtn.style.background = "#ccc";
      closeBtn.onclick = () => document.body.removeChild(modal.container);

      modal.inner.appendChild(closeBtn);
      document.body.appendChild(modal.container);
    })
    .catch(err => {
      alert("❌ Failed to load attachments");
      console.error(err);
    });
}

export function showUploadAttachmentsModal(orderId, orderNumber, onUploadComplete = null) {
  showViewAttachmentsModal(orderId, orderNumber, onUploadComplete);
}

export async function checkAttachments(orderId, orderNumber) {
  const isRequisition = typeof orderNumber === "string" && orderNumber.startsWith("REQ");
  const url = isRequisition
    ? `/requisitions/attachments/${orderId}`
    : `/orders/attachments/${orderId}`;
  try {
    const res = await fetch(url);
    const data = await res.json();
    return data.attachments && data.attachments.length > 0;
  } catch (err) {
    console.error("Failed to check attachments:", err);
    return false;
  }
}

function handleFiles(fileList, orderId, orderNumber, modalInner, onUploadComplete = null) {
  Array.from(fileList).forEach(file => {
    const formData = new FormData();
    formData.append("file", file);

    const isRequisition = typeof orderNumber === "string" && orderNumber.startsWith("REQ");
    const endpoint = isRequisition
      ? "/requisitions/upload_attachment"
      : "/orders/upload_attachment";

    formData.append(isRequisition ? "requisition_id" : "order_id", orderId);

    fetch(endpoint, {
      method: "POST",
      body: formData,
    })
      .then(res => res.json())
      .then(data => {
        const msg = document.createElement("p");
        msg.textContent = data.message;
        msg.style.color = "green";
        modalInner.appendChild(msg);
        if (onUploadComplete) onUploadComplete();
      })
      .catch(err => {
        const msg = document.createElement("p");
        msg.textContent = `❌ Failed to upload: ${file.name}`;
        msg.style.color = "red";
        modalInner.appendChild(msg);
        console.error(err);
      });
  });
}

function createBaseModal() {
  const container = document.createElement("div");
  container.style.position = "fixed";
  container.style.top = "0";
  container.style.left = "0";
  container.style.width = "100vw";
  container.style.height = "100vh";
  container.style.backgroundColor = "rgba(0,0,0,0.5)";
  container.style.display = "flex";
  container.style.alignItems = "center";
  container.style.justifyContent = "center";
  container.style.zIndex = "9999";

  const inner = document.createElement("div");
  inner.style.backgroundColor = "white";
  inner.style.padding = "1.5rem";
  inner.style.borderRadius = "8px";
  inner.style.width = "90%";
  inner.style.maxWidth = "500px";
  inner.style.maxHeight = "80vh";
  inner.style.overflowY = "auto";
  inner.style.fontFamily = "Arial, sans-serif";
  inner.style.position = "relative";

  const close = document.createElement("button");
  close.textContent = "✖";
  close.style.position = "absolute";
  close.style.top = "10px";
  close.style.right = "10px";
  close.style.background = "none";
  close.style.border = "none";
  close.style.fontSize = "1.2rem";
  close.style.cursor = "pointer";
  close.onclick = () => document.body.removeChild(container);

  inner.appendChild(close);
  container.appendChild(inner);

  return { container, inner };
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/attachment_modal.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/expand_line_items.js
// Remove the 'export' keyword here
async function expandLineItemsWithReceipts(orderId, iconElement) {
  console.log(`Expanding with receipts for order ID: ${orderId}`);
  const currentRow = iconElement.closest("tr");
  if (!currentRow) {
    throw new Error("Could not find parent table row for icon element.");
  }

  const existingDetailRow = document.getElementById(`receipt-items-row-${orderId}`);
  if (existingDetailRow) {
    const isHidden = existingDetailRow.style.display === "none";
    existingDetailRow.style.display = isHidden ? "table-row" : "none";
    iconElement.textContent = isHidden ? "⬆️" : "⬇️";
    return;
  }

  try {
    const [itemsRes, logsRes] = await Promise.all([
      fetch(`/orders/api/items_for_order/${orderId}`),
      fetch(`/orders/api/receipt_logs/${orderId}`)
    ]);

    if (!itemsRes.ok || !logsRes.ok) {
      const itemsError = itemsRes.ok ? "" : await itemsRes.text();
      const logsError = logsRes.ok ? "" : await logsRes.text();
      throw new Error(
        `Fetch error: items ${itemsRes.status} (${itemsError}), logs ${logsRes.status} (${logsError})`
      );
    }

    const itemsData = await itemsRes.json().catch((err) => {
      throw new Error(`Failed to parse items JSON: ${err.message}`);
    });
    const logsData = await logsRes.json().catch((err) => {
      throw new Error(`Failed to parse logs JSON: ${err.message}`);
    });
    const receiptLogs = logsData.logs || [];

    const logMap = {};
    for (const log of receiptLogs) {
      if (!log.order_item_id) {
        console.warn(`Skipping log with missing order_item_id:`, log);
        continue;
      }
      if (!logMap[log.order_item_id]) logMap[log.order_item_id] = [];
      logMap[log.order_item_id].push(log);
    }

    const newRow = document.createElement("tr");
    newRow.id = `receipt-items-row-${orderId}`;
    const cell = document.createElement("td");
    cell.colSpan = currentRow.children.length;
    cell.style.padding = "1rem";

    if (!itemsData.items || itemsData.items.length === 0) {
      cell.innerHTML = "<em>No items found.</em>";
    } else {
      const table = document.createElement("table");
      table.style.width = "100%";
      table.style.borderCollapse = "collapse";
      table.style.marginTop = "0.5rem";

      const header = document.createElement("tr");
      header.style.backgroundColor = "#f0f0f0";
      header.style.fontWeight = "bold";
      ["Item Code", "Description", "Qty Ordered", "Price", "Total", "Receipts"].forEach((text) => {
        const th = document.createElement("td");
        th.textContent = text;
        header.appendChild(th);
      });
      table.appendChild(header);

      itemsData.items.forEach((item) => {
        const row = document.createElement("tr");

        const cells = [
          item.item_code || "N/A",
          item.item_description || "N/A",
          item.qty_ordered || 0,
          typeof item.price === "number" ? `R${item.price.toFixed(2)}` : "R0.00",
          typeof item.total === "number" ? `R${item.total.toFixed(2)}` : "R0.00",
        ];

        cells.forEach((text) => {
          const td = document.createElement("td");
          td.textContent = text;
          row.appendChild(td);
        });

        const logCell = document.createElement("td");
        const logs = logMap[item.id] || [];
        if (logs.length === 0) {
          logCell.textContent = "-";
        } else {
          const subTable = document.createElement("table");
          subTable.style.width = "100%";
          subTable.style.borderCollapse = "collapse";
          const subHeader = document.createElement("tr");
          ["Qty", "Date", "User"].forEach((label) => {
            const sh = document.createElement("td");
            sh.style.fontWeight = "bold";
            sh.textContent = label;
            subHeader.appendChild(sh);
          });
          subTable.appendChild(subHeader);

          logs.forEach((log) => {
            const logRow = document.createElement("tr");
            [log.qty_received, log.received_date, log.username || "N/A"].forEach((val) => {
              const td = document.createElement("td");
              td.textContent = val || "N/A";
              logRow.appendChild(td);
            });
            subTable.appendChild(logRow);
          });

          logCell.appendChild(subTable);
        }

        row.appendChild(logCell);
        table.appendChild(row);
      });

      cell.appendChild(table);
    }

    newRow.appendChild(cell);
    if (!currentRow.parentNode) {
      throw new Error("Parent node for current row not found.");
    }
    currentRow.parentNode.insertBefore(newRow, currentRow.nextSibling);
    iconElement.textContent = "⬆️";
  } catch (err) {
    console.error("❌ Error expanding received order:", err);
    alert(`❌ Could not expand received order: ${err.message}`);
  }
}

// Export all names in a single block
export {
  expandLineItemsWithReceipts,
  expandLineItemsWithReceipts as expandLineItems,
  expandLineItemsWithReceipts as expandLineItemsForAudit,
};
END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/expand_line_items.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/shared_filters.js
export async function loadRequesters(selectId) {
  try {
    const res = await fetch("/lookups/requesters");
    const data = await res.json();
    const select = document.getElementById(selectId);
    if (!select) return;

    select.innerHTML = '<option value="All">All</option>';
    data.requesters.forEach(r => {
      const opt = document.createElement("option");
      opt.value = r.name;
      opt.textContent = r.name;
      select.appendChild(opt);
    });
  } catch (err) {
    console.error(`❌ Failed to load requesters for ${selectId}:`, err);
  }
}

export async function loadSuppliers(selectId) {
  try {
    const res = await fetch("/lookups/suppliers");
    const data = await res.json();
    const select = document.getElementById(selectId);
    if (!select) return;

    select.innerHTML = '<option value="All">All</option>';
    data.suppliers.forEach(s => {
      const opt = document.createElement("option");
      opt.value = s.name;
      opt.textContent = s.name;
      select.appendChild(opt);
    });
  } catch (err) {
    console.error(`❌ Failed to load suppliers for ${selectId}:`, err);
  }
}

export async function loadRequisitioners(selectId) {
  try {
    const res = await fetch("/lookups/requisitioners");
    const data = await res.json();
    const select = document.getElementById(selectId);
    if (!select) return;

    select.innerHTML = '<option value="All">All</option>';
    data.forEach(r => {
      const opt = document.createElement("option");
      opt.value = r.name;
      opt.textContent = r.name;
      select.appendChild(opt);
    });
  } catch (err) {
    console.error(`❌ Failed to load requisitioners for ${selectId}:`, err);
  }
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/shared_filters.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/order_note_modal.js
export function showOrderNoteModal(note, orderId, onSaveCallback) {
    const modal = createBaseModal();
    const title = document.createElement("h3");
    title.textContent = "Order Note";
    modal.inner.appendChild(title);
  
    const textarea = document.createElement("textarea");
    textarea.value = note;
    textarea.style.width = "100%";
    textarea.style.height = "150px";
    textarea.style.resize = "vertical";
    modal.inner.appendChild(textarea);
  
    const saveBtn = document.createElement("button");
    saveBtn.textContent = "Save";
    saveBtn.style.marginTop = "1rem";
    saveBtn.style.marginRight = "0.5rem";
    saveBtn.style.padding = "0.5rem 1rem";
    saveBtn.style.border = "none";
    saveBtn.style.cursor = "pointer";
    saveBtn.style.background = "#4CAF50";
    saveBtn.style.color = "white";
  
    saveBtn.onclick = async () => {
        const newNote = textarea.value;
        console.log(`Saving order note for order ${orderId}:`, newNote);
        try {
            const res = await fetch(`/orders/save_note/${orderId}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ order_note: newNote })
            });

            console.log(`Update order note response status: ${res.status}`);
            if (!res.ok) {
                const errorText = await res.text();
                throw new Error(`Failed to update order note: ${res.status} - ${errorText}`);
            }
            const data = await res.json();
            console.log("Update order note response:", data);
            if (data.message !== "Order note updated successfully") {
                throw new Error(`Unexpected response: ${data.message}`);
            }
            alert("✅ Order note updated!");
            if (onSaveCallback) {
                onSaveCallback(newNote); // Call the callback to update the note in the DOM
            }
            document.body.removeChild(modal.container);
        } catch (err) {
            console.error("Error saving order note:", err.message);
            alert(`❌ Failed to save order note: ${err.message}`);
        }
    };
  
    modal.inner.appendChild(saveBtn);
  
    const closeBtn = document.createElement("button");
    closeBtn.textContent = "Close";
    closeBtn.style.marginTop = "1rem";
    closeBtn.style.padding = "0.5rem 1rem";
    closeBtn.style.border = "none";
    closeBtn.style.cursor = "pointer";
    closeBtn.style.background = "#ccc";
    closeBtn.onclick = () => document.body.removeChild(modal.container);
  
    modal.inner.appendChild(closeBtn);
  
    document.body.appendChild(modal.container);
  }
  
  export function showSupplierNoteModal(note) {
    console.log("Displaying supplier note:", note);
    const modal = createBaseModal();
    const title = document.createElement("h3");
    title.textContent = "Note to Supplier";
    modal.inner.appendChild(title);
  
    const noteDisplay = document.createElement("p");
    // Replace line breaks with <br> for HTML rendering
    const formattedNote = note ? note.replace(/\n/g, '<br>') : "Empty note";
    noteDisplay.innerHTML = formattedNote;
    modal.inner.appendChild(noteDisplay);
  
    const closeBtn = document.createElement("button");
    closeBtn.textContent = "Close";
    closeBtn.style.marginTop = "1rem";
    closeBtn.style.padding = "0.5rem 1rem";
    closeBtn.style.border = "none";
    closeBtn.style.cursor = "pointer";
    closeBtn.style.background = "#ccc";
    closeBtn.onclick = () => document.body.removeChild(modal.container);
  
    modal.inner.appendChild(closeBtn);
  
    document.body.appendChild(modal.container);
  }
  
  function createBaseModal() {
    const container = document.createElement("div");
    container.style.position = "fixed";
    container.style.top = "0";
    container.style.left = "0";
    container.style.width = "100vw";
    container.style.height = "100vh";
    container.style.backgroundColor = "rgba(0,0,0,0.5)";
    container.style.display = "flex";
    container.style.alignItems = "center";
    container.style.justifyContent = "center";
    container.style.zIndex = "9999";
  
    const inner = document.createElement("div");
    inner.style.backgroundColor = "white";
    inner.style.padding = "1.5rem";
    inner.style.borderRadius = "8px";
    inner.style.width = "90%";
    inner.style.maxWidth = "500px";
    inner.style.maxHeight = "80vh";
    inner.style.overflowY = "auto";
    inner.style.fontFamily = "Arial, sans-serif";
    inner.style.position = "relative";
  
    const close = document.createElement("button");
    close.textContent = "✖";
    close.style.position = "absolute";
    close.style.top = "10px";
    close.style.right = "10px";
    close.style.background = "none";
    close.style.border = "none";
    close.style.fontSize = "1.2rem";
    close.style.cursor = "pointer";
    close.onclick = () => document.body.removeChild(container);
  
    inner.appendChild(close);
    container.appendChild(inner);
  
    return { container, inner };
  }
END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/order_note_modal.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/utils.js
// Logs messages to the server
export async function logToServer(level, message, details = {}) {
  try {
    await fetch("/log", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify({ level, message, details })
    });
  } catch (error) {
    console.error("Failed to log to server:", error);
  }
}

/**
 * Enables fuzzy search on the description part of a select element.
 * Assumes each <option> includes `data-description` for filtering.
 * 
 * @param {string} selectId - The ID of the <select> element.
 */
export function enableFuzzySearch(selectId) {
  const selectEl = document.getElementById(selectId);
  if (!selectEl || selectEl.tagName !== "SELECT") return;

  const originalOptions = Array.from(selectEl.options);

  const input = document.createElement("input");
  input.type = "text";
  input.placeholder = "Search description...";
  input.style.marginBottom = "0.5rem";
  input.style.width = "100%";
  input.style.padding = "0.25rem";
  input.style.fontSize = "0.9rem";

  selectEl.parentNode.insertBefore(input, selectEl);

  input.addEventListener("input", () => {
    const query = input.value.toLowerCase();
    selectEl.innerHTML = "";

    const matched = originalOptions.filter(opt => {
      const desc = opt.dataset.description || opt.textContent;
      return desc.toLowerCase().includes(query);
    });

    matched.forEach(opt => selectEl.appendChild(opt));
  });

  selectEl.addEventListener("change", () => {
    input.value = "";
    input.dispatchEvent(new Event("input"));
  });
}

export async function populateDropdown(endpoint, selectId, hideDefault = false) {
  try {
    const res = await fetch(endpoint);
    const data = await res.json();
    const select = document.getElementById(selectId);
    if (!select) return;

    if (!hideDefault) {
      select.innerHTML = '<option value="">Select...</option>';
    } else {
      select.innerHTML = "";
    }

    const key = Object.keys(data)[0];
    const items = Array.isArray(data[key]) ? data[key] : data;

    items.forEach(item => {
      const opt = document.createElement("option");
      opt.value = item.id;
      opt.textContent = item.name;
      select.appendChild(opt);
    });
  } catch (err) {
    console.error(`❌ Failed to load dropdown from ${endpoint}:`, err);
  }
}


END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/utils.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/receive_modal.js
export function showReceiveModal(orderId, orderNumber) {
  console.log(`Opening receive modal for order ID: ${orderId}, Order Number: ${orderNumber}`);
  fetch(`/orders/api/items_for_order/${orderId}`)
    .then(res => {
      console.log(`Fetch response status for items: ${res.status}`);
      if (!res.ok) {
        return res.text().then(errorText => {
          throw new Error(`Failed to fetch items: ${res.status} - ${errorText}`);
        });
      }
      return res.json();
    })
    .then(data => {
      console.log("Fetched items for receive modal:", data);
      const modal = document.createElement("div");
      modal.className = "receive-modal";
      modal.style = `
        position: fixed;
        top: 5%;
        left: 50%;
        transform: translateX(-50%);
        width: 80%;
        max-height: 80%;
        overflow-y: auto;
        background: white;
        border: 1px solid #ccc;
        padding: 2rem;
        box-shadow: 0 0 20px rgba(0,0,0,0.2);
        z-index: 9999;
      `;

      const closeBtn = document.createElement("button");
      closeBtn.textContent = "X";
      closeBtn.style = "float:right; font-weight:bold; cursor:pointer;";
      closeBtn.onclick = () => document.body.removeChild(modal);

      const title = document.createElement("h3");
      title.textContent = `Mark Order #${orderNumber} as Received`;

      // --- Add receipt date input ---
      const dateLabel = document.createElement("label");
      dateLabel.textContent = "Receipt Date:";
      dateLabel.style = "margin-right: 1rem; font-weight: bold;";

      const dateInput = document.createElement("input");
      dateInput.type = "date";
      dateInput.required = true;
      dateInput.valueAsDate = new Date();

      const dateContainer = document.createElement("div");
      dateContainer.style = "margin-bottom: 1rem;";
      dateContainer.appendChild(dateLabel);
      dateContainer.appendChild(dateInput);
      modal.appendChild(dateContainer);

      const table = document.createElement("table");
      table.className = "receive-modal-table";

      const header = document.createElement("tr");
      [
        "Item Code",
        "Description",
        "Project",
        "Qty Ordered",
        "Qty Received to Date",
        "Price",
        "Total",
        "Qty Received Now"
      ].forEach(h => {
        const th = document.createElement("th");
        th.textContent = h;
        th.style.border = "1px solid #ccc";
        header.appendChild(th);
      });
      table.appendChild(header);

      const inputs = [];

      if (!data.items || data.items.length === 0) {
        console.log("No items found for this order");
        const row = document.createElement("tr");
        const cell = document.createElement("td");
        cell.colSpan = 8;
        cell.textContent = "No items found for this order.";
        row.appendChild(cell);
        table.appendChild(row);
      } else {
        data.items.forEach(item => {
          const row = document.createElement("tr");
          const total = (item.qty_ordered || 0) * (item.price || 0);
          const receivedToDate = item.qty_received || 0;
          const qtyRemaining = Math.max((item.qty_ordered || 0) - receivedToDate, 0);

          [
            item.item_code || "N/A",
            item.item_description || "N/A",
            item.project || "N/A",
            item.qty_ordered || 0,
            receivedToDate,
            item.price != null ? `R${item.price.toFixed(2)}` : "R0.00",
            total != null ? `R${total.toFixed(2)}` : "R0.00"
          ].forEach(text => {
            const td = document.createElement("td");
            td.textContent = text;
            td.style.border = "1px solid #ccc";
            row.appendChild(td);
          });

          const qtyInput = document.createElement("input");
          qtyInput.type = "number";
          qtyInput.min = 0;
          qtyInput.step = 1;
          qtyInput.value = qtyRemaining;
          qtyInput.style.width = "80px";

          inputs.push({ itemId: item.id || item.item_id, input: qtyInput });

          const inputTd = document.createElement("td");
          inputTd.style.border = "1px solid #ccc";
          inputTd.appendChild(qtyInput);
          row.appendChild(inputTd);

          table.appendChild(row);
        });
      }

      const submitBtn = document.createElement("button");
      submitBtn.textContent = "Mark as Received";
      submitBtn.style = "margin-top:1rem; padding:0.5rem 1rem; cursor:pointer;";
      submitBtn.onclick = async () => {
        const receiptDate = dateInput.value;
        if (!receiptDate) {
          alert("❌ Please select a receipt date.");
          return;
        }

        const payload = {
          receipt_date: receiptDate,
          items: inputs.map(i => ({
            item_id: i.itemId,
            received_qty: parseFloat(i.input.value) || 0
          }))
        };
        console.log("Submitting receive payload:", payload);

        try {
          const res = await fetch(`/orders/receive/${orderId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload)
          });
          console.log(`Receive endpoint response status: ${res.status}`);
          if (!res.ok) {
            const err = await res.json();
            throw new Error(JSON.stringify(err));
          }
          const data = await res.json();
          console.log("Receive response:", data);
          alert("✅ Order marked as received");
          document.body.removeChild(modal);
          location.reload();
        } catch (err) {
          console.error("❌ Failed to mark as received:", err);
          alert(`❌ Failed to mark as received: ${err.message}`);
        }
      };

      modal.appendChild(closeBtn);
      modal.appendChild(title);
      modal.appendChild(table);
      modal.appendChild(submitBtn);
      document.body.appendChild(modal);
    })
    .catch(err => {
      console.error("❌ Error loading receive modal:", err);
      alert(`❌ Could not open receive modal: ${err.message}`);
    });
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/components/receive_modal.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/audio/Alert.wav
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/audio/Alert.wav

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/audio/Alert.wav
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/audio/.DS_Store
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/audio/.DS_Store

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/audio/.DS_Store
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/.DS_Store
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/.DS_Store

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/.DS_Store
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/manifest.json
{
  "name": "URC Authorisations",
  "short_name": "URC Auth",
  "start_url": "/mobile/authorisations",
  "display": "standalone",
  "background_color": "#f4f6f8",
  "theme_color": "#0066cc",
  "icons": [
    {
      "src": "/static/images/universal_logo.jpg",
      "type": "image/jpeg",
      "sizes": "192x192"
    }
  ]
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/manifest.json
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/service-worker.js
const CACHE_NAME = "urc-mobile-cache-v1";
const urlsToCache = [
  "/mobile/authorisations",
  "/static/mobile/css/authorisations.css",
  "/static/mobile/js/authorisations_screen/main.js",
  "/static/mobile/manifest.json"
];

self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then(cache => cache.addAll(urlsToCache))
  );
});

self.addEventListener("fetch", (event) => {
  event.respondWith(
    caches.match(event.request).then(response => response || fetch(event.request))
  );
});

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/service-worker.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/css/mobile_authorisations.css
/* File: frontend/static/mobile/css/mobile_authorisations.css */

body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, sans-serif;
  margin: 0;
  padding: 1rem;
  background-color: #f0f2f5;
  color: #333;
}

h2 {
  font-size: 1.2rem;
  text-align: center;
  margin-bottom: 1.5rem;
}

.mobile-container {
  max-width: 480px;
  margin: 0 auto;
  padding-top: 3.5rem; /* ✅ Pushes down content to avoid overlap */
}

/* ORDER LIST CONTAINER */
.order-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

/* INDIVIDUAL ORDER BLOCK */
.mobile-order-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #fff;
  padding: 1rem;
  border-radius: 12px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.08);
  flex-wrap: wrap;
}

/* ORDER DETAILS SECTION */
.info-block {
  display: flex;
  flex-direction: column;
  gap: 0.4rem;
  font-size: 0.95rem;
  font-weight: 500;
  min-width: 140px;
}

/* BUTTONS SECTION */
.button-block {
  display: flex;
  gap: 0.6rem;
  flex-wrap: wrap;
  justify-content: flex-end;
  margin-top: 0.6rem; 
}

/* GENERAL BUTTON STYLING */
button {
  padding: 0.4rem 0.8rem;
  font-size: 0.9rem;
  font-weight: 600;
  border: none;
  border-radius: 6px;
  background-color: #007bff;
  color: white;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
}

button:hover:not(:disabled) {
  background-color: #0056b3;
}

button:disabled {
  background-color: #ccc;
  cursor: default;
}

/* TOAST NOTIFICATION */
.toast {
  position: fixed;
  bottom: 2rem;
  left: 50%;
  transform: translateX(-50%);
  padding: 0.8rem 1.2rem;
  border-radius: 8px;
  font-size: 0.9rem;
  color: white;
  z-index: 1000;
  box-shadow: 0 0 10px rgba(0,0,0,0.15);
}

.toast-success {
  background-color: #28a745;
}

.toast-error {
  background-color: #dc3545;
}

/* REFRESH BUTTON */
.refresh-button {
  position: fixed;
  top: 1rem;
  right: 1rem;
  background-color: #444;
  color: white;
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 6px;
  font-size: 0.9rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  z-index: 999;
  cursor: pointer;
}

/* INSTALL APP BUTTON */
.install-button {
  position: fixed;
  bottom: 1rem;
  right: 1rem;
  padding: 0.6rem 1.2rem;
  background-color: #0066cc;
  color: white;
  border: none;
  border-radius: 6px;
  font-size: 0.95rem;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
  z-index: 999;
  cursor: pointer;
}

/* MODALS */
#confirmation-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}

#confirmation-modal div {
  background: #f0f4ff;
  padding: 1.5rem 2rem;
  border-radius: 10px;
  text-align: center;
  font-size: 1rem;
  box-shadow: 0 4px 10px rgba(0,0,0,0.2);
}

.modal {
  position: fixed;
  inset: 0;
  background-color: rgba(0,0,0,0.4);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}

.modal-content {
  background: white;
  padding: 20px;
  border-radius: 10px;
  max-width: 80%;
  text-align: center;
  position: relative;
}

.modal .close {
  position: absolute;
  top: 10px;
  right: 16px;
  font-size: 24px;
  font-weight: bold;
  cursor: pointer;
}

/* LOGIN FORM STYLING */
.login-form {
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
  margin-top: 1rem;
}

.login-form label {
  font-weight: 600;
}

.login-form input {
  padding: 0.5rem;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 6px;
}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/css/mobile_authorisations.css
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/js/.DS_Store
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/js/.DS_Store

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/js/.DS_Store
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/js/authorisations_screen/mobile_main.js
// File: frontend/static/js/mobile_main.js

import { setupAuthorisationUI } from "/static/js/authorisations_per_user.js";
import { showMobilePDFModal } from "/static/js/components/mobile_pdf_modal.js";

console.log("📱 Mobile authorisation screen loaded");

function showToast(message, success = true) {
  const toast = document.createElement("div");
  toast.textContent = message;
  toast.className = success ? "toast toast-success" : "toast toast-error";
  document.body.appendChild(toast);
  setTimeout(() => toast.remove(), 2500);
}

function showConfirmationModal(message) {
  const existing = document.getElementById("confirmation-modal");
  if (existing) existing.remove();

  const backdrop = document.createElement("div");
  backdrop.id = "confirmation-modal";

  const inner = document.createElement("div");
  inner.textContent = message;

  backdrop.appendChild(inner);
  document.body.appendChild(backdrop);

  setTimeout(() => {
    backdrop.remove();
  }, 2500);
}

let currentUser = null;

function setupUI(user) {
  currentUser = user;  // Store for refresh
  setupAuthorisationUI({
    mountPointId: "order-list",
    user,
    isMobile: true,
    onAuthorised: (order) => {
      showConfirmationModal(`${user.username}, you authorised order ${order.order_number}.`);
    },
    onError: (msg) => {
      showToast(msg, false);
    },
    showPDF: (orderId) => showMobilePDFModal(orderId)
  });
}

document.addEventListener("DOMContentLoaded", async () => {
  document.querySelector(".back-button")?.remove();

  const refreshBtn = document.createElement("button");
  refreshBtn.textContent = "🔄 Load Orders";
  refreshBtn.className = "refresh-button";
  refreshBtn.onclick = () => {
    if (currentUser) setupUI(currentUser);
  };
  document.body.appendChild(refreshBtn);

  await fetchUserAndSetup();
});

async function fetchUserAndSetup() {
  try {
    const res = await fetch("/mobile/get_user_info");
    const user = await res.json();
    currentUser = user;

    const heading = document.querySelector("h2");
    if (heading) {
      heading.innerHTML = `<strong>${user.username}</strong>, <strong>please review the orders below which are waiting for you to authorise:</strong>`;
    }

    setupUI(user);
  } catch (err) {
    console.error("❌ Failed to fetch user info:", err);
    showToast("Failed to load user session.", false);
  }
}

let deferredPrompt;

window.addEventListener("beforeinstallprompt", (e) => {
  e.preventDefault();
  deferredPrompt = e;

  const installBtn = document.createElement("button");
  installBtn.textContent = "📲 Install App";
  installBtn.className = "install-button";

  installBtn.onclick = async () => {
    installBtn.remove();
    if (deferredPrompt) {
      deferredPrompt.prompt();
      const choice = await deferredPrompt.userChoice;
      if (choice.outcome === "accepted") {
        showToast("App installed!");
      } else {
        showToast("Install dismissed", false);
      }
      deferredPrompt = null;
    }
  };

  document.body.appendChild(installBtn);
});

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/mobile/js/authorisations_screen/mobile_main.js
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/access_denied.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Access Denied</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f8f9fa;
      color: #333;
      padding: 2rem;
      text-align: center;
    }
    h1 {
      font-size: 2rem;
      margin-bottom: 1rem;
      color: #b30000;
    }
    p {
      font-size: 1rem;
    }
  </style>
</head>
<body>
  <h1>🚫 Access Denied</h1>
  <p>You do not have permission to view this page.</p>
</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/access_denied.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/cod_orders.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>COD Orders - Universal Recycling</title>
  <link rel="icon" href="data:,">
  <link rel="stylesheet" href="/static/css/style.css" />
</head>
<body>

  {% include "_tab_nav.html" %}

  <h2>COD Orders</h2>

  <div class="filters">
    <label for="start-date">Start Date:</label>
    <input type="date" id="start-date">
    <label for="end-date">End Date:</label>
    <input type="date" id="end-date">
    <label for="filter-requester">Requester:</label>
    <select id="filter-requester">
      <option value="All">All</option>
    </select>
    <label for="filter-supplier">Supplier:</label>
    <select id="filter-supplier">
      <option value="All">All</option>
    </select>
    <label for="filter-status">Status:</label>
    <select id="filter-status">
      <option value="All">All</option>
      <option value="COD">COD</option>
      <option value="Waiting for Approval">Waiting for Approval</option>
      <option value="Awaiting Authorisation">Awaiting Authorisation</option>
      <option value="Authorised">Authorised</option>
    </select>
    <button id="run-btn">Run</button>
    <button id="clear-btn">Clear</button>
  </div>

  <table>
    <thead>
      <tr>
        <th>Request Date</th>
        <th>Order Number</th>
        <th>Requester</th>
        <th>Supplier</th>
        <th>Total</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="cod-body"></tbody>
  </table>

  <script type="module" src="/static/js/cod_orders.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const path = window.location.pathname;
      const tabButtons = document.querySelectorAll(".tab-buttons button");
      tabButtons.forEach(btn => {
        const target = btn.getAttribute("onclick").match(/location\.href='([^']+)'/)[1];
        if (path.startsWith(target)) {
          btn.classList.add("active");
        }
      });
    });
  </script>

  <!-- COD Payment Modal -->
<div id="cod-payment-modal" class="modal" style="display:none; position: fixed; top: 20%; left: 40%; background: #fff; border: 1px solid #ccc; padding: 20px; z-index: 999;">
  <h3>Mark COD Payment</h3>
  <p id="cod-payment-order-number"></p>

  <label for="cod-amount-paid">Amount Paid:</label>
  <input type="number" id="cod-amount-paid" step="0.01" min="0" />

  <label for="cod-payment-date">Payment Date:</label>
  <input type="date" id="cod-payment-date" />

  <div style="margin-top: 1em;">
    <button id="cod-payment-submit">✅ Submit</button>
    <button onclick="closeCodPaymentModal()">Cancel</button>
  </div>
</div>

</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/cod_orders.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/index.html

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/index.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/home.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Orders Dashboard</title>
  <link rel="stylesheet" href="/static/css/style.css" />
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 2rem;
    }

    .header {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      margin-bottom: 2rem;
    }

    .welcome-message {
      font-size: 1.2rem;
      margin-bottom: 1rem;
    }

    .tab-buttons {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .tab-buttons button {
      background-color: #e0e0e0;
      border: none;
      padding: 0.7rem 1.2rem;
      border-radius: 6px;
      font-size: 1rem;
      cursor: pointer;
      color: black;
      font-weight: 500;
      transition: background-color 0.2s;
    }

    .tab-buttons button:hover {
      background-color: #ccc;
    }

    .tab-buttons button.active {
      background-color: #3367d6;
      color: white;
      font-weight: bold;
    }
  </style>
</head>
<body>

  <div class="header">
    <div class="welcome-message">
      Welcome {{ username | capitalize }} to the <strong>Universal Recycling Purchase Order System</strong>
    </div>
    <div class="tab-buttons">
      <button onclick="location.href='/orders/new'">New Order</button>
      <button onclick="location.href='/orders/pending_orders'">Pending Orders</button>
      <button onclick="location.href='/orders/received_orders'">Received Orders</button>
      <button onclick="location.href='/orders/audit_trail'">Audit Trail</button>
      <button onclick="location.href='/maintenance'">Maintenance</button>
      <button onclick="location.href='/logout'">Logout</button>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const path = window.location.pathname;
      const tabButtons = document.querySelectorAll(".tab-buttons button");

      tabButtons.forEach(btn => {
        const onclick = btn.getAttribute("onclick");
        const match = onclick && onclick.match(/location\.href='([^']+)'/);
        if (match && match[1] && path.startsWith(match[1])) {
          btn.classList.add("active");
        }
      });
    });
  </script>

</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/home.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/.DS_Store
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/.DS_Store

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/.DS_Store
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/partially_delivered.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Partially Delivered Orders</title>
    <link rel="stylesheet" href="/static/css/style.css">
</head>
<body>
    {% include '_tab_nav.html' %}
    <div class="container">
        <h1>Partially Delivered Orders</h1>
        <div class="filters">
            <label>Start Date: <input type="date" id="start-date"></label>
            <label>End Date: <input type="date" id="end-date"></label>
            <label>Requester:
                <select id="filter-requester">
                    <option value="All">All</option>
                </select>
            </label>
            <label>Supplier:
                <select id="filter-supplier">
                    <option value="All">All</option>
                </select>
            </label>
            <label>Status:
                <select id="filter-status">
                    <option value="All">All</option>
                    <option value="Pending">Pending</option>
                    <option value="Awaiting Authorisation">Awaiting Authorisation</option>
                </select>
            </label>
            <button id="run-btn">Run</button>
            <button id="clear-btn">Clear Filters</button>
        </div>
        <table>
            <thead>
                <tr>
                    <th>Created Date</th>
                    <th>Order Number</th>
                    <th>Requester</th>
                    <th>Supplier</th>
                    <th>Total</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="partially-delivered-body"></tbody>
        </table>
    </div>
    <script type="module" src="/static/js/partially_delivered.js"></script>
</body>
</html>
END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/partially_delivered.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/base.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>{% block title %}Universal Recycling{% endblock %}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/static/css/style.css">
</head>
<body>
  <header>
    <!-- Optional: Insert logo or nav here -->
  </header>

  {% include "_tab_nav.html" %}

  <main>
    {% block content %}
    <!-- Page-specific content will go here -->
    {% endblock %}
  </main>

  <footer>
    <!-- Optional: footer if needed -->
  </footer>
</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/base.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/audit_trail.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Audit Trail - Universal Recycling</title>
  <link rel="icon" href="data:,">
  <link rel="stylesheet" href="/static/css/style.css" />
</head>
<body>

  {% include "_tab_nav.html" %}

  <h2>Audit Trail</h2>

  <div class="filters">
    <label for="start-date">Start Date:</label>
    <input type="date" id="start-date">
    <label for="end-date">End Date:</label>
    <input type="date" id="end-date">
    <label for="filter-requester">Requester:</label>
    <select id="filter-requester">
      <option value="All">All</option>
    </select>
    <label for="filter-supplier">Supplier:</label>
    <select id="filter-supplier">
      <option value="All">All</option>
    </select>
    <label for="filter-status">Status:</label>
    <select id="filter-status">
      <option value="All">All</option>
      <option value="Pending">Pending</option>
      <option value="Awaiting Authorisation">Awaiting Authorisation</option>
      <option value="Authorised">Authorised</option>
      <option value="Received">Received</option>
      <option value="Partially Received">Partially Received</option>
      <option value="Cancelled">Cancelled</option>
    </select>
    <button id="run-btn">Run</button>
    <button id="clear-btn">Clear</button>
  </div>

  <table>
    <thead>
      <tr>
        <th>Created Date</th>
        <th>Order Number</th>
        <th>Requester</th>
        <th>Supplier</th>
        <th>Total</th>
        <th>Status</th>
        <th>Last Action</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="audit-body"></tbody>
  </table>

  <script type="module" src="/static/js/audit_trail.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const path = window.location.pathname;
      const tabButtons = document.querySelectorAll(".tab-buttons button");
      tabButtons.forEach(btn => {
        const target = btn.getAttribute("onclick").match(/location\.href='([^']+)'/)[1];
        if (path.startsWith(target)) {
          btn.classList.add("active");
        }
      });
    });
  </script>

</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/audit_trail.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/pdf_template.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Purchase Order: {{ order.order_number or "Preview" }}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      font-size: 14px;
    }
    h1 {
      text-align: center;
      margin-bottom: 1.5rem;
    }
    img.logo {
      width: 140px;
    }
    .header-section {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
    }
    .company-details {
      max-width: 65%;
    }
    .meta {
      margin-top: 1rem;
    }
    .meta p {
      margin: 4px 0;
    }
    .section-title {
      margin-top: 2rem;
      font-weight: bold;
      font-size: 1.1rem;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
    }
    th, td {
      border: 1px solid #000;
      padding: 6px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
    .vat-note {
      margin-top: 1rem;
      font-style: italic;
      font-size: 0.9rem;
    }
    .supplier-note {
      color: red;
      font-weight: bold;
    }
  </style>
</head>
<body>

  <!-- Header -->
  <div class="header-section">
    <img src="{{ logo_path }}" class="logo" />
    <div class="company-details">
      <h1>Purchase Order: {{ order.order_number or "Preview" }}</h1>
      <p><strong>{{ business_details.company_name }}</strong></p>
      <p>
        {{ business_details.address_line1 }}
        {% if business_details.address_line2 %}, {{ business_details.address_line2 }}{% endif %}<br>
        {{ business_details.city }}, {{ business_details.province }} {{ business_details.postal_code }}
      </p>
      <p>Tel: {{ business_details.telephone }}</p>
      <p>Vat No : {{ business_details.vat_number }}</p>
    </div>
  </div>

  <!-- Order Meta Info -->
  <div class="meta">
    <p><strong>Order Date:</strong> {{ order.created_date[:10] if order.created_date else "N/A" }}</p>
    <p><strong>Supplier Name:</strong> {{ order.supplier or "PREVIEW ONLY" }}</p>
  </div>

  <!-- Supplier Note -->
  {% if order.note_to_supplier %}
    <div class="section-title">Note to Supplier:</div>
    <p class="supplier-note">{{ order.note_to_supplier.replace('\n', '<br>') | safe }}</p>
  {% endif %}

  <!-- Line Items -->
  <div class="section-title">Order Items</div>
  <table>
    <thead>
      <tr>
        <th>Item Code</th>
        <th>Item Description</th>
        <th>Qty</th>
        <th>Unit Price</th>
        <th>Total</th>
      </tr>
    </thead>
    <tbody>
      {% for item in items %}
      <tr>
        <td>{{ item.item_code }}</td>
        <td>{{ item.item_description }}</td>
        <td>{{ "%.0f"|format(item.qty_ordered|float) }}</td>
        <td>R{{ "%.2f"|format(item.price|float) }}</td>
        <td>R{{ "%.2f"|format(item.total|float) }}</td>
      </tr>
      {% endfor %}
    </tbody>
  </table>

  <!-- Order Total -->
  <p class="section-title" style="text-align: right;">
    <strong>Order Total: R{{ "%.2f"|format(order.total|float) }}</strong>
  </p>

  <p class="vat-note">All amounts excluding VAT.</p>

</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/pdf_template.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/login.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Login</title>
  <link rel="stylesheet" href="/static/css/style.css" />
  <style>
    body {
      background-color: #f7f9fb;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      font-family: Arial, sans-serif;
    }

    .login-container {
      background: white;
      padding: 2rem 2.5rem;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      width: 320px;
    }

    .login-container h2 {
      margin-bottom: 1.5rem;
      text-align: center;
      font-size: 1.5rem;
    }

    .login-container label {
      display: block;
      margin-bottom: 0.25rem;
      font-weight: bold;
    }

    .login-container input {
      width: 100%;
      padding: 0.5rem;
      margin-bottom: 1.25rem;
      border: 1px solid #ccc;
      border-radius: 6px;
      font-size: 1rem;
    }

    .login-container button {
      width: 100%;
      padding: 0.75rem;
      background-color: #005bbb;
      color: white;
      border: none;
      border-radius: 6px;
      font-size: 1rem;
      cursor: pointer;
    }

    .login-container button:hover {
      background-color: #004999;
    }

    #login-error {
      color: red;
      text-align: center;
      font-size: 0.9rem;
      margin-top: -0.75rem;
      margin-bottom: 1rem;
      min-height: 1rem;
    }
  </style>
</head>
<body>
  <div class="login-container">
    <h2>Login</h2>
    <form id="login-form" novalidate>
      <label for="username">Username</label>
      <input type="text" id="username" name="username" autocomplete="username" required placeholder="Enter your username" />

      <label for="password">Password</label>
      <input type="password" id="password" name="password" autocomplete="current-password" required placeholder="Enter your password" />

      <div id="login-error" role="alert"></div>
      <button type="submit">Login</button>
    </form>
  </div>
  <script src="/static/js/login.js"></script>
</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/login.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/new_requisition.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>New Requisition</title>
  <link rel="stylesheet" href="/static/css/style.css">
  <script type="module" src="/static/js/new_requisition_main.js" defer></script>
</head>

<body>
  {% include "_tab_nav.html" %}

  <div class="container">
    <h2>📦 New Requisition</h2>

    <!-- Requisition Header -->
    <div class="form-group">
      <label for="requisitioner">Requisitioner:</label>
      <select id="requisitioner" required></select>
    </div>

    <div class="form-group">
      <label for="requisition-date">Date of Requisition:</label>
      <input type="date" id="requisition-date" readonly />
    </div>

    <div class="form-group">
      <label for="requisition-number">Requisition Number:</label>
      <input type="text" id="requisition-number" readonly />
    </div>

    <div class="form-group">
      <label for="requisition-note">Requisition Note:</label>
      <textarea id="requisition-note" rows="3" placeholder="Optional note..."></textarea>
    </div>

    <!-- Line Items Table -->
    <table id="requisition-table">
      <thead>
        <tr>
          <th>Description</th>
          <th>Quantity</th>
          <th></th>
        </tr>
      </thead>
      <tbody id="line-items-body">
        <!-- JS will populate rows -->
      </tbody>
    </table>

    <!-- Aligned Buttons -->
    <div class="form-actions" style="display: flex; gap: 1rem; margin-top: 1.5rem;">
      <button id="add-line" type="button">➕ Add Line</button>
      <button id="preview-pdf" type="button">📄 View PDF</button>
      <button id="submit-requisition" type="button">✅ Submit Requisition</button>
    </div>

    <!-- Message Log -->
    <div id="requisition-log" class="message-log" style="margin-top: 1rem;"></div>
  </div>
</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/new_requisition.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/pending_requisitions.html
{% extends "base.html" %}
{% block title %}Pending Requisitions{% endblock %}

{% block content %}
<h2>Pending Requisitions</h2>

<div class="filters" style="margin-bottom: 1.5rem;">
  <div class="filter-group">
    <label for="start-date">Start Date:</label>
    <input type="date" id="start-date">
  </div>
  <div class="filter-group">
    <label for="end-date">End Date:</label>
    <input type="date" id="end-date">
  </div>
  <div class="filter-group">
    <label for="filter-requisitioner">Requisitioner:</label>
    <select id="filter-requisitioner">
      <option value="All">All</option>
    </select>
  </div>
  <div class="filter-group">
    <label for="filter-status">Status:</label>
    <select id="filter-status">
      <option value="All">All</option>
      <option value="submitted">Submitted</option>
      <option value="ordered">Ordered</option>
      <option value="archived">Archived</option>
    </select>
  </div>
  <div class="filter-actions">
    <button id="run-btn">Run</button>
    <button id="clear-btn">Clear</button>
  </div>
</div>

<table>
  <thead>
    <tr>
      <th>Date</th>
      <th>Requisition #</th>
      <th>Requisitioner</th>
      <th>Project</th>
      <th>Quantity</th>
      <th>Description</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody id="pending-requisition-body">
    <tr><td colspan="7">Loading...</td></tr>
  </tbody>
</table>

<script type="module" src="/static/js/pending_requisitions.js"></script>
{% endblock %}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/pending_requisitions.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/print_template.html
<!DOCTYPE html>
<html>
<head>
    <title>Printable Order - {{ order.order_number }}</title>
    <meta charset="UTF-8">
</head>
<body>
    <h1>Order {{ order.order_number }}</h1>
    <p><strong>Status:</strong> {{ order.status }}</p>
    <p><strong>Created Date:</strong> {{ order.created_date }}</p>
    <p><strong>Received Date:</strong> {{ order.received_date or "N/A" }}</p>
    <p><strong>Total:</strong> {{ order.total }}</p>
    <p><strong>Requester:</strong> {{ order.requester }}</p>
    <p><strong>Order Note:</strong> {{ order.order_note or "None" }}</p>
    <p><strong>Supplier Note:</strong> {{ order.supplier_note or "None" }}</p>

    <h2>Line Items</h2>
    <table border="1" cellpadding="6" cellspacing="0">
        <thead>
            <tr>
                <th>Item Code</th>
                <th>Description</th>
                <th>Project</th>
                <th>Qty Ordered</th>
                <th>Price</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            {% for item in items %}
            <tr>
                <td>{{ item.item_code }}</td>
                <td>{{ item.item_description }}</td>
                <td>{{ item.project }}</td>
                <td>{{ item.qty_ordered }}</td>
                <td>{{ item.price }}</td>
                <td>{{ item.total }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/print_template.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/received_orders.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Received Orders - Universal Recycling</title>
  <link rel="icon" href="data:,">
  <link rel="stylesheet" href="/static/css/style.css" />
</head>
<body>

  {% include "_tab_nav.html" %}

  <h2>Received Orders</h2>

  <div class="filters">
    <label for="start-date">Start Date:</label>
    <input type="date" id="start-date">
    <label for="end-date">End Date:</label>
    <input type="date" id="end-date">
    <label for="filter-requester">Requester:</label>
    <select id="filter-requester">
      <option value="All">All</option>
    </select>
    <label for="filter-supplier">Supplier:</label>
    <select id="filter-supplier">
      <option value="All">All</option>
    </select>
    <label for="filter-status">Status:</label>
    <select id="filter-status">
      <option value="All">All</option>
      <option value="Received">Received</option>
      <option value="Partially Received">Partially Received</option>
    </select>
    <button id="run-btn">Run</button>
    <button id="clear-btn">Clear</button>
  </div>

  <table>
    <thead>
      <tr>
        <th>Request Date</th>
        <th>Order Number</th>
        <th>Requester</th>
        <th>Supplier</th>
        <th>Total</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="received-body"></tbody>
  </table>

  <script type="module" src="/static/js/received_orders.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const path = window.location.pathname;
      const tabButtons = document.querySelectorAll(".tab-buttons button");
      tabButtons.forEach(btn => {
        const target = btn.getAttribute("onclick").match(/location\.href='([^']+)'/)[1];
        if (path.startsWith(target)) {
          btn.classList.add("active");
        }
      });
    });
  </script>

</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/received_orders.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/_tab_nav.html
<div class="tab-nav">
  <a href="/home">Home</a>
  <a href="/requisitions/new">New Requisition</a>
  <a href="/requisitions/pending_requisitions">Pending Requisitions</a>
  <a href="/orders/new">New Order</a>
  <a href="/orders/pending_orders">Pending Orders</a>
  <a href="/orders/received_orders">Received Orders</a>
  <a href="/orders/partially_delivered">Partially Delivered Orders</a>
  <a href="/orders/authorisations_per_user">My Authorisations</a>
  <a href="/orders/cod_orders">COD Orders</a>
  <a href="/orders/audit_trail">Audit Trail</a>
  <a href="/maintenance">Maintenance</a>
  <a href="/logout">Logout</a>
  
</div>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/_tab_nav.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/pending_orders.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pending Orders - Universal Recycling</title>
  <link rel="icon" href="data:,">
  <link rel="stylesheet" href="/static/css/style.css" />
</head>
<body>

  {% include "_tab_nav.html" %}

  <h2>Pending Orders</h2>

  <div class="filters">
    <label for="start-date">Start Date:</label>
    <input type="date" id="start-date">
    <label for="end-date">End Date:</label>
    <input type="date" id="end-date">
    <label for="filter-requester">Requester:</label>
    <select id="filter-requester">
      <option value="All">All</option>
    </select>
    <label for="filter-supplier">Supplier:</label>
    <select id="filter-supplier">
      <option value="All">All</option>
    </select>
    <label for="filter-status">Status:</label>
    <select id="filter-status">
      <option value="All">All</option>
      <option value="Pending">Pending</option>
      <option value="Waiting for Approval">Waiting for Approval</option>
      <option value="Awaiting Authorisation">Awaiting Authorisation</option>
      <option value="Authorised">Authorised</option>
    </select>
    <button id="run-btn">Run</button>
    <button id="clear-btn">Clear</button>
  </div>

  <table>
    <thead>
      <tr>
        <th>Request Date</th>
        <th>Order Number</th>
        <th>Requester</th>
        <th>Supplier</th>
        <th>Total</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="pending-body"></tbody>
  </table>

  <script type="module" src="/static/js/pending_orders.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const path = window.location.pathname;
      const tabButtons = document.querySelectorAll(".tab-buttons button");
      tabButtons.forEach(btn => {
        const target = btn.getAttribute("onclick").match(/location\.href='([^']+)'/)[1];
        if (path.startsWith(target)) {
          btn.classList.add("active");
        }
      });
    });
  </script>

</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/pending_orders.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/maintenance.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Maintenance - Universal Recycling</title>
  <link rel="stylesheet" href="/static/css/style.css" />
</head>
<body>

  {% include "_tab_nav.html" %}

  <h2>Maintenance</h2>

  <div class="tabs">
    <div class="tab active" data-tab="users">Users</div>
    <div class="tab" data-tab="requesters">Requesters</div>
    <div class="tab" data-tab="items">Items</div>
    <div class="tab" data-tab="suppliers">Suppliers</div>
    <div class="tab" data-tab="projects">Projects</div>
    <div class="tab" data-tab="requisitioners">Requisitioners</div>
    <div class="tab" data-tab="settings">Settings</div>
    <div class="tab" data-tab="business_details">Business Details</div>
  </div>

  <!-- Users -->
  <div id="users" class="tab-content active">
    <form class="form-group" onsubmit="event.preventDefault();">
      <input type="hidden" id="user-id" />
      <label for="user-username">Username:</label>
      <input type="text" id="user-username" autocomplete="username" />
      <label for="user-password">Password:</label>
      <input type="password" id="user-password" autocomplete="current-password" />
      <label for="user-rights">Rights:</label>
      <select id="user-rights">
        <option value="edit">Edit</option>
        <option value="view">View Only</option>
        <option value="admin">Admin</option>
      </select>
      <label for="user-auth-threshold-band">Authorization Threshold Band:</label>
      <select id="user-auth-threshold-band">
        <option value="">Not Set</option>
        <option value="1">Band 1</option>
        <option value="2">Band 2</option>
        <option value="3">Band 3</option>
        <option value="4">Band 4</option>
      </select>
      <button type="submit">Add User</button>
      <button type="button" id="cancel-user-edit" style="display: none;">Cancel</button>
    </form>
    <table>
      <thead><tr><th>Username</th><th>Rights</th><th>Threshold Band</th><th>Actions</th></tr></thead>
      <tbody id="users-table"></tbody>
    </table>
  </div>

  <!-- Requesters -->
  <div id="requesters" class="tab-content">
    <div class="form-group">
      <label for="requester-name">Name:</label>
      <input type="text" id="requester-name" />
      <button id="add-requester-button">Add Requester</button>
    </div>
    <table>
      <thead><tr><th>Name</th><th>Actions</th></tr></thead>
      <tbody id="requesters-table"></tbody>
    </table>
  </div>

  <!-- Items -->
  <div id="items" class="tab-content">
    <div class="form-group">
      <label for="item-code">Item Code:</label>
      <input type="text" id="item-code" />
      <label for="item-description">Description:</label>
      <input type="text" id="item-description" />
      <button id="add-item-button">Add Item</button>
    </div>
    <div class="form-group">
      <hr style="margin-top: 1.5rem; margin-bottom: 1rem;" />
      <label for="items-csv-upload">Import Items CSV:</label>
      <input type="file" id="items-csv-upload" accept=".csv" />
      <button id="import-items-button">Import CSV</button>
    </div>
    <table>
      <thead><tr><th>Item Code</th><th>Description</th><th>Actions</th></tr></thead>
      <tbody id="items-table"></tbody>
    </table>
  </div>

  <!-- Suppliers -->
  <div id="suppliers" class="tab-content">
    <div class="form-group">
      <h4>Add/Edit Supplier</h4>
      <form id="supplier-form" onsubmit="event.preventDefault();">
        <input type="hidden" id="supplier-id" />
        <label for="supplier-name">Supplier Name:</label>
        <input type="text" id="supplier-name" required />
        <button type="submit">Add Supplier</button>
        <button type="button" id="cancel-supplier-edit" style="display: none;">Cancel</button>
      </form>
    </div>
    <div class="form-group">
      <hr style="margin-top: 1.5rem; margin-bottom: 1rem;" />
      <label for="suppliers-csv-upload">Import Suppliers CSV:</label>
      <input type="file" id="suppliers-csv-upload" accept=".csv" />
      <button id="import-suppliers-button">Import CSV</button>
    </div>
    <table>
      <thead><tr><th>Supplier Name</th><th>Actions</th></tr></thead>
      <tbody id="suppliers-table"></tbody>
    </table>
  </div>

  <!-- Projects -->
  <div id="projects" class="tab-content">
    <div class="form-group">
      <label for="project-code">Project Code:</label>
      <input type="text" id="project-code" />
      <label for="project-name">Project Name:</label>
      <input type="text" id="project-name" />
      <button id="add-project-button">Add Project</button>
    </div>
    <div class="form-group">
      <hr style="margin-top: 1.5rem; margin-bottom: 1rem;" />
      <label for="projects-csv-upload">Import Projects CSV:</label>
      <input type="file" id="projects-csv-upload" accept=".csv" />
      <button id="import-projects-button">Import CSV</button>
    </div>
    <table>
      <thead><tr><th>Project Code</th><th>Project Name</th><th>Actions</th></tr></thead>
      <tbody id="projects-table"></tbody>
    </table>
  </div>

  <!-- Requisitioners -->
<div id="requisitioners" class="tab-content">
  <div class="form-group">
    <label for="requisitioner-name">Name:</label>
    <input type="text" id="requisitioner-name" />
    <button id="add-requisitioner-button">Add Requisitioner</button>
  </div>
  <table>
    <thead><tr><th>Name</th><th>Actions</th></tr></thead>
    <tbody id="requisitioners-table"></tbody>
  </table>
</div>

  <!-- Settings -->
  <div id="settings" class="tab-content">
    <div class="form-group">
      <label for="order-number-start">Start Order Number:</label>
      <input type="text" id="order-number-start" />
      <label for="requisition-number-start">Start Requisition Number:</label>
      <input type="text" id="requisition-number-start" placeholder="e.g. REQ1000" />
      <label for="auth-threshold-1">Authorization Threshold 1 (R):</label>
      <input type="number" id="auth-threshold-1" step="0.01" />
      <label for="auth-threshold-2">Authorization Threshold 2 (R):</label>
      <input type="number" id="auth-threshold-2" step="0.01" />
      <label for="auth-threshold-3">Authorization Threshold 3 (R):</label>
      <input type="number" id="auth-threshold-3" step="0.01" />
      <label for="auth-threshold-4">Authorization Threshold 4 (R):</label>
      <input type="number" id="auth-threshold-4" step="0.01" />
      <button id="update-settings-button">Update</button>
    </div>
  </div>

  <!-- Business Details -->
  <div id="business_details" class="tab-content">
    <div class="form-group">
      <label for="company-name">Company Name:</label>
      <input type="text" id="company-name" />
      <label for="address-line1">Address Line 1:</label>
      <input type="text" id="address-line1" />
      <label for="address-line2">Address Line 2:</label>
      <input type="text" id="address-line2" />
      <label for="city">City:</label>
      <input type="text" id="city" />
      <label for="province">Province:</label>
      <input type="text" id="province" />
      <label for="postal-code">Postal Code:</label>
      <input type="text" id="postal-code" />
      <label for="telephone">Telephone:</label>
      <input type="text" id="telephone" />
      <label for="vat-number">VAT Number:</label>
      <input type="text" id="vat-number" />
      <button id="update-business-details-button">Update</button>
    </div>
  </div>

  <script type="module" src="/static/js/maintenance.js"></script>
</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/maintenance.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/new_order.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create New Order</title>
  <link rel="icon" href="data:," />
  <link rel="stylesheet" href="/static/css/style.css" />
</head>
<body>

  {% include "_tab_nav.html" %}

  <script>
    const rawBusinessDetails = '{{ business_details | tojson | safe }}';
    console.log('Raw businessDetails:', rawBusinessDetails);
    try {
      window.businessDetails = JSON.parse(rawBusinessDetails);
      if (!window.businessDetails || !window.businessDetails.company_name) {
        throw new Error('Business details are missing or invalid');
      }
    } catch (error) {
      console.error('Failed to parse businessDetails:', error);
      window.businessDetails = {
        company_name: "Default Company",
        address_line1: "N/A",
        address_line2: "",
        city: "N/A",
        province: "N/A",
        postal_code: "N/A",
        telephone: "N/A",
        vat_number: "N/A"
      };
    }
  </script>

  <div>
    <h2>Create Purchase Order</h2>

    <div class="order-header">
      <div class="order-line">
        <label>Order Number: <span id="order-number">Loading...</span></label>
      </div>
      <div class="order-line">
        <label for="request_date">Date:</label>
        <input type="date" id="request_date" name="request_date">
      </div>
    </div>

<div class="form-group" style="max-width: 900px; margin: 2rem 0; display: grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); gap: 1.5rem;">

  <div class="column">
    <label for="requester_id">Requester *</label>
    <select id="requester_id" name="requester_id">
      <option value="">Select Requester</option>
      {% for requester in requesters %}
      <option value="{{ requester.id }}">{{ requester.name }}</option>
      {% endfor %}
    </select>
  </div>

  <div class="column">
    <label for="supplier_id">Supplier *</label>
    <select id="supplier_id" name="supplier_id">
      <option value="">Select Supplier</option>
      {% for supplier in suppliers %}
      <option value="{{ supplier.id }}">{{ supplier.name }}</option>
      {% endfor %}
    </select>
  </div>

  <div class="column">
    <label for="payment_terms">Payment Terms</label>
    <select id="payment_terms" name="payment_terms">
      <option value="On account">On account</option>
      <option value="COD">COD</option>
    </select>
  </div>

  <div class="column">
    <label for="note_to_supplier">Note to Supplier</label>
    <textarea id="note_to_supplier" name="note_to_supplier" rows="3" placeholder="Note to your supplier about this order..."></textarea>
  </div>

  <div class="column">
    <label for="order_note">Order Note</label>
    <textarea id="order_note" name="order_note" style="min-height: 100px;" placeholder="Internal notes about this order..."></textarea>
  </div>

  </div>
      <div class="delivery-block">
      <label>Delivery Address</label>
      <div id="delivery-address">
        {{ business_details.company_name }}<br>
        {{ business_details.address_line1 }}<br>
        {% if business_details.address_line2 %}
        {{ business_details.address_line2 }}<br>
        {% endif %}
        {{ business_details.city }}, {{ business_details.province }} {{ business_details.postal_code }}<br>
        Telephone: {{ business_details.telephone }}<br>
        VAT Number: {{ business_details.vat_number }}
      </div>
    </div>

    <table id="items-table">
      <thead>
        <tr>
          <th>Item Code</th>
          <th>Project</th>
          <th>Qty Ordered</th>
          <th>Price (R)</th>
          <th>Total (R)</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="items-body"></tbody>
    </table>

    <div class="add-item-block">
      <button type="button" id="add-line">Add Item</button>
    </div>

    <div class="summary">
      <label>Total: R <span id="grand-total">0.00</span></label>
      <div>Excluding VAT</div>
    </div>

    <div class="button-group">
      <button type="button" id="preview-order">View Purchase Order</button>
      <button type="button" id="submit-order">Submit Order</button>
      <button type="button" id="cancel-order">Cancel</button>
    </div>
  </div>

  <script type="module" src="/static/js/new_order_main.js?v=1"></script>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const path = window.location.pathname;
      const tabButtons = document.querySelectorAll(".tab-buttons button");

      tabButtons.forEach(btn => {
        const target = btn.getAttribute("onclick").match(/location\.href='([^']+)'/)[1];
        if (path.startsWith(target)) {
          btn.classList.add("active");
        }
      });
    });
  </script>

  <div id="email-status-log" style="margin-top: 2rem; padding: 1rem; border: 1px solid #ccc; background-color: #f9f9f9; font-family: monospace; font-size: 0.9rem;">
    <strong>Status Log:</strong>
    <div id="status-messages"></div>
  </div>  
</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/new_order.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/authorisations_per_user.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Authorisations</title>
  <link rel="icon" href="data:,">
  <link rel="stylesheet" href="/static/css/style.css" />
</head>
<body>

  {% include "_tab_nav.html" %}

  <h2 id="user-heading">User, here are your authorisations:</h2>

  <div class="filters">
    <label for="start-date">Start Date:</label>
    <input type="date" id="start-date">
    <label for="end-date">End Date:</label>
    <input type="date" id="end-date">
    <label for="filter-requester">Requester:</label>
    <select id="filter-requester">
      <option value="All">All</option>
    </select>
    <label for="filter-supplier">Supplier:</label>
    <select id="filter-supplier">
      <option value="All">All</option>
    </select>
    <label for="filter-status">Status:</label>
    <select id="filter-status" disabled>
      <option value="Awaiting Authorisation" selected>Awaiting Authorisation</option>
    </select>
    <button id="run-btn">Run</button>
    <button id="clear-btn">Clear</button>
  </div>

  <table>
    <thead>
      <tr>
        <th>Request Date</th>
        <th>Order Number</th>
        <th>Requester</th>
        <th>Supplier</th>
        <th>Total</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="pending-body"></tbody>
  </table>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const path = window.location.pathname;
      const tabButtons = document.querySelectorAll(".tab-buttons button");
      tabButtons.forEach(btn => {
        const target = btn.getAttribute("onclick").match(/location\.href='([^']+)'/)[1];
        if (path.startsWith(target)) {
          btn.classList.add("active");
        }
      });
    });
  </script>

  <script type="module">
    import { setupAuthorisationUI } from "/static/js/authorisations_per_user.js";
    import { showPDFModal } from "/static/js/components/pdf_modal.js";

    document.addEventListener("DOMContentLoaded", async () => {
      try {
        const res = await fetch("/mobile/get_user_info");
        const user = await res.json();

        document.getElementById("user-heading").textContent = `${user.username}, here are your authorisations:`;

        await setupAuthorisationUI({
          user,
          mountPointId: "pending-body",
          showPDF: async (orderId) => {
            try {
              const res = await fetch(`/orders/api/generate_pdf_for_order/${orderId}`);
              if (!res.ok) throw new Error(`HTTP ${res.status}`);
              const blob = await res.blob();
              showPDFModal(blob); // ✅ pass blob to modal
            } catch (err) {
              console.error("❌ PDF modal error:", err);
              alert("❌ Could not load PDF preview.");
            }
          },
          onAuthorised: (order) => {
            console.log(`✅ Authorised order ${order.order_number}`);
          },
          onError: (msg) => {
            alert(msg);
          }
        });
      } catch (err) {
        console.error("❌ Failed to load user info:", err);
        document.getElementById("pending-body").innerHTML =
          "<tr><td colspan='7'>❌ Could not load user session.</td></tr>";
      }
    });
  </script>

</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/authorisations_per_user.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/mobile/.DS_Store
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/mobile/.DS_Store

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/mobile/.DS_Store
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/mobile/mobile_authorisations.html
<!-- File: frontend/templates/mobile/mobile_authorisations.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Mobile Authorisations</title>
  <link rel="stylesheet" href="/static/mobile/css/mobile_authorisations.css" />
  <link rel="manifest" href="/static/mobile/manifest.json" />
</head>
<body>
  <div class="mobile-container">
    <h2 id="user-heading">
      <strong><span id="username-placeholder">User</span></strong>, 
      <strong>please review the orders below which are waiting for you to authorise:</strong>
    </h2>

    <div id="order-list" class="order-list">Loading orders...</div>
  </div>

  <div id="note-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <span class="close">&times;</span>
      <p id="note-text">No note available.</p>
    </div>
  </div>

  <script type="module">
    import { setupAuthorisationUI } from "/static/js/authorisations_per_user.js";
    import { showMobilePDFModal } from "/static/js/components/mobile_pdf_modal.js";

    function showToast(message, success = true) {
      const toast = document.createElement("div");
      toast.textContent = message;
      toast.className = success ? "toast toast-success" : "toast toast-error";
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 2500);
    }

    function showNoteModal(note) {
      const modal = document.getElementById("note-modal");
      const text = document.getElementById("note-text");
      const close = modal.querySelector(".close");
      text.textContent = note || "No note available.";
      modal.style.display = "block";
      close.onclick = () => modal.style.display = "none";
    }

    function showConfirmationModal(message) {
      const existing = document.getElementById("confirmation-modal");
      if (existing) existing.remove();

      const backdrop = document.createElement("div");
      backdrop.id = "confirmation-modal";

      const inner = document.createElement("div");
      inner.className = "confirmation-box";
      inner.innerHTML = `
        <p>${message}</p>
        <button class="close-modal-btn">Close</button>
      `;

      backdrop.appendChild(inner);
      document.body.appendChild(backdrop);

      inner.querySelector(".close-modal-btn").onclick = () => backdrop.remove();
    }


    function formatDate(dateStr) {
      const date = new Date(dateStr);
      return `${date.getDate()} ${date.toLocaleString("default", { month: "short" })} ${date.getFullYear()}`;
    }

    function renderMobileRow(order, user, onAuthorised, onError) {
      const row = document.createElement("div");
      row.className = "mobile-order-row";

      const date = formatDate(order.created_date);
      const orderNumber = `Order ${order.order_number}`;
      const total = `R${Number(order.total).toLocaleString("en-ZA")}`;

      row.innerHTML = `
        <div class="info-block">
          <div>${date}</div>
          <div>${orderNumber}</div>
          <div>${total}</div>
        </div>
        <div class="button-block">
          <button class="view-btn">View PDF</button>
          <button class="note-btn">See Note</button>
          <button class="auth-btn">Authorise</button>
        </div>
      `;

      row.querySelector(".view-btn").onclick = () => showMobilePDFModal(order.id);
      row.querySelector(".note-btn").onclick = () => showNoteModal(order.order_note || "");
      row.querySelector(".auth-btn").onclick = async () => {
        try {
          const res = await fetch(`/orders/api/authorise_order/${order.id}`, { method: "POST" });
          const result = await res.json();
          if (result.message === "Order authorised") {
            row.remove();
            showConfirmationModal(`${user.username}, you authorised order ${order.order_number}.`);
            onAuthorised(order);
          } else {
            onError("❌ Failed to authorise: " + result.message);
          }
        } catch (err) {
          console.error("❌ Error during authorisation:", err);
          onError("❌ Could not send authorisation.");
        }
      };

      return row;
    }

    async function fetchUserAndOrders() {
      const list = document.getElementById("order-list");
      try {
        const res = await fetch("/mobile/get_user_info");
        const user = await res.json();

        document.getElementById("username-placeholder").textContent = user.username;

        const ordersRes = await fetch("/orders/api/awaiting_authorisation");
        const allOrders = await ordersRes.json();

        const filtered = allOrders.filter(o =>
          Number(o.required_auth_band) === Number(user.auth_threshold_band)
        );

        list.innerHTML = "";

        if (filtered.length === 0) {
          list.innerHTML = "<p>✅ No orders awaiting your authorisation.</p>";
          return;
        }

        filtered.forEach(order => {
          const row = renderMobileRow(order, user, () => {}, showToast);
          list.appendChild(row);
        });

      } catch (err) {
        console.error("❌ Could not load data:", err);
        list.innerHTML = "<p>❌ Failed to load user or orders.</p>";
      }
    }

    document.addEventListener("DOMContentLoaded", () => {
      fetchUserAndOrders();

      const refreshBtn = document.createElement("button");
      refreshBtn.textContent = "🔄 Load Orders";
      refreshBtn.className = "refresh-button";
      refreshBtn.onclick = fetchUserAndOrders;
      document.body.appendChild(refreshBtn);
    });

    if ("serviceWorker" in navigator) {
      navigator.serviceWorker.register("/static/mobile/service-worker.js")
        .then(() => console.log("✅ Service Worker Registered"))
        .catch(err => console.error("❌ SW Registration Failed:", err));
    }
  </script>
</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/mobile/mobile_authorisations.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/mobile/mobile_login.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Login – Mobile Authorisations</title>
  <link rel="stylesheet" href="/static/mobile/css/mobile_authorisations.css" />
</head>
<body>
  <div class="mobile-container">
    <h2>🔐 Mobile Login</h2>

    {% if request.query_params.get('error') %}
      <div class="toast toast-error">❌ Invalid username or password</div>
    {% endif %}

    <form method="POST" action="/mobile/login" class="login-form">
      <label for="username">Username:</label>
      <input type="text" id="username" name="username" required autofocus />

      <label for="password">Password:</label>
      <input type="password" id="password" name="password" required />

      <button type="submit">🔓 Log In</button>
    </form>
  </div>
</body>
</html>

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/templates/mobile/mobile_login.html
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/database.py
import sqlite3
from pathlib import Path
import logging

# Logging setup
logging.basicConfig(
    filename="logs/db_activity_log.txt",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

DB_PATH = Path("data/orders.db")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            # -- Core Tables --
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requesters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS suppliers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    account_number TEXT,
                    name TEXT,
                    telephone TEXT,
                    vat_number TEXT,
                    registration_number TEXT,
                    email TEXT,
                    contact_name TEXT,
                    contact_telephone TEXT,
                    address_line1 TEXT,
                    address_line2 TEXT,
                    address_line3 TEXT,
                    postal_code TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_number TEXT,
                    status TEXT,
                    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    received_date TEXT,
                    total REAL,
                    order_note TEXT,
                    note_to_supplier TEXT,
                    supplier_id INTEGER,
                    requester_id INTEGER,
                    required_auth_band INTEGER,
                    payment_terms TEXT DEFAULT 'On account',
                    payment_date TEXT,
                    amount_paid REAL,
                    FOREIGN KEY (supplier_id) REFERENCES suppliers(id),
                    FOREIGN KEY (requester_id) REFERENCES requesters(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS order_items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    item_code TEXT,
                    item_description TEXT,
                    project TEXT,
                    qty_ordered REAL,
                    qty_received REAL,
                    received_date TEXT,
                    price REAL,
                    total REAL,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS attachments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    filename TEXT NOT NULL,
                    file_path TEXT NOT NULL,
                    upload_date TEXT NOT NULL,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS audit_trail (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    action TEXT,
                    details TEXT,
                    action_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    user_id INTEGER,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS settings (
                    id INTEGER PRIMARY KEY CHECK (id = 1),
                    order_number_start TEXT,
                    auth_threshold_1 INTEGER,
                    auth_threshold_2 INTEGER,
                    auth_threshold_3 INTEGER,
                    auth_threshold_4 INTEGER,
                    requisition_number_start TEXT DEFAULT 'REQ1000'
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    password_hash TEXT NOT NULL,
                    rights TEXT NOT NULL,
                    auth_threshold_band INTEGER CHECK (auth_threshold_band IN (1, 2, 3, 4)),
                    roles TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS projects (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    project_code TEXT UNIQUE,
                    project_name TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    item_code TEXT UNIQUE,
                    item_description TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS business_details (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_name TEXT NOT NULL,
                    address_line1 TEXT,
                    address_line2 TEXT,
                    city TEXT,
                    province TEXT,
                    postal_code TEXT,
                    telephone TEXT,
                    vat_number TEXT
                )
            """)
            cursor.execute("""
                INSERT OR IGNORE INTO business_details (
                    id, company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                ) VALUES (
                    1, 'Universal Recycling Company Pty Ltd', '123 Industrial Road', 'Unit 4', 'Cape Town', 'Western Cape', '8001', '+27 21 555 1234', 'VAT123456789'
                )
            """)

            # -- New: Requisitions --
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requisitioners (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requisitions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    requisition_number TEXT UNIQUE,
                    requisitioner_id INTEGER NOT NULL,
                    requisition_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    requisition_note TEXT,
                    status TEXT DEFAULT 'submitted',
                    converted_order_id INTEGER DEFAULT NULL,
                    FOREIGN KEY (requisitioner_id) REFERENCES requisitioners(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requisition_items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    requisition_id INTEGER NOT NULL,
                    description TEXT NOT NULL,
                    project TEXT,
                    quantity REAL,
                    FOREIGN KEY (requisition_id) REFERENCES requisitions(id)
                )
            """)

            conn.commit()
            logging.info("Database initialized successfully.")
    except sqlite3.Error as e:
        logging.error(f"❌ DB init failed: {e}")
        raise

def determine_status_and_band(total: float) -> tuple[str, int]:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4 FROM settings WHERE id = 1")
        row = cursor.fetchone()
        if not row:
            raise ValueError("Authorization thresholds not configured.")
        thresholds = [row["auth_threshold_1"], row["auth_threshold_2"], row["auth_threshold_3"], row["auth_threshold_4"]]
        status = "Pending"
        required_band = 0
        if total > thresholds[0]:
            status = "Awaiting Authorisation"
            if total <= thresholds[1]:
                required_band = 1
            elif total <= thresholds[2]:
                required_band = 2
            elif total <= thresholds[3]:
                required_band = 3
            else:
                required_band = 4
        return status, required_band

def create_order(order_data: dict, items: list) -> dict:
    status, required_band = determine_status_and_band(order_data["total"])
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO orders (
                order_number, status, total, order_note, note_to_supplier,
                supplier_id, requester_id, required_auth_band, payment_terms
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            order_data["order_number"],
            status,
            order_data["total"],
            order_data["order_note"],
            order_data["note_to_supplier"],
            order_data["supplier_id"],
            order_data["requester_id"],
            required_band,
            order_data.get("payment_terms", "On account")
        ))
        order_id = cursor.lastrowid
        for item in items:
            cursor.execute("""
                INSERT INTO order_items (
                    order_id, item_code, item_description, project,
                    qty_ordered, price, total
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                order_id,
                item["item_code"],
                item["item_description"],
                item["project"],
                item["qty_ordered"],
                item["price"],
                item["qty_ordered"] * item["price"]
            ))
        cursor.execute("""
            INSERT INTO audit_trail (order_id, action, details, user_id)
            VALUES (?, 'Created', ?, ?)
        """, (order_id, f"Order {order_data['order_number']} created", 0))
        conn.commit()
        cursor.execute("""
            SELECT * FROM orders WHERE id = ?
        """, (order_id,))
        return dict(cursor.fetchone())

def get_settings() -> dict:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT order_number_start, auth_threshold_1, auth_threshold_2,
                   auth_threshold_3, auth_threshold_4, requisition_number_start
            FROM settings WHERE id = 1
        """)
        row = cursor.fetchone()
        return dict(row) if row else {}

def update_settings(payload: dict):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO settings (
                id, order_number_start, auth_threshold_1, auth_threshold_2,
                auth_threshold_3, auth_threshold_4, requisition_number_start
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(id) DO UPDATE SET
                order_number_start = excluded.order_number_start,
                auth_threshold_1 = excluded.auth_threshold_1,
                auth_threshold_2 = excluded.auth_threshold_2,
                auth_threshold_3 = excluded.auth_threshold_3,
                auth_threshold_4 = excluded.auth_threshold_4,
                requisition_number_start = excluded.requisition_number_start
        """, (
            1,
            payload["order_number_start"],
            payload["auth_threshold_1"],
            payload["auth_threshold_2"],
            payload["auth_threshold_3"],
            payload["auth_threshold_4"],
            payload.get("requisition_number_start", "REQ1000")
        ))
        conn.commit()

def get_business_details() -> dict:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT company_name, address_line1, address_line2, city, province,
                   postal_code, telephone, vat_number
            FROM business_details WHERE id = 1
        """)
        row = cursor.fetchone()
        return dict(row) if row else {}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/database.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils.py
from fastapi import HTTPException, Depends
from functools import wraps
from contextlib import contextmanager
import sqlite3
import logging
from typing import List, Dict, Any
from backend.database import get_db_connection

# Logging setup
logging.basicConfig(filename="logs/server.log", level=logging.INFO,
                    format="%(asctime)s | %(levelname)s | %(message)s")

# Database dependency
@contextmanager
def db_session():
    conn = get_db_connection()
    try:
        yield conn
    finally:
        conn.close()

async def get_db():
    with db_session() as conn:
        yield conn

# Error handling decorator
def handle_db_errors(entity: str, action: str):
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except sqlite3.IntegrityError as e:
                logging.error(f"Integrity error {action} {entity}: {str(e)}")
                raise HTTPException(status_code=400, detail=f"{entity.capitalize()} could not be {action} (possible duplicate).")
            except sqlite3.Error as e:
                logging.error(f"Database error {action} {entity}: {str(e)}")
                raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
            except Exception as e:
                logging.error(f"Error {action} {entity}: {str(e)}")
                raise HTTPException(status_code=500, detail=f"Error {action} {entity}: {str(e)}")
        return wrapper
    return decorator

# Logging helpers
def log_success(entity: str, action: str, details: str):
    logging.info(f"{entity.capitalize()} {action}: {details}")

def log_warning(entity: str, message: str):
    logging.warning(f"{entity.capitalize()} {message}")

# Generic CRUD helpers
async def fetch_list(db: sqlite3.Connection, table: str, fields: List[str], response_key: str) -> Dict[str, List[Dict]]:
    cursor = db.cursor()
    cursor.execute(f"SELECT {', '.join(fields)} FROM {table}")
    rows = cursor.fetchall()
    result = [dict(zip(fields, row)) for row in rows]
    log_success(response_key, "fetched", f"{len(result)} items")
    return {response_key: result}

async def add_record(db: sqlite3.Connection, table: str, payload: Dict[str, Any], fields: List[str], log_message: str) -> Dict[str, str]:
    values = tuple(payload[field] for field in fields)
    placeholders = ", ".join(["?"] * len(fields))
    cursor = db.cursor()
    cursor.execute(f"INSERT INTO {table} ({', '.join(fields)}) VALUES ({placeholders})", values)
    db.commit()
    log_success(table, "added", log_message)
    return {"message": f"{table.capitalize()} added successfully"}

async def update_record(db: sqlite3.Connection, table: str, record_id: int, payload: Dict[str, Any], fields: List[str], log_message: str) -> Dict[str, str]:
    values = tuple(payload[field] for field in fields) + (record_id,)
    set_clause = ", ".join(f"{field} = ?" for field in fields)
    cursor = db.cursor()
    cursor.execute(f"UPDATE {table} SET {set_clause} WHERE id = ?", values)
    if cursor.rowcount == 0:
        log_warning(table, f"No {table} found with id {record_id}")
        raise HTTPException(status_code=404, detail=f"{table.capitalize()} not found")
    db.commit()
    log_success(table, "updated", log_message)
    return {"message": f"{table.capitalize()} updated successfully"}
END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/main.py
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse, Response
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.routing import APIRouter
from backend.endpoints import html_routes
from backend.endpoints import requisitions
from backend.endpoints import requisition_attachments
from backend.endpoints.lookups import mark_cod_paid_api as mark_cod_paid_api_module

from pathlib import Path
import logging
import sys
import os

# --- Database ---
from backend.database import init_db, get_db_connection

# --- Login Check Helper ---
def require_login(request: Request):
    if not request.session.get("user"):
        return RedirectResponse("/", status_code=302)
    return None

# --- Routers ---
from backend.endpoints import routers
from backend.endpoints.mobile import mobile_auth
from backend.endpoints.admin import admin_router
from backend.endpoints.auth import router as auth_router
from backend.endpoints.orders import router as orders_router
from backend.endpoints.new_order_pdf_generator import router as new_order_pdf_router
from backend.endpoints.pending_order_pdf_generator import router as pending_order_pdf_router
from backend.endpoints.order_queries import router as order_queries_router
from backend.endpoints.order_receiving import router as order_receiving_router
from backend.endpoints.order_attachments import router as attachments_router
from backend.endpoints.order_email import router as order_email_router
from backend.endpoints.utils import router as utils_router
from backend.endpoints.mobile.mobile_awaiting_authorisation import router as mobile_auth_router
from backend.endpoints.lookups import items as items_router
from backend.endpoints.lookups import suppliers as suppliers_router
from backend.endpoints.lookups import projects as projects_router
from backend.endpoints.order_notes import router as order_notes_router
from backend.endpoints.lookups import requisitioners as requisitioners_router

# Allow scripts to import from parent
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from scripts.add_debug_validation_handler import install_validation_handler

# Setup logging
Path("logs").mkdir(exist_ok=True)
logging.basicConfig(
    filename="logs/server_startup.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

try:
    init_db()
    logging.info("✅ Database initialized successfully.")
except Exception as e:
    logging.exception("❌ Failed to initialize database")
    raise

# --- FastAPI App Init ---
app = FastAPI(
    debug=True,
    title="Universal Recycling Purchase Order System",
    description="Purchase Order management system for Universal Recycling"
)

install_validation_handler(app)

# --- Static and Upload Directories ---
app.mount("/static", StaticFiles(directory="frontend/static"), name="static")
app.mount("/data/uploads", StaticFiles(directory="data/uploads"), name="uploads")

# --- Middleware ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
app.add_middleware(SessionMiddleware, secret_key="your-new-secure-key", same_site="lax", https_only=False)

templates = Jinja2Templates(directory="frontend/templates")

# --- Static Routes Router ---
static_router = APIRouter()

@static_router.get("/mobile/authorisations", response_class=HTMLResponse)
async def mobile_authorisations_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("mobile/mobile_authorisations.html", {"request": request})

@static_router.get("/home", response_class=HTMLResponse)
async def home(request: Request):
    if not request.session.get("user"):
        return RedirectResponse("/")
    logging.info("Rendering home page")
    return templates.TemplateResponse("home.html", {"request": request})

@static_router.get("/orders/new", response_class=HTMLResponse)
async def new_order_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect

    logging.info("Starting to render new order page")
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM requesters ORDER BY name")
            requesters = [dict(row) for row in cursor.fetchall()]
            cursor.execute("SELECT id, name FROM suppliers ORDER BY name")
            suppliers = [dict(row) for row in cursor.fetchall()]
            cursor.execute("SELECT item_code, item_description FROM items ORDER BY item_code")
            items = [dict(row) for row in cursor.fetchall()]
            cursor.execute("SELECT project_code, project_name FROM projects ORDER BY project_code")
            projects = [dict(row) for row in cursor.fetchall()]
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            row = cursor.fetchone()
            business_details = dict(row) if row else {
                "company_name": "Default Company",
                "address_line1": "N/A",
                "address_line2": "",
                "city": "N/A",
                "province": "N/A",
                "postal_code": "N/A",
                "telephone": "N/A",
                "vat_number": "N/A"
            }

        return templates.TemplateResponse("new_order.html", {
            "request": request,
            "requesters": requesters,
            "suppliers": suppliers,
            "items": items,
            "projects": projects,
            "business_details": business_details
        })

    except Exception as e:
        logging.error(f"Error rendering new order page: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Error rendering new order page: {str(e)}")

@static_router.get("/orders/pending_orders", response_class=HTMLResponse)
async def pending_orders_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("pending_orders.html", {"request": request})

@static_router.get("/orders/cod_orders", response_class=HTMLResponse)
async def cod_orders_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("cod_orders.html", {"request": request})

@static_router.get("/orders/received_orders", response_class=HTMLResponse)
async def received_orders_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("received_orders.html", {"request": request})

@static_router.get("/orders/audit_trail", response_class=HTMLResponse)
async def audit_trail_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("audit_trail.html", {"request": request})

@static_router.get("/maintenance", response_class=HTMLResponse)
async def maintenance_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("maintenance.html", {"request": request})

@static_router.get("/orders/partially_delivered", response_class=HTMLResponse)
async def partially_delivered_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("partially_delivered.html", {"request": request})

@static_router.get("/requisitions/pending_requisitions", response_class=HTMLResponse)
async def pending_requisitions_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("pending_requisitions.html", {"request": request})

@static_router.get("/requisitions/new", response_class=HTMLResponse)
async def new_requisition_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("new_requisition.html", {"request": request})

@static_router.get("/favicon.ico")
async def favicon():
    favicon_path = Path("frontend/static/favicon.ico")
    if not favicon_path.exists():
        return {"error": "Favicon not found"}, 404
    try:
        with open(favicon_path, "rb") as f:
            content = f.read()
        return Response(content=content, media_type="image/x-icon")
    except Exception as e:
        logging.error(f"Error serving favicon: {str(e)}", exc_info=True)
        return {"error": "Failed to serve favicon"}, 500

# --- Include Routers ---
app.include_router(static_router)
app.include_router(mobile_auth_router)

for router in routers:
    if router is not order_queries_router and router is not orders_router and router is not attachments_router and router is not order_receiving_router:
        app.include_router(router, prefix="/lookups")

app.include_router(html_routes.router)
app.include_router(admin_router, prefix="/admin")
app.include_router(order_queries_router, prefix="/orders/api")
app.include_router(new_order_pdf_router, prefix="/orders/api")
app.include_router(auth_router)
app.include_router(mobile_auth.router)
app.include_router(orders_router, prefix="/orders")
app.include_router(attachments_router, prefix="/orders")
app.include_router(order_receiving_router, prefix="/orders")
app.include_router(utils_router)
app.include_router(order_email_router, prefix="/orders")
app.include_router(pending_order_pdf_router, prefix="/orders/api")
app.include_router(order_notes_router)
app.include_router(items_router.router, prefix="/lookups")
app.include_router(suppliers_router.router, prefix="/maintenance")
app.include_router(projects_router.router, prefix="/maintenance")
app.include_router(requisitions.router)
app.include_router(requisitioners_router.router, prefix="/lookups")
app.include_router(mark_cod_paid_api_module.router, prefix="/orders")
app.include_router(requisition_attachments.router, prefix="/requisitions")

# --- Dev CLI ---
if __name__ == "__main__":
    import uvicorn
    try:
        logging.info("🚀 Starting Uvicorn server...")
        uvicorn.run(app, host="0.0.0.0", port=8004)
    except Exception as e:
        logging.exception("❌ Server failed to start")
        raise

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/main.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/auth.py
from fastapi import APIRouter, Request, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from backend.database import get_db_connection
import bcrypt
import json

router = APIRouter()
templates = Jinja2Templates(directory="frontend/templates")

@router.get("/", response_class=HTMLResponse)
async def login_page(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})

@router.post("/login")
async def login(request: Request):
    try:
        data = await request.json()
    except Exception:
        return JSONResponse(status_code=400, content={"error": "Invalid JSON payload"})

    username = data.get("username", "").strip().lower()
    password = data.get("password", "")

    if not username or not password:
        return JSONResponse(status_code=400, content={"error": "Username and password are required"})

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, username, password_hash, rights, auth_threshold_band FROM users WHERE username = ?",
            (username,)
        )
        user = cursor.fetchone()
        conn.close()

        if not user:
            return JSONResponse(status_code=401, content={"error": "Invalid username or password"})

        stored_hash = user["password_hash"]
        if not bcrypt.checkpw(password.encode("utf-8"), stored_hash.encode("utf-8")):
            return JSONResponse(status_code=401, content={"error": "Invalid username or password"})

        user_roles = user["rights"] or "view"

        request.session["user"] = {
            "id": user["id"],
            "username": user["username"],
            "rights": user_roles,
            "auth_threshold_band": user["auth_threshold_band"]
        }

        # Assign session roles from DB
        request.session["roles"] = user_roles

        return JSONResponse(status_code=200, content={"success": True})

    except Exception as e:
        return JSONResponse(status_code=500, content={"error": f"Login failed due to server error: {str(e)}"})

@router.get("/logout")
async def logout(request: Request):
    request.session.clear()
    return JSONResponse(status_code=200, content={"message": "Logged out successfully"})

@router.get("/session_debug")
async def session_debug(request: Request):
    return JSONResponse(content={
        "user": request.session.get("user"),
        "roles": request.session.get("roles")
    })

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/auth.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/pending_order_pdf_generator.py
# File: backend/endpoints/pending_order_pdf_generator.py

from fastapi import APIRouter, HTTPException
from fastapi.responses import StreamingResponse
from weasyprint import HTML
from jinja2 import Environment, FileSystemLoader
from backend.database import get_db_connection
import os
import io
import logging

router = APIRouter()

# ✅ Use relative paths for template and logo
TEMPLATE_PATH = os.path.join(os.path.dirname(__file__), "../../frontend/templates")
LOGO_PATH = "file://" + os.path.abspath(
    os.path.join(os.path.dirname(__file__), "../../frontend/static/images/universal_logo.jpg")
)

env = Environment(loader=FileSystemLoader(TEMPLATE_PATH))

@router.get("/generate_pdf_for_order/{order_id}")
async def generate_pdf_for_order(order_id: int):
    try:
        template = env.get_template("pdf_template.html")

        with get_db_connection() as conn:
            conn.row_factory = lambda cursor, row: dict(zip([col[0] for col in cursor.description], row))
            cursor = conn.cursor()

            # Main order info + supplier and requester names
            cursor.execute("""
                SELECT o.*, s.name AS supplier, r.name AS requester
                FROM orders o
                LEFT JOIN suppliers s ON o.supplier_id = s.id
                LEFT JOIN requesters r ON o.requester_id = r.id
                WHERE o.id = ?
            """, (order_id,))
            order = cursor.fetchone()
            if not order:
                raise HTTPException(status_code=404, detail="Order not found")

            logging.info(f"Generating PDF for order_id={order_id}, order_number={order.get('order_number', '?')}")

            # Line items
            cursor.execute("SELECT * FROM order_items WHERE order_id = ?", (order_id,))
            items = cursor.fetchall()

            # Compute item totals
            for item in items:
                try:
                    qty = float(item.get("qty_ordered", 0))
                    price = float(item.get("price", 0))
                    item["total"] = qty * price
                except Exception:
                    item["total"] = 0.0

            # Company info
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            business_details = cursor.fetchone()
            if not business_details:
                raise HTTPException(status_code=404, detail="Business details not found")

        html = template.render(
            order=order,
            items=items,
            business_details=business_details,
            logo_path=LOGO_PATH,
            note_to_supplier=order.get("note_to_supplier", "")
        )

        pdf_io = io.BytesIO()
        HTML(string=html).write_pdf(pdf_io)
        pdf_io.seek(0)

        return StreamingResponse(pdf_io, media_type="application/pdf", headers={
            "Content-Disposition": f"inline; filename=order_{order_id}.pdf"
        })

    except Exception as e:
        logging.exception(f"PDF generation failed for order {order_id}")
        raise HTTPException(status_code=500, detail=f"Failed to generate PDF: {str(e)}")

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/pending_order_pdf_generator.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/order_attachments.py
from fastapi import APIRouter, HTTPException, UploadFile, Form
from datetime import datetime
import sqlite3
from pathlib import Path
import json  # Add this import

router = APIRouter(tags=["orders"])

UPLOAD_DIR = Path("data/uploads")
UPLOAD_DIR.mkdir(parents=True, exist_ok=True)

def log_event(filename: str, data: dict):
    log_path = Path(f"logs/{filename}")
    log_path.parent.mkdir(parents=True, exist_ok=True)
    with log_path.open("a", encoding="utf-8") as f:
        timestamp = datetime.now().isoformat()
        f.write(f"[{timestamp}] {json.dumps(data, ensure_ascii=False)}\n")

# Rest of the file remains unchanged
@router.post("/upload_attachment")
async def upload_attachment(file: UploadFile, order_id: int = Form(...)):
    try:
        # Validate order_id exists
        with sqlite3.connect("data/orders.db") as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id FROM orders WHERE id = ?", (order_id,))
            if not cursor.fetchone():
                raise HTTPException(status_code=400, detail="Invalid order_id")

        # Sanitize filename and handle duplicates
        filename = file.filename.replace(" ", "_").replace("/", "_").replace("\\", "_")
        base_filename = filename
        saved_path = UPLOAD_DIR / f"{order_id}_{filename}"
        counter = 1
        while saved_path.exists():
            name, ext = base_filename.rsplit(".", 1) if "." in base_filename else (base_filename, "")
            filename = f"{name}_{counter}.{ext}" if ext else f"{name}_{counter}"
            saved_path = UPLOAD_DIR / f"{order_id}_{filename}"
            counter += 1

        # Check file size before saving
        content = await file.read()
        file_size = len(content)
        if file_size < 500:
            raise HTTPException(status_code=400, detail="Uploaded file is too small or corrupt.")

        # Save the file
        with saved_path.open("wb") as buffer:
            buffer.write(content)

        with sqlite3.connect("data/orders.db") as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO attachments (order_id, filename, file_path, upload_date)
                VALUES (?, ?, ?, ?)
            """, (order_id, filename, str(saved_path), datetime.now().isoformat()))
            conn.commit()

        log_event("new_orders_log.txt", {
            "action": "attachment_uploaded",
            "order_id": order_id,
            "filename": filename,
            "path": str(saved_path),
            "size_bytes": file_size
        })

        return {"message": "Attachment uploaded successfully"}
    except sqlite3.Error as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "sqlite_upload"})
        raise HTTPException(status_code=500, detail=f"Database error during upload: {str(e)}")
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "upload"})
        raise HTTPException(status_code=500, detail=f"Failed to upload attachment: {str(e)}")
    finally:
        await file.close()

@router.get("/attachments/{order_id}")
def get_order_attachments(order_id: int):
    try:
        with sqlite3.connect("data/orders.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, filename, file_path, upload_date
                FROM attachments
                WHERE order_id = ?
            """, (order_id,))
            files = [dict(row) for row in cursor.fetchall()]
        return {"attachments": files}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to retrieve attachments: {e}")
END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/order_attachments.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/order_email.py
from fastapi import APIRouter, HTTPException, Request
from backend.utils.send_email import send_email
from weasyprint import HTML
from io import BytesIO
from datetime import datetime
from fastapi.templating import Jinja2Templates
import logging

router = APIRouter()
templates = Jinja2Templates(directory="frontend/templates")

@router.post("/email_purchase_order")
async def email_purchase_order(request: Request):
    try:
        # Extract raw HTML from incoming request
        data = await request.json()
        html = data.get("html")
        order_number = data.get("order_number")
        recipient_email = data.get("recipient_email")

        if not html or not order_number or not recipient_email:
            raise HTTPException(status_code=400, detail="Missing required fields: html, order_number, recipient_email")

        logging.info(f"📩 Generating PDF for order {order_number} and sending to {recipient_email}")

        # Generate PDF from raw HTML
        pdf_io = BytesIO()
        HTML(string=html).write_pdf(pdf_io)
        pdf_io.seek(0)
        attachment_bytes = pdf_io.getvalue()

        # Email
        subject = f"Purchase Order {order_number}"
        body = f"Attached is the purchase order {order_number} generated on {datetime.now().strftime('%Y-%m-%d')}."

        await send_email(
            recipient=recipient_email,
            subject=subject,
            body=body,
            attachment_bytes=attachment_bytes,
            attachment_filename=f"order_{order_number}.pdf"
        )

        logging.info(f"✅ Email sent for order {order_number} to {recipient_email}")
        return {"message": f"Purchase Order {order_number} emailed successfully"}

    except Exception as e:
        logging.exception("❌ Failed to send purchase order email")
        raise HTTPException(status_code=500, detail=f"Failed to send email: {str(e)}")

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/order_email.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/whatsapp.py
from fastapi import APIRouter, Request, HTTPException
from pydantic import BaseModel
from backend.twilio.twilio_utils import send_whatsapp_message
from backend.database import get_db_connection
import logging
import json
from pathlib import Path

# Logging setup
logging.basicConfig(
    filename="logs/whatsapp_log.txt",
    level=logging.INFO,
    format="[%(asctime)s] %(message)s",
)

router = APIRouter(prefix="/whatsapp", tags=["whatsapp"])

class WhatsAppMessage(BaseModel):
    order_number: str
    message: str
    to_number: str

@router.post("/send")
async def send_whatsapp(msg: WhatsAppMessage):
    try:
        sid = send_whatsapp_message(
            to_number=msg.to_number,
            message=f"Purchase Order {msg.order_number}: {msg.message}",
        )
        # Log message SID mapping
        mapping_file = Path("logs/message_sid_mapping.json")
        mapping = {}
        if mapping_file.exists():
            with open(mapping_file, "r") as f:
                mapping = json.load(f)
        mapping[sid] = {"order_number": msg.order_number, "to_number": msg.to_number}
        with open(mapping_file, "w") as f:
            json.dump(mapping, f, indent=2)
        logging.info(
            json.dumps(
                {
                    "action": "sent_message",
                    "order_number": msg.order_number,
                    "to": msg.to_number,
                    "message_sid": sid,
                }
            )
        )
        return {"message": "Message sent", "sid": sid}
    except Exception as e:
        logging.error(json.dumps({"error": str(e), "type": "send"}))
        raise HTTPException(status_code=500, detail=f"Failed to send message: {str(e)}")

@router.post("/webhook")
async def whatsapp_webhook(request: Request):
    try:
        form_data = await request.form()
        from_number = form_data.get("From", "")
        message = form_data.get("Body", "").lower().strip()
        message_sid = form_data.get("MessageSid", "")

        logging.info(
            json.dumps(
                {
                    "action": "received_message",
                    "from": from_number,
                    "message": message,
                    "message_sid": message_sid,
                }
            )
        )

        # Load message SID mapping
        mapping_file = Path("logs/message_sid_mapping.json")
        mapping = {}
        if mapping_file.exists():
            with open(mapping_file, "r") as f:
                mapping = json.load(f)

        order_info = mapping.get(message_sid)
        if not order_info:
            logging.error(
                json.dumps({"error": f"No order found for message SID {message_sid}"})
            )
            raise HTTPException(status_code=404, detail="No order found")

        order_number = order_info["order_number"]

        if "authorised" in message:
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "UPDATE orders SET status = 'Authorised' WHERE order_number = ?",
                    (order_number,)
                )
                cursor.execute(
                    """
                    INSERT INTO audit_trail (order_id, action, details, user_id)
                    VALUES ((SELECT id FROM orders WHERE order_number = ?), 'Authorised', ?, 0)
                    """,
                    (order_number, f"Order authorised via WhatsApp from {from_number}"),
                )
                conn.commit()

            logging.info(
                json.dumps(
                    {
                        "action": "order_authorised",
                        "order_number": order_number,
                        "from": from_number,
                    }
                )
            )
            return {"message": "Order authorised"}
        else:
            return {"message": "Message received"}
    except Exception as e:
        logging.error(json.dumps({"error": str(e), "type": "webhook"}))
        raise HTTPException(status_code=500, detail="Error processing webhook")

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/whatsapp.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/users.py

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/users.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/order_receiving.py
from fastapi import APIRouter, HTTPException
from datetime import datetime
import sqlite3
from pathlib import Path
import json
from pydantic import BaseModel
from typing import List

router = APIRouter(tags=["orders"])

def log_event(filename: str, data: dict):
    log_path = Path(f"logs/{filename}")
    log_path.parent.mkdir(parents=True, exist_ok=True)
    with log_path.open("a", encoding="utf-8") as f:
        timestamp = datetime.now().isoformat()
        f.write(f"[{timestamp}] {json.dumps(data, ensure_ascii=False)}\n")

class ReceivedItem(BaseModel):
    item_id: int
    received_qty: float

class ReceivePayload(BaseModel):
    receipt_date: str  # From user input on frontend
    items: List[ReceivedItem]

@router.post("/receive/{order_id}", response_model=dict)
async def receive_order(order_id: int, payload: ReceivePayload):
    items = payload.items
    receipt_date = payload.receipt_date  # e.g., "2025-05-13"

    try:
        with sqlite3.connect("data/orders.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute("SELECT status FROM orders WHERE id = ?", (order_id,))
            status_row = cursor.fetchone()
            if not status_row:
                raise HTTPException(status_code=404, detail="Order not found")

            order_status = status_row["status"]
            if order_status not in ("Pending", "Authorised", "Partially Received"):
                raise HTTPException(
                    status_code=403,
                   detail=f"Order must be 'Pending', 'Authorised', or 'Partially Received' before receiving. Current status: {order_status}"
                )

            all_fully_received = True

            for item in items:
                item_id = item.item_id
                qty_received = item.received_qty

                # Fetch existing values
                cursor.execute("""
                    SELECT qty_ordered, qty_received
                    FROM order_items
                    WHERE id = ? AND order_id = ?
                """, (item_id, order_id))
                row = cursor.fetchone()
                if not row:
                    raise HTTPException(status_code=404, detail=f"Item {item_id} not found")

                qty_ordered = row["qty_ordered"]
                current_qty_received = row["qty_received"] or 0
                new_qty_received = current_qty_received + qty_received

                if new_qty_received > qty_ordered:
                    raise HTTPException(
                        status_code=400,
                        detail=f"Received quantity for item {item_id} exceeds ordered quantity"
                    )

                # Update order_items summary
                cursor.execute("""
                    UPDATE order_items
                    SET qty_received = ?, received_date = ?
                    WHERE id = ?
                """, (new_qty_received, receipt_date, item_id))

                # Insert detailed record into received_item_logs
                cursor.execute("""
                    INSERT INTO received_item_logs (order_item_id, qty_received, received_by_user_id, received_date)
                    VALUES (?, ?, ?, ?)
                """, (item_id, qty_received, 0, receipt_date))  # TODO: Replace 0 with real user_id when available

                if new_qty_received < qty_ordered:
                    all_fully_received = False

            # Update overall order status
            new_status = "Received" if all_fully_received else "Partially Received"
            cursor.execute("""
                UPDATE orders
                SET status = ?, received_date = ?
                WHERE id = ?
            """, (new_status, receipt_date, order_id))

            # Log audit trail entry
            cursor.execute("""
                INSERT INTO audit_trail (order_id, action, details, action_date, user_id)
                VALUES (?, 'Received', ?, ?, ?)
            """, (
                order_id,
                f"Order received: {json.dumps([i.dict() for i in items])}",
                datetime.now().isoformat(),
                0  # TODO: replace with logged-in user
            ))

            conn.commit()

            log_event("order_receiving_log.txt", {
                "action": "receive",
                "order_id": order_id,
                "items": [i.dict() for i in items],
                "status": new_status,
                "receipt_date": receipt_date
            })

            return {"message": "Order received successfully", "status": new_status}

    except sqlite3.Error as e:
        log_event("order_receiving_log.txt", {"error": str(e), "type": "sqlite"})
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        log_event("order_receiving_log.txt", {"error": str(e), "type": "general"})
        raise HTTPException(status_code=500, detail=f"Failed to receive order: {str(e)}")

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/order_receiving.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/html_routes.py
from fastapi import APIRouter, Request, HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from backend.database import get_db_connection
import logging

# Logging setup
logging.basicConfig(
    filename="logs/server.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

router = APIRouter()
templates = Jinja2Templates(directory="frontend/templates")


@router.get("/orders/new", response_class=HTMLResponse)
async def new_order_page(request: Request):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            # Fetch requesters
            cursor.execute("SELECT id, name FROM requesters ORDER BY name")
            requesters = [dict(row) for row in cursor.fetchall()]

            # Fetch suppliers
            cursor.execute("SELECT id, name FROM suppliers ORDER BY name")
            suppliers = [dict(row) for row in cursor.fetchall()]

            # Fetch items
            cursor.execute("SELECT item_code, item_description FROM items ORDER BY item_code")
            items = [dict(row) for row in cursor.fetchall()]

            # Fetch projects
            cursor.execute("SELECT project_code, project_name FROM projects ORDER BY project_code")
            projects = [dict(row) for row in cursor.fetchall()]

            # Fetch business details
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            row = cursor.fetchone()
            if not row:
                logging.error("No business details found in database")
                raise HTTPException(status_code=500, detail="No business details found in database")

            business_details = dict(row)
            logging.info(f"Business details fetched: {business_details}")

        return templates.TemplateResponse(
            "new_order.html",
            {
                "request": request,
                "requesters": requesters,
                "suppliers": suppliers,
                "items": items,
                "projects": projects,
                "business_details": business_details
            }
        )
    except Exception as e:
        logging.error(f"Error rendering new order page: {str(e)}")
        raise


@router.get("/orders/pending_orders", response_class=HTMLResponse)
async def pending_orders_page(request: Request):
    try:
        return templates.TemplateResponse("pending_orders.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering pending orders page: {str(e)}")
        raise


@router.get("/mobile/mobile_authorisations", response_class=HTMLResponse)
async def mobile_authorisations_screen(request: Request):
    try:
        return templates.TemplateResponse("mobile/mobile_authorisations.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering mobile authorisations screen: {str(e)}")
        raise


@router.get("/orders/authorisations_per_user", response_class=HTMLResponse)
async def authorisations_per_user_screen(request: Request):
    try:
        return templates.TemplateResponse("authorisations_per_user.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering authorisations_per_user screen: {str(e)}")
        raise


@router.get("/orders/{order_id}", response_class=HTMLResponse)
async def view_order_by_id(order_id: int, request: Request):
    try:
        return templates.TemplateResponse("order_detail.html", {"request": request, "order_id": order_id})
    except Exception as e:
        logging.error(f"Error rendering order detail page: {str(e)}")
        raise

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/html_routes.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__init__.py
from .lookups import router as lookups_router
from .orders import router as orders_router
from .admin import admin_router
from .auth import router as auth_router
from .order_queries import router as order_queries_router
from .order_attachments import router as attachments_router
from .order_receiving import router as order_receiving_router
from .utils import router as utils_router

routers = [
    lookups_router,
    orders_router,
    admin_router,
    auth_router,
    order_queries_router,
    attachments_router,
    order_receiving_router,
    utils_router
]

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__init__.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/orders.py
import logging
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Optional
import sqlite3
from datetime import datetime

from backend.utils.db_utils import handle_db_errors, log_success, log_warning
from backend.utils.order_utils import calculate_order_total
from backend.database import create_order, get_db_connection

router = APIRouter(tags=["orders"])

# --- Models ---
class OrderItemCreate(BaseModel):
    item_code: str
    item_description: str
    project: Optional[str] = None
    qty_ordered: float
    price: float

class OrderCreate(BaseModel):
    order_number: str
    status: str
    order_note: Optional[str] = None
    note_to_supplier: Optional[str] = None
    supplier_id: int
    requester_id: int
    payment_terms: Optional[str] = None  # ✅ Add this
    items: List[OrderItemCreate]
    auth_band_required: Optional[int] = None

class OrderUpdate(BaseModel):
    status: Optional[str] = None
    order_note: Optional[str] = None
    note_to_supplier: Optional[str] = None
    supplier_id: Optional[int] = None
    requester_id: Optional[int] = None

class ReceiveItem(BaseModel):
    item_id: int
    qty_received: float

class ReceivePayload(BaseModel):
    items: List[ReceiveItem]

# --- Routes ---
@router.post("")
async def create_new_order(order: OrderCreate):
    try:
        logging.info(f"🔍 Incoming order: {order}")
        total = calculate_order_total([item.dict() for item in order.items])
        order_data = {
            "order_number": order.order_number,
             "status": order.status,
            "total": total,
            "order_note": order.order_note,
            "note_to_supplier": order.note_to_supplier,
            "supplier_id": order.supplier_id,
            "requester_id": order.requester_id,
            "payment_terms": order.payment_terms,  # ✅ Add this
            "auth_band_required": order.auth_band_required
        }
        items = [item.dict() for item in order.items]
        result = create_order(order_data, items)
        log_success("order", "created", f"Order {order.order_number} with total R{total}")
        return {"message": "Order created successfully", "order_id": result["id"]}
    except Exception as e:
        logging.exception("❌ Order creation failed")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("")
@handle_db_errors(entity="orders", action="fetching")
async def get_orders():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT o.id, o.order_number, o.status, o.created_date, o.received_date, o.total,
               o.order_note, o.note_to_supplier, o.supplier_id, o.requester_id,
               s.name as supplier_name, r.name as requester_name
        FROM orders o
        LEFT JOIN suppliers s ON o.supplier_id = s.id
        LEFT JOIN requesters r ON o.requester_id = r.id
    """)
    rows = cursor.fetchall()
    conn.close()
    result = [dict(row) for row in rows]
    log_success("orders", "fetched", f"{len(result)} items")
    return {"orders": result}

@router.get("/{order_id}")
@handle_db_errors(entity="order", action="fetching")
async def get_order(order_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT o.id, o.order_number, o.status, o.created_date, o.received_date, o.total,
               o.order_note, o.note_to_supplier, o.supplier_id, o.requester_id,
               s.name as supplier_name, r.name as requester_name
        FROM orders o
        LEFT JOIN suppliers s ON o.supplier_id = s.id
        LEFT JOIN requesters r ON o.requester_id = r.id
        WHERE o.id = ?
    """, (order_id,))
    row = cursor.fetchone()
    conn.close()
    if not row:
        log_warning("order", f"No order found with id {order_id}")
        raise HTTPException(status_code=404, detail="Order not found")
    log_success("order", "fetched", f"Order {row['order_number']}")
    return dict(row)

@router.put("/{order_id}")
@handle_db_errors(entity="order", action="updating")
async def update_order(order_id: int, order: OrderUpdate):
    conn = get_db_connection()
    cursor = conn.cursor()
    updates = {}
    if order.status:
        updates["status"] = order.status
    if order.order_note is not None:
        updates["order_note"] = order.order_note
    if order.note_to_supplier is not None:
        updates["note_to_supplier"] = order.note_to_supplier
    if order.supplier_id:
        updates["supplier_id"] = order.supplier_id
    if order.requester_id:
        updates["requester_id"] = order.requester_id

    if not updates:
        raise HTTPException(status_code=400, detail="No fields provided for update")

    set_clause = ", ".join(f"{k} = ?" for k in updates.keys())
    values = tuple(updates.values()) + (order_id,)
    cursor.execute(f"UPDATE orders SET {set_clause} WHERE id = ?", values)

    if cursor.rowcount == 0:
        conn.close()
        log_warning("order", f"No order found with id {order_id}")
        raise HTTPException(status_code=404, detail="Order not found")

    conn.commit()
    conn.close()
    log_success("order", "updated", f"Order {order_id} updated with fields {list(updates.keys())}")
    return {"message": "Order updated successfully"}

@router.get("/api/items_for_order/{order_id}")
@handle_db_errors(entity="order_items", action="fetching")
async def get_items_for_order(order_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, item_code, item_description, project, qty_ordered, qty_received,
               received_date, price, total
        FROM order_items
        WHERE order_id = ?
    """, (order_id,))
    rows = cursor.fetchall()
    conn.close()
    result = [dict(row) for row in rows]
    log_success("order_items", "fetched", f"{len(result)} items for order {order_id}")
    return {"items": result}

@router.post("/orders/receive/{order_id}")
@handle_db_errors(entity="receive", action="processing")
async def mark_items_as_received(order_id: int, payload: ReceivePayload):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    for item in payload.items:
        cursor.execute("""
            UPDATE order_items
            SET qty_received = ?, received_date = ?
            WHERE id = ? AND order_id = ?
        """, (item.qty_received, datetime.now().strftime("%Y-%m-%d"), item.item_id, order_id))

    cursor.execute("""
        UPDATE orders
        SET status = 'Received', received_date = ?
        WHERE id = ? AND status IN ('Pending', 'Awaiting Authorisation')
    """, (datetime.now().strftime("%Y-%m-%d"), order_id))

    conn.commit()
    conn.close()
    log_success("receive", "processed", f"Marked {len(payload.items)} items as received")
    return {"message": "Items marked as received"}

@router.get("/api/received_orders")
@handle_db_errors(entity="orders", action="fetching received")
async def get_received_orders():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT o.id, o.order_number, o.status, o.created_date, o.received_date, o.total,
               o.order_note, o.note_to_supplier, o.supplier_id, o.requester_id,
               s.name as supplier, r.name as requester
        FROM orders o
        LEFT JOIN suppliers s ON o.supplier_id = s.id
        LEFT JOIN requesters r ON o.requester_id = r.id
        WHERE o.status IN ('Received', 'Partially Received')
        ORDER BY o.order_number ASC
    """)
    rows = cursor.fetchall()
    conn.close()
    result = [dict(row) for row in rows]
    log_success("received_orders", "fetched", f"{len(result)} received/partial orders")
    return {"orders": result}

@router.get("/api/receipt_logs/{order_id}")
@handle_db_errors(entity="received_item_logs", action="fetching")
async def get_receipt_logs(order_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT ril.order_item_id, ril.qty_received, ril.received_date, u.username
        FROM received_item_logs ril
        LEFT JOIN users u ON ril.received_by_user_id = u.id
        WHERE ril.order_item_id IN (
            SELECT id FROM order_items WHERE order_id = ?
        )
        ORDER BY ril.received_date ASC
    """, (order_id,))
    rows = cursor.fetchall()
    conn.close()

    result = [dict(row) for row in rows]
    log_success("receipt_logs", "fetched", f"{len(result)} logs for order {order_id}")
    return {"logs": result}

@router.get("/api/audit_trail_orders")
@handle_db_errors(entity="orders", action="fetching all")
async def get_audit_trail_orders():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT o.id, o.order_number, o.status, o.created_date, o.received_date, o.total,
               o.order_note, o.note_to_supplier, o.supplier_id, o.requester_id,
               s.name as supplier, r.name as requester
        FROM orders o
        LEFT JOIN suppliers s ON o.supplier_id = s.id
        LEFT JOIN requesters r ON o.requester_id = r.id
        ORDER BY o.created_date DESC
    """)
    rows = cursor.fetchall()
    conn.close()
    result = [dict(row) for row in rows]
    log_success("audit_trail_orders", "fetched", f"{len(result)} total orders for audit trail")
    return {"orders": result}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/orders.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/admin.py
from fastapi import APIRouter

# Import the full CRUD lookups router to expose under /admin
from .lookups import router as lookups_router

# Create the admin router
admin_router = APIRouter(
    tags=["admin"]
)

# Mount all CRUD endpoints under the /admin prefix
admin_router.include_router(lookups_router)

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/admin.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/utils.py
# backend/endpoints/utils.py

from fastapi import APIRouter, HTTPException, Request
import logging
from pathlib import Path
from pydantic import BaseModel
from typing import Dict, Any
import json

router = APIRouter(tags=["utils"])

# --- Setup Log File ---
log_path = Path("logs/client.log")
log_path.parent.mkdir(exist_ok=True)

# File logger for structured client logs
logger = logging.getLogger("client")
logger.setLevel(logging.INFO)
file_handler = logging.FileHandler(log_path)
file_handler.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
logger.addHandler(file_handler)


# --- Structured Log Endpoint ---
class ClientLog(BaseModel):
    level: str
    message: str
    details: Dict[str, Any]
    timestamp: str

@router.post("/log_client")
async def log_client(log: ClientLog) -> Dict[str, str]:
    """
    Log client-side messages to a server-side log file.

    Args:
        log: ClientLog object containing level, message, details, and timestamp.

    Returns:
        Dict with status message.

    Raises:
        HTTPException: If logging fails.
    """
    try:
        log_message = f"{log.message} | Details: {json.dumps(log.details)}"
        logger.log(
            getattr(logging, log.level.upper(), logging.INFO),
            log_message
        )
        return {"status": "Log recorded"}
    except Exception as e:
        logger.error(f"Failed to log client message: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Failed to log message: {str(e)}")


# --- Raw JS-Based Logging Endpoint (used by utils.js -> logToServer) ---
@router.post("/log")
async def log_from_frontend(request: Request):
    """
    Accept log submissions from frontend via utils.js and logToServer().
    """
    try:
        payload = await request.json()
        level = payload.get("level", "INFO").upper()
        message = payload.get("message", "")
        details = payload.get("details", {})

        log_entry = f"{level} | {message} | {json.dumps(details)}"

        if level == "ERROR":
            logger.error(log_entry)
        elif level == "WARNING":
            logger.warning(log_entry)
        else:
            logger.info(log_entry)

        return {"status": "ok"}
    except Exception as e:
        logger.exception("Failed to process /log call from frontend")
        raise HTTPException(status_code=500, detail=f"Failed to log message: {str(e)}")

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/utils.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/new_order_pdf_generator.py
# File: backend/endpoints/new_order_pdf_generator.py

from fastapi import APIRouter, Request, HTTPException
from fastapi.responses import StreamingResponse
from weasyprint import HTML
from jinja2 import Environment, FileSystemLoader
import io
import os
import logging
from backend.database import get_db_connection  # ✅ Pulls live business details from DB

router = APIRouter()

# ✅ Relative paths for portability
TEMPLATE_PATH = os.path.join(os.path.dirname(__file__), "../../frontend/templates")
LOGO_PATH = "file://" + os.path.abspath(
    os.path.join(os.path.dirname(__file__), "../../frontend/static/images/universal_logo.jpg")
)
env = Environment(loader=FileSystemLoader(TEMPLATE_PATH))


@router.post("/preview_pdf_new_order")
async def generate_preview_pdf_for_new_order(request: Request):
    try:
        form_data = await request.json()

        # ✅ Enforce required fields
        required_fields = ["order_number", "created_date", "supplier_name", "requester_name", "items"]
        missing = [field for field in required_fields if field not in form_data or form_data[field] is None]
        if missing:
            raise HTTPException(status_code=422, detail=f"Missing required fields: {', '.join(missing)}")

        # ✅ Use DB-sourced business details — not hardcoded
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            business_details = cursor.fetchone()
            if not business_details:
                raise HTTPException(status_code=404, detail="Business details not found")

        # ✅ Sanitize and prepare order
        order = {
            "order_number": form_data["order_number"],
            "status": form_data.get("status", "Pending"),
            "created_date": form_data["created_date"],
            "supplier": form_data["supplier_name"],
            "requester": form_data["requester_name"],
            "order_note": form_data.get("order_note", ""),
            "note_to_supplier": form_data.get("note_to_supplier", ""),
            "total": form_data.get("total", 0)
        }

        # ✅ Compute item-level totals safely
        items = form_data.get("items", [])
        for item in items:
            try:
                qty = float(item.get("qty_ordered", 0))
                price = float(item.get("price", 0))
                item["total"] = qty * price
            except Exception:
                item["total"] = 0.0

        html_content = env.get_template("pdf_template.html").render(
            order=order,
            items=items,
            business_details=business_details,
            logo_path=LOGO_PATH
        )

        pdf_io = io.BytesIO()
        HTML(string=html_content).write_pdf(pdf_io)
        pdf_io.seek(0)

        return StreamingResponse(pdf_io, media_type="application/pdf", headers={
            "Content-Disposition": "inline; filename=preview_order.pdf"
        })

    except Exception as e:
        logging.exception("Preview PDF generation failed")
        raise HTTPException(status_code=500, detail=f"Failed to generate preview PDF: {str(e)}")

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/new_order_pdf_generator.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/requisition_attachments.py
# File: backend/endpoints/requisition_attachments.py

from fastapi import APIRouter, UploadFile, File, Form, HTTPException, Request
from fastapi.responses import FileResponse
from pydantic import BaseModel
from typing import List
from pathlib import Path
from datetime import datetime
import shutil
import sqlite3

router = APIRouter(tags=["requisitions"])

DB_PATH = Path("data/orders.db")
UPLOADS_DIR = Path("data/uploads")
UPLOADS_DIR.mkdir(parents=True, exist_ok=True)

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

# --- Upload attachment using requisition_id only ---
@router.post("/upload_attachment")
async def upload_requisition_attachment(
    requisition_id: int = Form(...),
    file: UploadFile = File(...)
):
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    stored_filename = f"{timestamp}_{file.filename}"
    stored_path = UPLOADS_DIR / stored_filename

    try:
        with stored_path.open("wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        conn = get_db_connection()
        with conn:
            conn.execute(
                """
                INSERT INTO requisition_attachments 
                (requisition_id, filename, file_path, upload_date)
                VALUES (?, ?, ?, ?)
                """,
                (
                    requisition_id,
                    file.filename,
                    str(stored_path),
                    datetime.now().isoformat()
                )
            )

        return {"message": "Attachment uploaded successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Upload failed: {str(e)}")

# --- Get attachments by requisition_id ---
@router.get("/attachments/{requisition_id}")
def get_requisition_attachments(requisition_id: int):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute(
            "SELECT filename, file_path FROM requisition_attachments WHERE requisition_id = ?",
            (requisition_id,)
        )
        results = cursor.fetchall()

        return {
            "attachments": [
                {"filename": row["filename"], "file_path": row["file_path"]}
                for row in results
            ]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error retrieving attachments: {str(e)}")

# --- Serve uploaded file ---
@router.get("/uploads/{filename}")
def serve_uploaded_file(filename: str):
    file_path = UPLOADS_DIR / filename
    if not file_path.exists():
        raise HTTPException(status_code=404, detail="File not found")
    return FileResponse(file_path)

# --- Models ---
class RequisitionItem(BaseModel):
    description: str
    quantity: int

class RequisitionPayload(BaseModel):
    requisitioner_id: int
    requisition_number: str
    requisition_date: str
    requisition_note: str
    items: List[RequisitionItem]

# --- Submit requisition and relink orphaned attachments ---
@router.post("/submit_requisition")
async def submit_requisition(data: RequisitionPayload, request: Request):
    conn = get_db_connection()
    try:
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO requisitions (
                requisitioner_id, requisition_number, requisition_date, requisition_note
            ) VALUES (?, ?, ?, ?)
        """, (
            data.requisitioner_id,
            data.requisition_number,
            data.requisition_date,
            data.requisition_note
        ))
        requisition_id = cursor.lastrowid

        for item in data.items:
            cursor.execute("""
                INSERT INTO requisition_items (requisition_id, description, quantity)
                VALUES (?, ?, ?)
            """, (requisition_id, item.description, item.quantity))

        # No more relinking by number — IDs only from now on

        conn.commit()
        return {"message": "Requisition submitted successfully", "id": requisition_id}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        conn.close()

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/requisition_attachments.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/order_queries.py
from pydantic import BaseModel
from backend.database import get_db_connection
from fastapi import APIRouter, HTTPException, Query
from typing import Optional
from datetime import datetime
import sqlite3
from pathlib import Path
import json

router = APIRouter(tags=["orders"])

def log_event(filename: str, data: dict):
    log_path = Path(f"logs/{filename}")
    log_path.parent.mkdir(parents=True, exist_ok=True)
    with log_path.open("a", encoding="utf-8") as f:
        timestamp = datetime.now().isoformat()
        f.write(f"[{timestamp}] {json.dumps(data, ensure_ascii=False)}\n")

@router.get("/pending_orders")
def get_pending_orders(
    start_date: Optional[str] = Query(None),
    end_date: Optional[str] = Query(None),
    requester: Optional[str] = Query(None),
    supplier: Optional[str] = Query(None),
    status: Optional[str] = Query(None)
):
    try:
        filters = []
        params = []

        def validate_date(date_str):
            if not date_str:
                return None
            try:
                datetime.strptime(date_str, "%Y-%m-%d")
                return date_str
            except ValueError:
                raise HTTPException(status_code=400, detail=f"Invalid date format: {date_str}. Use yyyy-mm-dd.")

        filters.append("o.status IN ('Pending', 'Waiting for Approval', 'Awaiting Authorisation', 'Authorised')")

        if start_date:
            start_date = validate_date(start_date)
            filters.append("DATE(o.created_date) >= DATE(?)")
            params.append(start_date)

        if end_date:
            end_date = validate_date(end_date)
            filters.append("DATE(o.created_date) <= DATE(?)")
            params.append(end_date)

        if requester:
            filters.append("r.name LIKE ?")
            params.append(f"%{requester}%")

        if supplier:
            filters.append("s.name LIKE ?")
            params.append(f"%{supplier}%")

        if status and status != "All":
            filters.append("o.status = ?")
            params.append(status)

        where_clause = " AND ".join(filters) if filters else "1=1"

        with sqlite3.connect("data/orders.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute(f"""
                SELECT
                    o.id, o.created_date, o.order_number,
                    r.name AS requester, s.name AS supplier,
                    o.order_note, o.note_to_supplier, o.total, o.status
                FROM orders o
                LEFT JOIN requesters r ON o.requester_id = r.id
                LEFT JOIN suppliers s ON o.supplier_id = s.id
                WHERE {where_clause}
                ORDER BY o.created_date DESC
            """, params)
            orders = [dict(row) for row in cursor.fetchall()]
            for order in orders:
                try:
                    order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y")
                except ValueError:
                    try:
                        order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%dT%H:%M:%S.%f").strftime("%d/%m/%Y")
                    except ValueError:
                        order["created_date"] = datetime.strptime(order["created_date"], "%Y/%m/%d").strftime("%d/%m/%Y")
        log_event("new_orders_log.txt", {"action": "fetch_pending_orders", "count": len(orders)})
        return {"orders": orders}
    except sqlite3.OperationalError as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "sqlite_query", "query": "pending_orders"})
        raise HTTPException(status_code=500, detail=f"Database query error: {e}")
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "pending_orders"})
        raise HTTPException(status_code=500, detail=f"Failed to load pending orders: {e}")

@router.get("/received_orders")
def get_received_orders(
    start_date: Optional[str] = Query(None),
    end_date: Optional[str] = Query(None),
    requester: Optional[str] = Query(None),
    supplier: Optional[str] = Query(None)
):
    try:
        filters = ["o.status = 'Received'"]
        params = []

        def validate_date(date_str):
            if not date_str:
                return None
            try:
                datetime.strptime(date_str, "%Y-%m-%d")
                return date_str
            except ValueError:
                raise HTTPException(status_code=400, detail=f"Invalid date format: {date_str}. Use yyyy-mm-dd.")

        if start_date:
            start_date = validate_date(start_date)
            filters.append("DATE(o.created_date) >= DATE(?)")
            params.append(start_date)

        if end_date:
            end_date = validate_date(end_date)
            filters.append("DATE(o.created_date) <= DATE(?)")
            params.append(end_date)

        if requester:
            filters.append("r.name LIKE ?")
            params.append(f"%{requester}%")

        if supplier:
            filters.append("s.name LIKE ?")
            params.append(f"%{supplier}%")

        where_clause = " AND ".join(filters) if filters else "1=1"

        with sqlite3.connect("data/orders.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute(f"""
                SELECT
                    o.id, o.created_date, o.order_number,
                    r.name AS requester, s.name AS supplier,
                    o.order_note, o.note_to_supplier, o.total, o.status
                FROM orders o
                LEFT JOIN requesters r ON o.requester_id = r.id
                LEFT JOIN suppliers s ON o.supplier_id = s.id
                WHERE {where_clause}
                ORDER BY o.created_date DESC
            """, params)
            orders = [dict(row) for row in cursor.fetchall()]
            for order in orders:
                try:
                    order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y")
                except ValueError:
                    try:
                        order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%dT%H:%M:%S.%f").strftime("%d/%m/%Y")
                    except ValueError:
                        order["created_date"] = datetime.strptime(order["created_date"], "%Y/%m/%d").strftime("%d/%m/%Y")
        log_event("new_orders_log.txt", {"action": "fetch_received_orders", "count": len(orders)})
        return {"orders": orders}
    except sqlite3.OperationalError as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "sqlite_query", "query": "received_orders"})
        raise HTTPException(status_code=500, detail=f"Database query error: {e}")
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "received_orders"})
        raise HTTPException(status_code=500, detail=f"Failed to load received orders: {e}")

@router.get("/partially_delivered")
def get_partially_delivered_orders():
    try:
        with sqlite3.connect("data/orders.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute("""
                SELECT DISTINCT o.id, o.created_date, o.order_number,
                    r.name AS requester, s.name AS supplier,
                    o.order_note, o.note_to_supplier, o.total, o.status
                FROM orders o
                LEFT JOIN requesters r ON o.requester_id = r.id
                LEFT JOIN suppliers s ON o.supplier_id = s.id
                JOIN order_items oi ON o.id = oi.order_id
                WHERE oi.qty_received < oi.qty_ordered
                AND o.status != 'Cancelled'
                ORDER BY o.created_date DESC
            """)
            orders = [dict(row) for row in cursor.fetchall()]
            return {"orders": orders}
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "partially_delivered"})
        raise HTTPException(status_code=500, detail=f"Failed to fetch partially delivered orders: {e}")

@router.get("/items_for_order/{order_id}")
def get_items_for_order(order_id: int):
    try:
        with sqlite3.connect("data/orders.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, item_code, item_description, project, qty_ordered, qty_received, received_date, price,
                       (qty_ordered * price) AS total
                FROM order_items
                WHERE order_id = ?
            """, (order_id,))
            items = [dict(row) for row in cursor.fetchall()]
        log_event("new_orders_log.txt", {"action": "fetch_items_for_order", "order_id": order_id, "count": len(items)})
        return {"items": items}
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "items_for_order"})
        raise HTTPException(status_code=500, detail=f"Failed to fetch items: {e}")

@router.get("/audit_trail")
def get_audit_trail(
    start_date: Optional[str] = Query(None),
    end_date: Optional[str] = Query(None),
    requester: Optional[str] = Query(None),
    supplier: Optional[str] = Query(None),
    status: Optional[str] = Query(None)
):
    try:
        filters = []
        params = []

        def validate_date(date_str):
            if not date_str:
                return None
            try:
                datetime.strptime(date_str, "%Y-%m-%d")
                return date_str
            except ValueError:
                raise HTTPException(status_code=400, detail=f"Invalid date format: {date_str}. Use yyyy-mm-dd.")

        if start_date:
            start_date = validate_date(start_date)
            filters.append("DATE(o.created_date) >= DATE(?)")
            params.append(start_date)

        if end_date:
            end_date = validate_date(end_date)
            filters.append("DATE(o.created_date) <= DATE(?)")
            params.append(end_date)

        if requester:
            filters.append("r.name LIKE ?")
            params.append(f"%{requester}%")

        if supplier:
            filters.append("s.name LIKE ?")
            params.append(f"%{supplier}%")

        if status and status != "All":
            filters.append("o.status = ?")
            params.append(status)

        where_clause = " AND ".join(filters) if filters else "1=1"

        with sqlite3.connect("data/orders.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()

            cursor.execute(f"""
                SELECT
                    o.id, o.created_date, o.received_date, o.order_number,
                    r.name AS requester, s.name AS supplier,
                    o.order_note, o.note_to_supplier, o.total, o.status,
                    (
                        SELECT 
                            COALESCE(at.action, 'No actions yet') ||
                            CASE 
                                WHEN u.username IS NOT NULL THEN ' by ' || u.username 
                                ELSE '' 
                            END ||
                            CASE 
                                WHEN at.action_date IS NOT NULL THEN ' at ' || at.action_date 
                                ELSE '' 
                            END
                        FROM audit_trail at
                        LEFT JOIN users u ON at.user_id = u.id
                        WHERE at.order_id = o.id
                        ORDER BY at.action_date DESC
                        LIMIT 1
                    ) AS last_action
                FROM orders o
                LEFT JOIN requesters r ON o.requester_id = r.id
                LEFT JOIN suppliers s ON o.supplier_id = s.id
                WHERE {where_clause}
                ORDER BY o.created_date DESC
            """, params)

            orders = [dict(row) for row in cursor.fetchall()]

            for order in orders:
                try:
                    order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y")
                except:
                    pass
                if order["received_date"]:
                    try:
                        order["received_date"] = datetime.strptime(order["received_date"], "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y")
                    except:
                        pass

                cursor.execute("""
                    SELECT id, item_code, item_description, project, qty_ordered, qty_received, received_date
                    FROM order_items
                    WHERE order_id = ?
                """, (order["id"],))
                order["items"] = [dict(item) for item in cursor.fetchall()]

        log_event("new_orders_log.txt", {"action": "fetch_audit_trail", "count": len(orders)})
        return {"orders": orders}

    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "audit_trail"})
        raise HTTPException(status_code=500, detail=f"Failed to load audit trail: {e}")
    
@router.get("/last_audit_action/{order_id}")
def get_last_audit_action(order_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT details, action_date
        FROM audit_trail
        WHERE order_id = ?
        ORDER BY action_date DESC
        LIMIT 1
    """, (order_id,))
    row = cursor.fetchone()
    conn.close()

    if row:
        return {"details": row["details"], "action_date": row["action_date"]}
    else:
        return {"details": "No actions yet", "action_date": None}

@router.get("/order_summary")
def get_order_summary():
    try:
        with sqlite3.connect("data/orders.db") as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT
                    COALESCE(SUM(CASE WHEN status = 'Pending' THEN 1 ELSE 0 END), 0) AS pending,
                    COALESCE(SUM(CASE WHEN status = 'Awaiting Authorisation' THEN 1 ELSE 0 END), 0) AS awaiting,
                    COALESCE(SUM(CASE WHEN status = 'Authorised' THEN 1 ELSE 0 END), 0) AS authorised,
                    COALESCE(SUM(CASE WHEN status = 'Received' THEN 1 ELSE 0 END), 0) AS received,
                    COUNT(*) AS total
                FROM orders
            """)
            row = cursor.fetchone()
            return {
                "pending": row[0],
                "awaiting": row[1],
                "authorised": row[2],
                "received": row[3],
                "total": row[4]
            }
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "order_summary"})
        raise HTTPException(status_code=500, detail=f"Failed to load order summary: {e}")

@router.get("/cod_orders")
def get_cod_orders(
    start_date: Optional[str] = Query(None),
    end_date: Optional[str] = Query(None),
    requester: Optional[str] = Query(None),
    supplier: Optional[str] = Query(None),
    status: Optional[str] = Query(None)
):
    try:
        filters = ["o.payment_terms = 'COD'"]
        params = []

        def validate_date(date_str):
            if not date_str:
                return None
            try:
                datetime.strptime(date_str, "%Y-%m-%d")
                return date_str
            except ValueError:
                raise HTTPException(status_code=400, detail=f"Invalid date format: {date_str}. Use yyyy-mm-dd.")

        if start_date:
            start_date = validate_date(start_date)
            filters.append("DATE(o.created_date) >= DATE(?)")
            params.append(start_date)

        if end_date:
            end_date = validate_date(end_date)
            filters.append("DATE(o.created_date) <= DATE(?)")
            params.append(end_date)

        if requester:
            filters.append("r.name LIKE ?")
            params.append(f"%{requester}%")

        if supplier:
            filters.append("s.name LIKE ?")
            params.append(f"%{supplier}%")

        if status and status != "All":
            filters.append("o.status = ?")
            params.append(status)

        where_clause = " AND ".join(filters)

        with sqlite3.connect("data/orders.db") as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute(f"""
                SELECT
                    o.id, o.created_date, o.order_number,
                    r.name AS requester, s.name AS supplier,
                    o.order_note, o.note_to_supplier, o.total, o.status
                FROM orders o
                LEFT JOIN requesters r ON o.requester_id = r.id
                LEFT JOIN suppliers s ON o.supplier_id = s.id
                WHERE {where_clause}
                ORDER BY o.created_date DESC
            """, params)
            orders = [dict(row) for row in cursor.fetchall()]
            for order in orders:
                try:
                    order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y")
                except:
                    pass
        log_event("new_orders_log.txt", {"action": "fetch_cod_orders", "count": len(orders)})
        return {"orders": orders}
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "cod_orders"})
        raise HTTPException(status_code=500, detail=f"Failed to fetch COD orders: {e}")
    
    from pydantic import BaseModel

class CodPaymentPayload(BaseModel):
    amount_paid: float
    payment_date: str  # Expected format: YYYY-MM-DD

@router.put("/mark_cod_paid/{order_id}")
def mark_cod_paid(order_id: int, payload: CodPaymentPayload):
    try:
        with sqlite3.connect("data/orders.db") as conn:
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE orders
                SET amount_paid = ?, payment_date = ?
                WHERE id = ?
            """, (payload.amount_paid, payload.payment_date, order_id))
            conn.commit()

            cursor.execute("""
                INSERT INTO audit_trail (order_id, action, action_date, details)
                VALUES (?, ?, datetime('now'), ?)
            """, (
                order_id,
                "Marked COD Paid",
                f"Amount: R{payload.amount_paid:.2f}, Date: {payload.payment_date}"
            ))
            conn.commit()

        return {"success": True}
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "mark_cod_paid"})
        raise HTTPException(status_code=500, detail=f"Failed to mark COD paid: {e}")


END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/order_queries.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/requisitions.py
from fastapi import APIRouter, HTTPException
from fastapi.responses import FileResponse
from pydantic import BaseModel
from typing import List
from datetime import datetime
import sqlite3
from pathlib import Path
import traceback

from frontend.static.js.new_requisitions_pdf_generator import generate_requisition_pdf

router = APIRouter(tags=["requisitions"])

DB_PATH = Path("data/orders.db")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

# ---------------- Models ---------------- #

class RequisitionItem(BaseModel):
    description: str
    quantity: float

class RequisitionPayload(BaseModel):
    requisition_number: str
    requisitioner_id: int
    requisition_note: str
    items: List[RequisitionItem]

# ---------------- Endpoint ---------------- #

@router.post("/requisitions", response_model=dict)
async def submit_requisition(payload: RequisitionPayload):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            # Step 1: check if requisition_number already exists
            cursor.execute(
                "SELECT 1 FROM requisitions WHERE requisition_number = ?",
                (payload.requisition_number,)
            )
            if cursor.fetchone():
                raise HTTPException(status_code=400, detail="Requisition number already exists")

            # Step 2: insert new requisition
            cursor.execute("""
                INSERT INTO requisitions (
                    requisition_number,
                    requisitioner_id,
                    requisition_note,
                    requisition_date,
                    status
                ) VALUES (?, ?, ?, ?, ?)
            """, (
                payload.requisition_number,
                payload.requisitioner_id,
                payload.requisition_note,
                datetime.now().isoformat(),
                "submitted"
            ))

            requisition_id = cursor.lastrowid

            for item in payload.items:
                cursor.execute("""
                    INSERT INTO requisition_items (
                        requisition_id,
                        description,
                        quantity
                    ) VALUES (?, ?, ?)
                """, (
                    requisition_id,
                    item.description,
                    item.quantity
                ))

            # Step 3: update settings to bump requisition_number_start
            prefix = ''.join(filter(str.isalpha, payload.requisition_number))
            number = int(''.join(filter(str.isdigit, payload.requisition_number)))
            next_number = f"{prefix}{number + 1}"

            cursor.execute("""
                UPDATE settings
                SET requisition_number_start = ?
            """, (next_number,))

            # ✅ Step 4: relink temporary attachments
            cursor.execute("""
                UPDATE attachments
                SET requisition_id = ?, requisition_number = NULL
                WHERE requisition_id IS NULL AND requisition_number = ?
            """, (
                requisition_id,
                payload.requisition_number
            ))

            conn.commit()
            return {"status": "success", "requisition_id": requisition_id}

    except HTTPException as he:
        raise he  # Preserve intentional 400 errors
    except Exception as e:
        print("🔥 Backend crash:")
        print(traceback.format_exc())
        raise HTTPException(status_code=500, detail=f"Error submitting requisition: {str(e)}")

@router.get("/api/pending_requisitions", response_model=dict)
def get_pending_requisitions():
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            cursor.execute("""
                SELECT
                    r.id,
                    r.requisition_number,
                    r.requisition_date,
                    r.requisition_note,
                    r.status,
                    rq.name AS requisitioner,
                    (
                        SELECT GROUP_CONCAT(ri.description, ', ')
                        FROM requisition_items ri
                        WHERE ri.requisition_id = r.id
                    ) AS description,
                    (
                        SELECT SUM(ri.quantity)
                        FROM requisition_items ri
                        WHERE ri.requisition_id = r.id
                    ) AS total_quantity,
                    r.converted_order_id
                FROM requisitions r
                LEFT JOIN requisitioners rq ON r.requisitioner_id = rq.id
                WHERE r.status = 'submitted'
                ORDER BY r.requisition_date DESC
            """)

            rows = cursor.fetchall()
            requisitions = [dict(row) for row in rows]
            return {"requisitions": requisitions}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching requisitions: {str(e)}")

@router.get("/requisitions/api/generate_pdf/{requisition_id}")
def requisition_pdf(requisition_id: int):
    try:
        pdf_path = generate_requisition_pdf(requisition_id)
        return FileResponse(
            pdf_path,
            media_type="application/pdf",
            filename=f"Requisition_{requisition_id}.pdf"
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"PDF generation failed: {str(e)}")

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/requisitions.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/order_notes.py
from fastapi import APIRouter, HTTPException
from datetime import datetime
import sqlite3
from pathlib import Path
import json  # Add this import

router = APIRouter(prefix="/orders", tags=["orders"])

def log_event(filename: str, data: dict):
    log_path = Path(f"logs/{filename}")
    log_path.parent.mkdir(parents=True, exist_ok=True)
    with log_path.open("a", encoding="utf-8") as f:
        timestamp = datetime.now().isoformat()
        f.write(f"[{timestamp}] {json.dumps(data, ensure_ascii=False)}\n")

@router.post("/save_note/{order_id}")
async def save_order_note(order_id: int, data: dict):
    try:
        order_note = data.get("order_note")
        with sqlite3.connect("data/orders.db") as conn:
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE orders
                SET order_note = ?
                WHERE id = ?
            """, (order_note, order_id))
            conn.commit()

            cursor.execute("""
                INSERT INTO audit_trail (order_id, action, details, action_date, user_id)
                VALUES (?, 'Note Updated', ?, ?, ?)
            """, (order_id, f"Order note updated to: {order_note}", datetime.now().isoformat(), 0))

        log_event("new_orders_log.txt", {"action": "note_updated", "order_id": order_id, "order_note": order_note})
        return {"message": "Order note updated successfully"}
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "save_note"})
        raise HTTPException(status_code=500, detail=f"Failed to save order note: {e}")
END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/order_notes.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/requesters.py
# backend/endpoints/lookups/requesters.py

from fastapi import APIRouter, HTTPException
from backend.database import get_db_connection
import logging
import sqlite3

router = APIRouter()

# Configure logging
logging.basicConfig(filename="logs/server.log", level=logging.INFO,
                    format="%(asctime)s | %(levelname)s | %(message)s")


@router.get("/requesters")
async def get_requesters():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM requesters")
        requesters = cursor.fetchall()
        result = [{"id": r[0], "name": r[1]} for r in requesters]
        logging.info(f"Requesters fetched: {len(result)} items")
        return {"requesters": result}
    except sqlite3.Error as e:
        logging.error(f"Database error fetching requesters: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logging.error(f"Error fetching requesters: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error fetching requesters: {str(e)}")
    finally:
        conn.close()


@router.post("/requesters")
async def add_requester(payload: dict):
    name = payload.get("name")
    if not name:
        logging.error("Missing name in add_requester request")
        raise HTTPException(status_code=400, detail="Missing requester name")

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO requesters (name) VALUES (?)", (name,))
        conn.commit()
        logging.info(f"New requester added: {name}")
        return {"message": "Requester added successfully"}
    except sqlite3.Error as e:
        logging.error(f"Database error adding requester: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logging.error(f"Error adding requester: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error adding requester: {str(e)}")
    finally:
        conn.close()


@router.put("/requesters/{requester_id}")
async def update_requester(requester_id: int, payload: dict):
    new_name = payload.get("name")
    if not new_name:
        logging.error("Missing name in update_requester request")
        raise HTTPException(status_code=400, detail="Missing requester name")

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE requesters SET name = ? WHERE id = ?", (new_name, requester_id))
        if cursor.rowcount == 0:
            logging.warning(f"No requester found with id {requester_id}")
            raise HTTPException(status_code=404, detail="Requester not found")
        conn.commit()
        logging.info(f"Requester {requester_id} updated to: {new_name}")
        return {"message": "Requester updated successfully"}
    except sqlite3.Error as e:
        logging.error(f"Database error updating requester {requester_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logging.error(f"Error updating requester {requester_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error updating requester: {str(e)}")
    finally:
        conn.close()

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/requesters.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/business_details.py
from fastapi import APIRouter, HTTPException, Request
import sqlite3
from backend.utils.db_utils import handle_db_errors, log_success
from backend.database import get_db_connection

router = APIRouter()

@router.get("/business_details")
@handle_db_errors(entity="business_details", action="fetching")
async def get_business_details():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number 
        FROM business_details 
        WHERE id = 1
    """)
    row = cursor.fetchone()
    conn.close()

    if not row:
        raise HTTPException(status_code=404, detail="Business details not found")

    result = {
        "company_name": row[0],
        "address_line1": row[1],
        "address_line2": row[2],
        "city": row[3],
        "province": row[4],
        "postal_code": row[5],
        "telephone": row[6],
        "vat_number": row[7],
    }

    log_success("business_details", "fetched", "Company info retrieved")
    return result

@router.put("/business_details")
@handle_db_errors(entity="business_details", action="updating")
async def update_business_details(request: Request):
    data = await request.json()

    required_fields = ["company_name", "address_line1", "city", "province", "postal_code", "telephone", "vat_number"]
    for field in required_fields:
        if not data.get(field):
            raise HTTPException(status_code=400, detail=f"Missing required field: {field}")

    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM business_details WHERE id = 1")
    exists = cursor.fetchone()

    if exists:
        cursor.execute("""
            UPDATE business_details SET
                company_name = ?, address_line1 = ?, address_line2 = ?, city = ?,
                province = ?, postal_code = ?, telephone = ?, vat_number = ?
            WHERE id = 1
        """, (
            data["company_name"], data["address_line1"], data.get("address_line2", ""), data["city"],
            data["province"], data["postal_code"], data["telephone"], data["vat_number"]
        ))
    else:
        cursor.execute("""
            INSERT INTO business_details (
                id, company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
            ) VALUES (1, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            data["company_name"], data["address_line1"], data.get("address_line2", ""), data["city"],
            data["province"], data["postal_code"], data["telephone"], data["vat_number"]
        ))

    conn.commit()
    conn.close()
    log_success("business_details", "updated", f"Business details updated to: {data['company_name']}")
    return {"message": "Business details updated successfully"}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/business_details.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/requisitioners.py
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List
import sqlite3
from pathlib import Path

router = APIRouter(tags=["requisitioners"])

DB_PATH = Path("data/orders.db")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

# ------------------- Models ------------------- #

class Requisitioner(BaseModel):
    id: int
    name: str

class NewRequisitioner(BaseModel):
    name: str

# ------------------- Endpoints ------------------- #

@router.get("/requisitioners", response_model=List[Requisitioner])
async def get_requisitioners():
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM requisitioners ORDER BY name")
            rows = cursor.fetchall()
            return [dict(row) for row in rows]
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching requisitioners: {str(e)}")

@router.post("/requisitioners", response_model=dict)
async def add_requisitioner(payload: NewRequisitioner):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO requisitioners (name) VALUES (?)", (payload.name,))
            conn.commit()
            return {"status": "success", "id": cursor.lastrowid}
    except sqlite3.IntegrityError:
        raise HTTPException(status_code=400, detail="Requisitioner already exists.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error adding requisitioner: {str(e)}")

@router.delete("/requisitioners/{id}", response_model=dict)
async def delete_requisitioner(id: int):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM requisitioners WHERE id = ?", (id,))
            conn.commit()
            return {"status": "deleted", "id": id}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error deleting requisitioner: {str(e)}")

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/requisitioners.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/users.py
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, constr
from typing import Optional
from backend.database import get_db_connection
import bcrypt

router = APIRouter()

# ----------------------------
# Pydantic Models
# ----------------------------

class UserCreate(BaseModel):
    username: constr(strip_whitespace=True, min_length=1)
    password: constr(strip_whitespace=True, min_length=4)
    rights: str
    auth_threshold_band: Optional[int] = None

class UserUpdate(BaseModel):
    username: constr(strip_whitespace=True, min_length=1)
    password: Optional[constr(strip_whitespace=True, min_length=4)] = None
    rights: str
    auth_threshold_band: Optional[int] = None

# ----------------------------
# GET all users
# ----------------------------

@router.get("/users")
async def get_users():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, username, rights, auth_threshold_band FROM users")
    users = cursor.fetchall()
    conn.close()
    return {
        "users": [
            {
                "id": u[0],
                "username": u[1],
                "rights": u[2],
                "auth_threshold_band": u[3]
            } for u in users
        ]
    }

# ----------------------------
# POST: Add a new user
# ----------------------------

@router.post("/users")
async def add_user(payload: UserCreate):
    conn = get_db_connection()
    cursor = conn.cursor()

    password_hash = bcrypt.hashpw(payload.password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

    try:
        cursor.execute(
            "INSERT INTO users (username, password_hash, rights, auth_threshold_band) VALUES (?, ?, ?, ?)",
            (payload.username, password_hash, payload.rights, payload.auth_threshold_band)
        )
        conn.commit()
        return {"status": "User added successfully"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()

# ----------------------------
# PUT: Update an existing user
# ----------------------------

@router.put("/users/{user_id}")
async def update_user(user_id: int, payload: UserUpdate):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail="User not found")

        fields_to_update = {
            "username": payload.username,
            "rights": payload.rights,
            "auth_threshold_band": payload.auth_threshold_band
        }

        if payload.password and payload.password.strip():
            password_hash = bcrypt.hashpw(payload.password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            fields_to_update["password_hash"] = password_hash

        set_clause = ", ".join([f"{key} = ?" for key in fields_to_update])
        values = list(fields_to_update.values()) + [user_id]

        cursor.execute(f"UPDATE users SET {set_clause} WHERE id = ?", values)
        conn.commit()
        return {"status": "User updated successfully"}

    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()

# ----------------------------
# DELETE: Remove a user
# ----------------------------

@router.delete("/users/{user_id}")
async def delete_user(user_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
        if cursor.rowcount == 0:
            raise HTTPException(status_code=404, detail="User not found")
        conn.commit()
        return {"status": "User deleted successfully"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/users.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__init__.py
from .requesters import router as requesters_router
from .suppliers import router as suppliers_router
from .items import router as items_router
from .projects import router as projects_router
from .settings import router as settings_router
from .business_details import router as business_details_router
from .users import router as users_router

# Aggregate all lookup routers into a single router
from fastapi import APIRouter

router = APIRouter()

# Include individual routers without additional prefixes
router.include_router(requesters_router)
router.include_router(suppliers_router)
router.include_router(items_router)
router.include_router(projects_router)
router.include_router(settings_router)
router.include_router(business_details_router)
router.include_router(users_router)
END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__init__.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/mark_cod_paid_api.py
# File: backend/endpoints/lookups/mark_cod_paid_api.py

from fastapi import APIRouter, Request, HTTPException
from pydantic import BaseModel
from backend.database import get_db_connection
from datetime import datetime
from pathlib import Path
import json

router = APIRouter()

class CodPayment(BaseModel):
    amount_paid: float
    payment_date: str  # Format: YYYY-MM-DD

def log_event(filename: str, data: dict):
    log_path = Path("logs") / filename
    log_path.parent.mkdir(parents=True, exist_ok=True)
    with log_path.open("a", encoding="utf-8") as f:
        timestamp = datetime.now().isoformat()
        f.write(f"[{timestamp}] {json.dumps(data, ensure_ascii=False)}\n")

@router.put("/mark_cod_paid/{order_id}")
def mark_cod_paid(order_id: int, payment: CodPayment, request: Request):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        user = request.session.get("user")
        if not user or "id" not in user:
            raise HTTPException(status_code=401, detail="Unauthorized")
        user_id = user["id"]

        # Check current status before allowing payment
        cursor.execute("SELECT status FROM orders WHERE id = ?", (order_id,))
        row = cursor.fetchone()
        if not row:
            raise HTTPException(status_code=404, detail="Order not found")
        if row["status"] == "Paid":
            raise HTTPException(status_code=400, detail="Order is already marked as Paid")

        # Update COD payment info
        cursor.execute("""
            UPDATE orders
            SET
                status = 'Paid',
                amount_paid = ?,
                payment_date = ?
            WHERE id = ?
        """, (payment.amount_paid, payment.payment_date, order_id))

        if cursor.rowcount == 0:
            raise HTTPException(status_code=404, detail="Order not found")

        # Audit trail
        cursor.execute("""
            INSERT INTO audit_trail (order_id, action, details, user_id)
            VALUES (?, 'Marked COD as Paid', ?, ?)
        """, (
            order_id,
            f"Amount: R{payment.amount_paid:.2f}, Date: {payment.payment_date}",
            user_id
        ))

        conn.commit()
        conn.close()

        # Log file
        log_event("cod_payments.log", {
            "order_id": order_id,
            "amount_paid": payment.amount_paid,
            "payment_date": payment.payment_date,
            "marked_by_user_id": user_id
        })

        return {"success": True}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/mark_cod_paid_api.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/settings.py
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import Optional
from backend.database import get_db_connection

router = APIRouter()

# --- Schemas ---
class SettingsPayload(BaseModel):
    order_number_start: str
    requisition_number_start: str
    auth_threshold_1: int
    auth_threshold_2: int
    auth_threshold_3: int
    auth_threshold_4: int

class OrderNumberPayload(BaseModel):
    order_number_start: str

class RequisitionNumberPayload(BaseModel):
    requisition_number_start: str

# --- GET full settings ---
@router.get("/settings")
async def get_settings():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT order_number_start, requisition_number_start,
               auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4
        FROM settings WHERE id = 1
    """)
    row = cursor.fetchone()

    if row:
        settings = {
            "order_number_start": row["order_number_start"] or "URC1000",
            "requisition_number_start": row["requisition_number_start"] or "REQ1000",
            "auth_threshold_1": row["auth_threshold_1"] or 0,
            "auth_threshold_2": row["auth_threshold_2"] or 0,
            "auth_threshold_3": row["auth_threshold_3"] or 0,
            "auth_threshold_4": row["auth_threshold_4"] or 0
        }
    else:
        settings = {
            "order_number_start": "URC1000",
            "requisition_number_start": "REQ1000",
            "auth_threshold_1": 0,
            "auth_threshold_2": 0,
            "auth_threshold_3": 0,
            "auth_threshold_4": 0
        }
        cursor.execute("""
            INSERT INTO settings (
                id, order_number_start, requisition_number_start,
                auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4
            ) VALUES (1, ?, ?, ?, ?, ?, ?)
        """, (
            settings["order_number_start"],
            settings["requisition_number_start"],
            settings["auth_threshold_1"],
            settings["auth_threshold_2"],
            settings["auth_threshold_3"],
            settings["auth_threshold_4"]
        ))
        conn.commit()

    conn.close()
    return settings

# --- PUT full settings update ---
@router.put("/settings")
async def update_settings(payload: SettingsPayload):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            UPDATE settings
            SET order_number_start = ?,
                requisition_number_start = ?,
                auth_threshold_1 = ?,
                auth_threshold_2 = ?,
                auth_threshold_3 = ?,
                auth_threshold_4 = ?
            WHERE id = 1
        """, (
            payload.order_number_start,
            payload.requisition_number_start,
            payload.auth_threshold_1,
            payload.auth_threshold_2,
            payload.auth_threshold_3,
            payload.auth_threshold_4
        ))

        if cursor.rowcount == 0:
            cursor.execute("""
                INSERT INTO settings (
                    id, order_number_start, requisition_number_start,
                    auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4
                ) VALUES (1, ?, ?, ?, ?, ?, ?)
            """, (
                payload.order_number_start,
                payload.requisition_number_start,
                payload.auth_threshold_1,
                payload.auth_threshold_2,
                payload.auth_threshold_3,
                payload.auth_threshold_4
            ))

        conn.commit()
        return {"message": "Settings updated successfully"}

    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()

# --- PUT order number only ---
@router.put("/order_number")
async def update_order_number(payload: OrderNumberPayload):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            UPDATE settings SET order_number_start = ? WHERE id = 1
        """, (payload.order_number_start,))
        if cursor.rowcount == 0:
            cursor.execute("""
                INSERT INTO settings (id, order_number_start)
                VALUES (1, ?)
            """, (payload.order_number_start,))
        conn.commit()
        return {"message": "Order number updated"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()

# --- PUT requisition number only ---
@router.put("/requisition_number")
async def update_requisition_number(payload: RequisitionNumberPayload):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            UPDATE settings SET requisition_number_start = ? WHERE id = 1
        """, (payload.requisition_number_start,))
        if cursor.rowcount == 0:
            cursor.execute("""
                INSERT INTO settings (id, requisition_number_start)
                VALUES (1, ?)
            """, (payload.requisition_number_start,))
        conn.commit()
        return {"message": "Requisition number updated"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/settings.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/suppliers.py
from fastapi import APIRouter, HTTPException, UploadFile, File
from backend.database import get_db_connection
import logging
import sqlite3
import csv

router = APIRouter()

# Configure logging
logging.basicConfig(
    filename="logs/server.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)

@router.get("/suppliers")
async def get_suppliers():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM suppliers")
        suppliers = cursor.fetchall()
        result = [{"id": s[0], "name": s[1]} for s in suppliers]
        logging.info(f"Suppliers fetched: {len(result)} items")
        return {"suppliers": result}
    except sqlite3.Error as e:
        logging.error(f"Database error fetching suppliers: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logging.error(f"Error fetching suppliers: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error fetching suppliers: {str(e)}")
    finally:
        conn.close()

@router.post("/suppliers")
async def add_supplier(payload: dict):
    try:
        account_number = payload.get("account_number", "")
        name = payload.get("name", "")
        telephone = payload.get("telephone", "")
        vat_number = payload.get("vat_number", "")
        registration_number = payload.get("registration_number", "")
        email = payload.get("email", "")
        contact_name = payload.get("contact_name", "")
        contact_telephone = payload.get("contact_telephone", "")
        address_line1 = payload.get("address_line1", "")
        address_line2 = payload.get("address_line2", "")
        address_line3 = payload.get("address_line3", "")
        postal_code = payload.get("postal_code", "")

        if not name:
            raise HTTPException(status_code=400, detail="Missing supplier name")

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("INSERT INTO suppliers (name) VALUES (?)", (name,))

        conn.commit()
        logging.info(f"New supplier added: {name}")
        return {"message": "Supplier added successfully"}

    except sqlite3.Error as e:
        logging.error(f"Database error adding supplier: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logging.error(f"Error adding supplier: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error adding supplier: {str(e)}")
    finally:
        conn.close()

@router.put("/suppliers/{supplier_id}")
async def update_supplier(supplier_id: int, payload: dict):
    new_name = payload.get("name")
    if not new_name:
        logging.error("Missing name in update_supplier request")
        raise HTTPException(status_code=400, detail="Missing supplier name")

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE suppliers SET name = ? WHERE id = ?", (new_name, supplier_id))
        if cursor.rowcount == 0:
            logging.warning(f"No supplier found with id {supplier_id}")
            raise HTTPException(status_code=404, detail="Supplier not found")
        conn.commit()
        logging.info(f"Supplier {supplier_id} updated to: {new_name}")
        return {"message": "Supplier updated successfully"}
    except sqlite3.Error as e:
        logging.error(f"Database error updating supplier {supplier_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logging.error(f"Error updating supplier {supplier_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error updating supplier: {str(e)}")
    finally:
        conn.close()

@router.post("/import_suppliers_csv")
async def import_suppliers_csv(file: UploadFile = File(...)):
    if not file.filename.endswith(".csv"):
        raise HTTPException(status_code=400, detail="Only CSV files are supported.")

    try:
        contents = await file.read()
        lines = contents.decode("utf-8").splitlines()
        reader = csv.DictReader(lines)

        suppliers = []
        for row in reader:
            code = row.get("code", "").strip()
            description = row.get("description", "").strip()
            if code and description:
                suppliers.append((code, description))

        if not suppliers:
            raise HTTPException(status_code=400, detail="CSV is empty or invalid.")

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM suppliers;")
        cursor.executemany(
            "INSERT INTO suppliers (account_number, name) VALUES (?, ?);",
            suppliers
        )
        conn.commit()
        conn.close()

        logging.info(f"✅ Imported {len(suppliers)} suppliers from CSV.")
        return {"inserted": len(suppliers)}

    except Exception as e:
        logging.error(f"❌ Error importing suppliers CSV: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Import failed: {str(e)}")

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/suppliers.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/projects.py
from fastapi import APIRouter, HTTPException, UploadFile, File
from backend.database import get_db_connection
import logging
import sqlite3
import csv

router = APIRouter()

# Configure logging
logging.basicConfig(
    filename="logs/server.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)

@router.get("/projects")
async def get_projects():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, project_code, project_name FROM projects")
        projects = cursor.fetchall()
        result = [{"id": p[0], "project_code": p[1], "project_name": p[2]} for p in projects]
        logging.info(f"Projects fetched: {len(result)} items")
        return {"projects": result}
    except sqlite3.Error as e:
        logging.error(f"Database error fetching projects: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logging.error(f"Error fetching projects: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error fetching projects: {str(e)}")
    finally:
        conn.close()


@router.post("/projects")
async def add_project(payload: dict):
    project_code = payload.get("project_code")
    project_name = payload.get("project_name")

    if not project_code or not project_name:
        logging.error("Missing project_code or project_name in add_project request")
        raise HTTPException(status_code=400, detail="Missing project code or name")

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO projects (project_code, project_name) VALUES (?, ?)",
            (project_code, project_name)
        )
        conn.commit()
        logging.info(f"New project added: {project_code} - {project_name}")
        return {"message": "Project added successfully"}
    except sqlite3.IntegrityError as e:
        logging.error(f"Integrity error adding project: {str(e)}")
        raise HTTPException(status_code=400, detail="Project code might already exist.")
    except sqlite3.Error as e:
        logging.error(f"Database error adding project: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logging.error(f"Error adding project: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error adding project: {str(e)}")
    finally:
        conn.close()


@router.put("/projects/{project_id}")
async def update_project(project_id: int, payload: dict):
    new_code = payload.get("project_code")
    new_name = payload.get("project_name")

    if not new_code or not new_name:
        logging.error("Missing project_code or project_name in update_project request")
        raise HTTPException(status_code=400, detail="Missing project code or name")

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE projects SET project_code = ?, project_name = ? WHERE id = ?",
            (new_code, new_name, project_id)
        )
        if cursor.rowcount == 0:
            logging.warning(f"No project found with id {project_id}")
            raise HTTPException(status_code=404, detail="Project not found")
        conn.commit()
        logging.info(f"Project {project_id} updated: code -> {new_code}, name -> {new_name}")
        return {"message": "Project updated successfully"}
    except sqlite3.IntegrityError as e:
        logging.error(f"Integrity error updating project {project_id}: {str(e)}")
        raise HTTPException(status_code=400, detail="Project code might conflict with an existing project.")
    except sqlite3.Error as e:
        logging.error(f"Database error updating project {project_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logging.error(f"Error updating project {project_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error updating project: {str(e)}")
    finally:
        conn.close()


@router.post("/import_projects_csv")
async def import_projects_csv(file: UploadFile = File(...)):
    if not file.filename.endswith(".csv"):
        raise HTTPException(status_code=400, detail="Only CSV files are supported.")

    try:
        contents = await file.read()
        lines = contents.decode("utf-8").splitlines()
        reader = csv.DictReader(lines)

        projects = []
        for row in reader:
            code = row.get("code", "").strip()
            description = row.get("description", "").strip()
            if code and description:
                projects.append((code, description))

        if not projects:
            raise HTTPException(status_code=400, detail="CSV is empty or invalid.")

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM projects;")
        cursor.executemany(
            "INSERT INTO projects (project_code, project_name) VALUES (?, ?);",
            projects
        )
        conn.commit()
        conn.close()

        logging.info(f"✅ Imported {len(projects)} projects from CSV.")
        return {"inserted": len(projects)}

    except Exception as e:
        logging.error(f"❌ Error importing projects CSV: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Import failed: {str(e)}")

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/projects.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/items.py
from fastapi import APIRouter, HTTPException, UploadFile, File
from backend.database import get_db_connection
import logging
import sqlite3
import csv

router = APIRouter()

# Configure logging
logging.basicConfig(
    filename="logs/server.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)

@router.get("/items")
async def get_items():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, item_code, item_description FROM items")
        items = cursor.fetchall()
        result = [{"item_code": i[1], "item_description": i[2]} for i in items]
        logging.info(f"Items fetched: {len(result)} items")
        return {"items": result}
    except sqlite3.Error as e:
        logging.error(f"Database error fetching items: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logging.error(f"Error fetching items: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error fetching items: {str(e)}")
    finally:
        conn.close()


@router.post("/items")
async def add_item(payload: dict):
    item_code = payload.get("item_code")
    item_description = payload.get("item_description")

    if not item_code or not item_description:
        logging.error("Missing item_code or item_description in add_item request")
        raise HTTPException(status_code=400, detail="Missing item code or description")

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO items (item_code, item_description) VALUES (?, ?)",
            (item_code, item_description)
        )
        conn.commit()
        logging.info(f"New item added: {item_code} - {item_description}")
        return {"message": "Item added successfully"}
    except sqlite3.IntegrityError as e:
        logging.error(f"Integrity error adding item: {str(e)}")
        raise HTTPException(status_code=400, detail="Item code might already exist.")
    except sqlite3.Error as e:
        logging.error(f"Database error adding item: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logging.error(f"Error adding item: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error adding item: {str(e)}")
    finally:
        conn.close()


@router.put("/items/{item_id}")
async def update_item(item_id: int, payload: dict):
    new_code = payload.get("item_code")
    new_description = payload.get("item_description")

    if not new_code or not new_description:
        logging.error("Missing item_code or item_description in update_item request")
        raise HTTPException(status_code=400, detail="Missing item code or description")

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE items SET item_code = ?, item_description = ? WHERE id = ?",
            (new_code, new_description, item_id)
        )
        if cursor.rowcount == 0:
            logging.warning(f"No item found with id {item_id}")
            raise HTTPException(status_code=404, detail="Item not found")
        conn.commit()
        logging.info(f"Item {item_id} updated: code -> {new_code}, description -> {new_description}")
        return {"message": "Item updated successfully"}
    except sqlite3.IntegrityError as e:
        logging.error(f"Integrity error updating item {item_id}: {str(e)}")
        raise HTTPException(status_code=400, detail="Item code might conflict with an existing item.")
    except sqlite3.Error as e:
        logging.error(f"Database error updating item {item_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logging.error(f"Error updating item {item_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error updating item: {str(e)}")
    finally:
        conn.close()


@router.post("/maintenance/import_items_csv")
async def import_items_csv(file: UploadFile = File(...)):
    if not file.filename.endswith(".csv"):
        raise HTTPException(status_code=400, detail="Only CSV files are supported.")

    try:
        contents = await file.read()
        lines = contents.decode("utf-8").splitlines()
        reader = csv.DictReader(lines)

        items = []
        for row in reader:
            # Expect lowercase column headers: "code", "description"
            item_code = row.get("code", "").strip()
            description = row.get("description", "").strip()
            if item_code and description:
                items.append((item_code, description))

        if not items:
            raise HTTPException(status_code=400, detail="CSV is empty or invalid.")

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM items;")
        cursor.executemany(
            "INSERT INTO items (item_code, item_description) VALUES (?, ?);",
            items
        )
        conn.commit()
        conn.close()

        logging.info(f"✅ Imported {len(items)} items from CSV.")
        return {"inserted": len(items)}

    except Exception as e:
        logging.error(f"❌ Error importing items CSV: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Import failed: {str(e)}")

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/items.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/users.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/users.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/users.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/settings.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/settings.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/settings.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/requisitioners.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/requisitioners.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/requisitioners.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/projects.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/projects.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/projects.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/suppliers.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/suppliers.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/suppliers.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/items.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/items.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/items.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/requesters.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/requesters.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/requesters.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/business_details.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/business_details.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/business_details.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/__init__.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/__init__.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/__init__.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/mark_cod_paid_api.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/mark_cod_paid_api.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/lookups/__pycache__/mark_cod_paid_api.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/orders.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/orders.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/orders.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/new_order_pdf_generator.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/new_order_pdf_generator.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/new_order_pdf_generator.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_queries.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_queries.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_queries.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/html_routes.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/html_routes.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/html_routes.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/pending_order_pdf_generator.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/pending_order_pdf_generator.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/pending_order_pdf_generator.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/utils.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/utils.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/utils.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/auth.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/auth.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/auth.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/requisition_attachments.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/requisition_attachments.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/requisition_attachments.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/admin.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/admin.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/admin.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_receiving.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_receiving.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_receiving.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/requisitions.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/requisitions.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/requisitions.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_email.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_email.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_email.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_notes.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_notes.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_notes.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/__init__.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/__init__.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/__init__.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_attachments.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_attachments.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/__pycache__/order_attachments.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/mobile/mobile_awaiting_authorisation.py
from fastapi import APIRouter, Request, HTTPException
from backend.database import get_db_connection
from datetime import datetime
from fastapi.responses import JSONResponse
import json
import logging

router = APIRouter()
logger = logging.getLogger("uvicorn")


@router.get("/mobile/get_user_info")
async def get_user_info(request: Request):
    user = request.session.get("user")
    if not user:
        raise HTTPException(status_code=401, detail="User not authenticated")

    logger.info(f"🔍 Session user before JSONResponse: {user}")
    return JSONResponse(content=user if isinstance(user, dict) else json.loads(user))


@router.get("/orders/api/awaiting_authorisation")
async def get_orders_awaiting_authorisation(request: Request):
    raw = request.session.get("user")
    try:
        user = json.loads(raw) if isinstance(raw, str) else raw
    except Exception:
        raise HTTPException(status_code=401, detail="Invalid session format")

    if not user:
        raise HTTPException(status_code=401, detail="Not logged in")

    band = user.get("auth_threshold_band")
    if band is None:
        raise HTTPException(status_code=403, detail="User does not have an authorisation band")

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT 
                o.id,
                o.order_number,
                o.total,
                o.created_date,
                o.status,
                o.required_auth_band,
                o.order_note,
                r.name AS requester_name,
                s.name AS supplier_name
            FROM orders o
            LEFT JOIN requesters r ON o.requester_id = r.id
            LEFT JOIN suppliers s ON o.supplier_id = s.id
            WHERE o.status = 'Awaiting Authorisation'
              AND o.required_auth_band = ?
            ORDER BY o.created_date DESC
        """, (band,))
        return [dict(row) for row in cursor.fetchall()]


@router.post("/orders/api/authorise_order/{order_id}")
async def authorise_order(order_id: int, request: Request):
    raw = request.session.get("user")
    try:
        user = json.loads(raw) if isinstance(raw, str) else raw
    except Exception:
        raise HTTPException(status_code=401, detail="Invalid session format")

    if not user:
        raise HTTPException(status_code=401, detail="Not logged in")

    username = user.get("username")
    user_id = user.get("id")

    with get_db_connection() as conn:
        cursor = conn.cursor()

        # Check if order exists and is still awaiting authorisation
        cursor.execute("SELECT status FROM orders WHERE id = ?", (order_id,))
        row = cursor.fetchone()
        if not row:
            raise HTTPException(status_code=404, detail="Order not found")
        if row["status"] != "Awaiting Authorisation":
            raise HTTPException(status_code=400, detail="Order is not in an authorisable state")

        # Update order status safely
        cursor.execute("""
            UPDATE orders
            SET status = 'Authorised'
            WHERE id = ? AND status = 'Awaiting Authorisation'
        """, (order_id,))

        if cursor.rowcount == 0:
            raise HTTPException(status_code=400, detail="Order was already authorised or in an invalid state")

        # Insert into audit trail
        cursor.execute("""
            INSERT INTO audit_trail (order_id, action, details, action_date, user_id)
            VALUES (?, 'Authorised', ?, ?, ?)
        """, (
            order_id,
            f"Order authorised by {username}",
            datetime.utcnow().isoformat(),
            user_id
        ))

        conn.commit()  # ✅ ensure commit happens before connection closes

    return {"message": "Order authorised"}

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/mobile/mobile_awaiting_authorisation.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/mobile/mobile_auth.py
# backend/endpoints/mobile/mobile_auth.py

from fastapi import APIRouter, Request, Form, HTTPException
from fastapi.responses import RedirectResponse, JSONResponse
from backend.database import get_db_connection

router = APIRouter()


@router.post("/mobile/login")
async def mobile_login(request: Request, username: str = Form(...), password: str = Form(...)):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, password))
        user = cursor.fetchone()
        if not user:
            return RedirectResponse("/mobile/login?error=1", status_code=302)
        request.session["user"] = {
            "username": user["username"],
            "auth_threshold_band": user["auth_threshold_band"],
        }
    return RedirectResponse("/mobile/authorisations", status_code=302)


@router.get("/mobile/logout")
async def mobile_logout(request: Request):
    request.session.clear()
    return RedirectResponse("/mobile/login", status_code=302)


@router.get("/mobile/get_user_info")
async def get_user_info(request: Request):
    user = request.session.get("user")
    if not user:
        raise HTTPException(status_code=401, detail="User not authenticated")
    return JSONResponse(content=user)

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/mobile/mobile_auth.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/mobile/__pycache__/mobile_auth.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/mobile/__pycache__/mobile_auth.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/mobile/__pycache__/mobile_auth.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/mobile/__pycache__/mobile_awaiting_authorisation.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/mobile/__pycache__/mobile_awaiting_authorisation.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/mobile/__pycache__/mobile_awaiting_authorisation.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/order_utils.py
"""
Utility functions for Universal Recycling Purchase Order System
"""

def normalize_order_number(order_number: str) -> str:
    """
    Normalize order numbers to a consistent format (e.g., URC0001).
    """
    prefix = "URC"
    if not order_number.startswith(prefix):
        order_number = f"{prefix}{order_number}"
    
    num_part = order_number[len(prefix):]
    try:
        num = int(num_part)
        return f"{prefix}{num:04d}"  # Ensures 4 digits, e.g., URC0001
    except ValueError:
        raise ValueError(f"Order number must end with a number, got: {order_number}")

def calculate_order_total(items: list) -> float:
    """
    Calculate the total cost of an order based on its items.
    
    Args:
        items (list): List of order items, where each item is a dict with 'qty_ordered' and 'price' keys.
    
    Returns:
        float: The total cost of the order.
    
    Raises:
        KeyError: If an item is missing 'qty_ordered' or 'price'.
    """
    total = 0.0
    for item in items:
        qty = item["qty_ordered"]
        price = item["price"]
        total += qty * price
    return total
END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/order_utils.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__init__.py
"""
Utility module initializer. No endpoint imports allowed.
"""

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__init__.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/permissions_utils.py
# File: backend/utils/permissions_utils.py

from fastapi import Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

templates = Jinja2Templates(directory="frontend/templates")

def enforce_roles(request: Request, allowed_roles: list):
    """
    Checks if the user has at least one of the allowed roles.
    Returns None if allowed. Returns access_denied TemplateResponse if not.
    """
    roles = request.session.get("roles", "")
    role_set = {r.strip().lower() for r in roles.split(",")}

    if not any(role in role_set for role in allowed_roles):
        return templates.TemplateResponse("access_denied.html", {"request": request})

    return None

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/permissions_utils.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/db_utils.py
# backend/utils/db_utils.py

from fastapi import HTTPException
import functools
import logging
import sqlite3

LOG_PATH = "logs/server.log"

logging.basicConfig(
    filename=LOG_PATH,
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)

def log_success(entity: str, action: str, msg: str):
    logging.info(f"✅ [{entity.upper()}] Success {action}: {msg}")

def log_warning(entity: str, msg: str):
    logging.warning(f"⚠️ [{entity.upper()}] Warning: {msg}")

def log_error(entity: str, action: str, err: Exception):
    logging.error(f"❌ [{entity.upper()}] Failed {action}: {str(err)}")

def handle_db_errors(entity: str, action: str):
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except sqlite3.DatabaseError as db_err:
                log_error(entity, action, db_err)
                raise HTTPException(status_code=500, detail="Database error occurred.")
            except Exception as e:
                log_error(entity, action, e)
                raise HTTPException(status_code=500, detail="Unexpected server error.")
        return wrapper
    return decorator

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/db_utils.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/send_email.py
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import os
from dotenv import load_dotenv
import logging

load_dotenv()

logging.basicConfig(level=logging.INFO)

async def send_email(recipient: str, subject: str, body: str, attachment_path: str = None):
    try:
        msg = MIMEMultipart()
        sender = os.getenv("EMAIL_FROM")
        if not sender:
            raise ValueError("EMAIL_FROM is not defined in .env")

        msg['From'] = sender
        msg['To'] = recipient
        msg['Subject'] = subject

        msg.attach(MIMEText(body, 'plain'))

        if attachment_path:
            if not os.path.exists(attachment_path):
                raise FileNotFoundError(f"Attachment not found: {attachment_path}")
            with open(attachment_path, "rb") as attachment:
                part = MIMEBase("application", "octet-stream")
                part.set_payload(attachment.read())
            encoders.encode_base64(part)
            filename = os.path.basename(attachment_path)
            part.add_header("Content-Disposition", f"attachment; filename= {filename}")
            msg.attach(part)

        host = os.getenv("MAILTRAP_HOST")
        port = int(os.getenv("MAILTRAP_PORT", 0))
        username = os.getenv("MAILTRAP_USERNAME")
        password = os.getenv("MAILTRAP_PASSWORD")

        if not all([host, port, username, password]):
            raise ValueError("One or more Mailtrap environment variables are missing")

        with smtplib.SMTP(host, port) as server:
            server.starttls()
            server.login(username, password)
            server.send_message(msg)

        logging.info(f"Email sent to {recipient} with subject '{subject}'")

    except Exception as e:
        logging.error(f"Email sending failed: {str(e)}")
        raise Exception(f"Email sending failed: {str(e)}")

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/send_email.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__pycache__/db_utils.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__pycache__/db_utils.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__pycache__/db_utils.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__pycache__/send_email.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__pycache__/send_email.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__pycache__/send_email.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__pycache__/order_utils.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__pycache__/order_utils.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__pycache__/order_utils.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__pycache__/__init__.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__pycache__/__init__.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/utils/__pycache__/__init__.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/__pycache__/main.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/__pycache__/main.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/__pycache__/main.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/__pycache__/database.cpython-313.pyc
❌ Could not decode file as UTF-8: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/__pycache__/database.cpython-313.pyc

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/__pycache__/database.cpython-313.pyc
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/scrapers/.gitkeep

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/scrapers/.gitkeep
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/twilio/twilio_utils.py
from twilio.rest import Client
import os
from pathlib import Path
import json

# Twilio credentials from environment variables
account_sid = os.getenv("TWILIO_ACCOUNT_SID")
auth_token = os.getenv("TWILIO_AUTH_TOKEN")
twilio_phone = os.getenv("TWILIO_PHONE_NUMBER")

# Initialize Twilio client
client = Client(account_sid, auth_token)

# Load group members from environment variables
group_members = [
    os.getenv(f"GROUP_MEMBER_{i}") for i in range(1, 8)
    if os.getenv(f"GROUP_MEMBER_{i}")
]

async def send_whatsapp_message(order_number: str, message_body: str):
    """
    Send a WhatsApp message to group members for order authorization.
    
    Args:
        order_number (str): The order number associated with the message.
        message_body (str): The message to send.
    """
    # Log the message SID mapping
    mapping_path = Path("logs/message_sid_mapping.json")
    mapping_path.parent.mkdir(parents=True, exist_ok=True)
    if mapping_path.exists():
        with mapping_path.open("r", encoding="utf-8") as f:
            message_mapping = json.load(f)
    else:
        message_mapping = {}

    for member in group_members:
        try:
            message = client.messages.create(
                body=message_body,
                from_=twilio_phone,
                to=member
            )
            message_mapping[message.sid] = order_number
        except Exception as e:
            with open("logs/twilio.log", "a", encoding="utf-8") as f:
                f.write(f"[{datetime.now().isoformat()}] Failed to send WhatsApp message to {member}: {str(e)}\n")

    # Save the updated message SID mapping
    with mapping_path.open("w", encoding="utf-8") as f:
        json.dump(message_mapping, f, indent=2)

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/twilio/twilio_utils.py
================================================================================
FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/twilio/__init__.py

END OF FILE: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/twilio/__init__.py
================================================================================
