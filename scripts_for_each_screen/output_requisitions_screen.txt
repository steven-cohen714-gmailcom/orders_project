üìÑ backend/main.py
------------------------------------------------------------
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse, Response
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.routing import APIRouter
from backend.endpoints import html_routes
from backend.endpoints import requisitions
from backend.endpoints import requisition_attachments
from backend.endpoints.lookups import mark_cod_paid_api as mark_cod_paid_api_module

from pathlib import Path
import logging
import sys
import os

# --- Database ---
from backend.database import init_db, get_db_connection

# --- Login Check Helper ---
def require_login(request: Request):
    if not request.session.get("user"):
        return RedirectResponse("/", status_code=302)
    return None

# --- Routers ---
from backend.endpoints import routers
from backend.endpoints.mobile import mobile_auth
from backend.endpoints.admin import admin_router
from backend.endpoints.auth import router as auth_router
from backend.endpoints.orders import router as orders_router
from backend.endpoints.new_order_pdf_generator import router as new_order_pdf_router
from backend.endpoints.pending_order_pdf_generator import router as pending_order_pdf_router
from backend.endpoints.order_queries import router as order_queries_router
from backend.endpoints.order_receiving import router as order_receiving_router
from backend.endpoints.order_attachments import router as attachments_router
from backend.endpoints.order_email import router as order_email_router
from backend.endpoints.utils import router as utils_router
from backend.endpoints.mobile.mobile_awaiting_authorisation import router as mobile_auth_router
from backend.endpoints.lookups import items as items_router
from backend.endpoints.lookups import suppliers as suppliers_router
from backend.endpoints.lookups import projects as projects_router
from backend.endpoints.order_notes import router as order_notes_router
from backend.endpoints.lookups import requisitioners as requisitioners_router

# Allow scripts to import from parent
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from scripts.add_debug_validation_handler import install_validation_handler

# Setup logging
Path("logs").mkdir(exist_ok=True)
logging.basicConfig(
    filename="logs/server_startup.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

try:
    init_db()
    logging.info("‚úÖ Database initialized successfully.")
except Exception as e:
    logging.exception("‚ùå Failed to initialize database")
    raise

# --- FastAPI App Init ---
app = FastAPI(
    debug=True,
    title="Universal Recycling Purchase Order System",
    description="Purchase Order management system for Universal Recycling"
)

install_validation_handler(app)

# --- Static and Upload Directories ---
app.mount("/static", StaticFiles(directory="frontend/static"), name="static")
app.mount("/data/uploads", StaticFiles(directory="data/uploads"), name="uploads")

# --- Middleware ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
app.add_middleware(SessionMiddleware, secret_key="your-new-secure-key", same_site="lax", https_only=False)

templates = Jinja2Templates(directory="frontend/templates")

# --- Static Routes Router ---
static_router = APIRouter()

@static_router.get("/mobile/authorisations", response_class=HTMLResponse)
async def mobile_authorisations_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("mobile/mobile_authorisations.html", {"request": request})

@static_router.get("/home", response_class=HTMLResponse)
async def home(request: Request):
    if not request.session.get("user"):
        return RedirectResponse("/")
    logging.info("Rendering home page")
    return templates.TemplateResponse("home.html", {"request": request})

@static_router.get("/orders/new", response_class=HTMLResponse)
async def new_order_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect

    logging.info("Starting to render new order page")
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM requesters ORDER BY name")
            requesters = [dict(row) for row in cursor.fetchall()]
            cursor.execute("SELECT id, name FROM suppliers ORDER BY name")
            suppliers = [dict(row) for row in cursor.fetchall()]
            cursor.execute("SELECT item_code, item_description FROM items ORDER BY item_code")
            items = [dict(row) for row in cursor.fetchall()]
            cursor.execute("SELECT project_code, project_name FROM projects ORDER BY project_code")
            projects = [dict(row) for row in cursor.fetchall()]
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            row = cursor.fetchone()
            business_details = dict(row) if row else {
                "company_name": "Default Company",
                "address_line1": "N/A",
                "address_line2": "",
                "city": "N/A",
                "province": "N/A",
                "postal_code": "N/A",
                "telephone": "N/A",
                "vat_number": "N/A"
            }

        return templates.TemplateResponse("new_order.html", {
            "request": request,
            "requesters": requesters,
            "suppliers": suppliers,
            "items": items,
            "projects": projects,
            "business_details": business_details
        })

    except Exception as e:
        logging.error(f"Error rendering new order page: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Error rendering new order page: {str(e)}")

@static_router.get("/orders/pending_orders", response_class=HTMLResponse)
async def pending_orders_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("pending_orders.html", {"request": request})

@static_router.get("/orders/cod_orders", response_class=HTMLResponse)
async def cod_orders_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("cod_orders.html", {"request": request})

@static_router.get("/orders/received_orders", response_class=HTMLResponse)
async def received_orders_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("received_orders.html", {"request": request})

@static_router.get("/orders/audit_trail", response_class=HTMLResponse)
async def audit_trail_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("audit_trail.html", {"request": request})

@static_router.get("/maintenance", response_class=HTMLResponse)
async def maintenance_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("maintenance.html", {"request": request})

@static_router.get("/orders/partially_delivered", response_class=HTMLResponse)
async def partially_delivered_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("partially_delivered.html", {"request": request})

@static_router.get("/requisitions/pending_requisitions", response_class=HTMLResponse)
async def pending_requisitions_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("pending_requisitions.html", {"request": request})

@static_router.get("/requisitions/new", response_class=HTMLResponse)
async def new_requisition_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("new_requisition.html", {"request": request})

@static_router.get("/favicon.ico")
async def favicon():
    favicon_path = Path("frontend/static/favicon.ico")
    if not favicon_path.exists():
        return {"error": "Favicon not found"}, 404
    try:
        with open(favicon_path, "rb") as f:
            content = f.read()
        return Response(content=content, media_type="image/x-icon")
    except Exception as e:
        logging.error(f"Error serving favicon: {str(e)}", exc_info=True)
        return {"error": "Failed to serve favicon"}, 500

# --- Include Routers ---
app.include_router(static_router)
app.include_router(mobile_auth_router)

for router in routers:
    if router is not order_queries_router and router is not orders_router and router is not attachments_router and router is not order_receiving_router:
        app.include_router(router, prefix="/lookups")

app.include_router(html_routes.router)
app.include_router(admin_router, prefix="/admin")
app.include_router(order_queries_router, prefix="/orders/api")
app.include_router(new_order_pdf_router, prefix="/orders/api")
app.include_router(auth_router)
app.include_router(mobile_auth.router)
app.include_router(orders_router, prefix="/orders")
app.include_router(attachments_router, prefix="/orders")
app.include_router(order_receiving_router, prefix="/orders")
app.include_router(utils_router)
app.include_router(order_email_router, prefix="/orders")
app.include_router(pending_order_pdf_router, prefix="/orders/api")
app.include_router(order_notes_router)
app.include_router(items_router.router, prefix="/lookups")
app.include_router(suppliers_router.router, prefix="/maintenance")
app.include_router(projects_router.router, prefix="/maintenance")
app.include_router(requisitions.router)
app.include_router(requisitioners_router.router, prefix="/lookups")
app.include_router(mark_cod_paid_api_module.router, prefix="/orders")
app.include_router(requisition_attachments.router, prefix="/requisitions")

# --- Dev CLI ---
if __name__ == "__main__":
    import uvicorn
    try:
        logging.info("üöÄ Starting Uvicorn server...")
        uvicorn.run(app, host="0.0.0.0", port=8004)
    except Exception as e:
        logging.exception("‚ùå Server failed to start")
        raise


üìÑ backend/database.py
------------------------------------------------------------
import sqlite3
from pathlib import Path
import logging

# Logging setup
logging.basicConfig(
    filename="logs/db_activity_log.txt",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

DB_PATH = Path("data/orders.db")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            # -- Core Tables --
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requesters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS suppliers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    account_number TEXT,
                    name TEXT,
                    telephone TEXT,
                    vat_number TEXT,
                    registration_number TEXT,
                    email TEXT,
                    contact_name TEXT,
                    contact_telephone TEXT,
                    address_line1 TEXT,
                    address_line2 TEXT,
                    address_line3 TEXT,
                    postal_code TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_number TEXT,
                    status TEXT,
                    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    received_date TEXT,
                    total REAL,
                    order_note TEXT,
                    note_to_supplier TEXT,
                    supplier_id INTEGER,
                    requester_id INTEGER,
                    required_auth_band INTEGER,
                    payment_terms TEXT DEFAULT 'On account',
                    payment_date TEXT,
                    amount_paid REAL,
                    FOREIGN KEY (supplier_id) REFERENCES suppliers(id),
                    FOREIGN KEY (requester_id) REFERENCES requesters(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS order_items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    item_code TEXT,
                    item_description TEXT,
                    project TEXT,
                    qty_ordered REAL,
                    qty_received REAL,
                    received_date TEXT,
                    price REAL,
                    total REAL,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS attachments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    filename TEXT NOT NULL,
                    file_path TEXT NOT NULL,
                    upload_date TEXT NOT NULL,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS audit_trail (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    action TEXT,
                    details TEXT,
                    action_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    user_id INTEGER,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS settings (
                    id INTEGER PRIMARY KEY CHECK (id = 1),
                    order_number_start TEXT,
                    auth_threshold_1 INTEGER,
                    auth_threshold_2 INTEGER,
                    auth_threshold_3 INTEGER,
                    auth_threshold_4 INTEGER,
                    requisition_number_start TEXT DEFAULT 'REQ1000'
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    password_hash TEXT NOT NULL,
                    rights TEXT NOT NULL,
                    auth_threshold_band INTEGER CHECK (auth_threshold_band IN (1, 2, 3, 4)),
                    roles TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS projects (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    project_code TEXT UNIQUE,
                    project_name TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    item_code TEXT UNIQUE,
                    item_description TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS business_details (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_name TEXT NOT NULL,
                    address_line1 TEXT,
                    address_line2 TEXT,
                    city TEXT,
                    province TEXT,
                    postal_code TEXT,
                    telephone TEXT,
                    vat_number TEXT
                )
            """)
            cursor.execute("""
                INSERT OR IGNORE INTO business_details (
                    id, company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                ) VALUES (
                    1, 'Universal Recycling Company Pty Ltd', '123 Industrial Road', 'Unit 4', 'Cape Town', 'Western Cape', '8001', '+27 21 555 1234', 'VAT123456789'
                )
            """)

            # -- New: Requisitions --
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requisitioners (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requisitions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    requisition_number TEXT UNIQUE,
                    requisitioner_id INTEGER NOT NULL,
                    requisition_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    requisition_note TEXT,
                    status TEXT DEFAULT 'submitted',
                    converted_order_id INTEGER DEFAULT NULL,
                    FOREIGN KEY (requisitioner_id) REFERENCES requisitioners(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requisition_items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    requisition_id INTEGER NOT NULL,
                    description TEXT NOT NULL,
                    project TEXT,
                    quantity REAL,
                    FOREIGN KEY (requisition_id) REFERENCES requisitions(id)
                )
            """)

            conn.commit()
            logging.info("Database initialized successfully.")
    except sqlite3.Error as e:
        logging.error(f"‚ùå DB init failed: {e}")
        raise

def determine_status_and_band(total: float) -> tuple[str, int]:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4 FROM settings WHERE id = 1")
        row = cursor.fetchone()
        if not row:
            raise ValueError("Authorization thresholds not configured.")
        thresholds = [row["auth_threshold_1"], row["auth_threshold_2"], row["auth_threshold_3"], row["auth_threshold_4"]]
        status = "Pending"
        required_band = 0
        if total > thresholds[0]:
            status = "Awaiting Authorisation"
            if total <= thresholds[1]:
                required_band = 1
            elif total <= thresholds[2]:
                required_band = 2
            elif total <= thresholds[3]:
                required_band = 3
            else:
                required_band = 4
        return status, required_band

def create_order(order_data: dict, items: list) -> dict:
    status, required_band = determine_status_and_band(order_data["total"])
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO orders (
                order_number, status, total, order_note, note_to_supplier,
                supplier_id, requester_id, required_auth_band, payment_terms
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            order_data["order_number"],
            status,
            order_data["total"],
            order_data["order_note"],
            order_data["note_to_supplier"],
            order_data["supplier_id"],
            order_data["requester_id"],
            required_band,
            order_data.get("payment_terms", "On account")
        ))
        order_id = cursor.lastrowid
        for item in items:
            cursor.execute("""
                INSERT INTO order_items (
                    order_id, item_code, item_description, project,
                    qty_ordered, price, total
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                order_id,
                item["item_code"],
                item["item_description"],
                item["project"],
                item["qty_ordered"],
                item["price"],
                item["qty_ordered"] * item["price"]
            ))
        cursor.execute("""
            INSERT INTO audit_trail (order_id, action, details, user_id)
            VALUES (?, 'Created', ?, ?)
        """, (order_id, f"Order {order_data['order_number']} created", 0))
        conn.commit()
        cursor.execute("""
            SELECT * FROM orders WHERE id = ?
        """, (order_id,))
        return dict(cursor.fetchone())

def get_settings() -> dict:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT order_number_start, auth_threshold_1, auth_threshold_2,
                   auth_threshold_3, auth_threshold_4, requisition_number_start
            FROM settings WHERE id = 1
        """)
        row = cursor.fetchone()
        return dict(row) if row else {}

def update_settings(payload: dict):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO settings (
                id, order_number_start, auth_threshold_1, auth_threshold_2,
                auth_threshold_3, auth_threshold_4, requisition_number_start
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(id) DO UPDATE SET
                order_number_start = excluded.order_number_start,
                auth_threshold_1 = excluded.auth_threshold_1,
                auth_threshold_2 = excluded.auth_threshold_2,
                auth_threshold_3 = excluded.auth_threshold_3,
                auth_threshold_4 = excluded.auth_threshold_4,
                requisition_number_start = excluded.requisition_number_start
        """, (
            1,
            payload["order_number_start"],
            payload["auth_threshold_1"],
            payload["auth_threshold_2"],
            payload["auth_threshold_3"],
            payload["auth_threshold_4"],
            payload.get("requisition_number_start", "REQ1000")
        ))
        conn.commit()

def get_business_details() -> dict:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT company_name, address_line1, address_line2, city, province,
                   postal_code, telephone, vat_number
            FROM business_details WHERE id = 1
        """)
        row = cursor.fetchone()
        return dict(row) if row else {}


üìÑ backend/endpoints/orders/order_queries.py
------------------------------------------------------------
[ERROR] Could not read file: [Errno 2] No such file or directory: 'backend/endpoints/orders/order_queries.py'


üìÑ backend/endpoints/requisitions.py
------------------------------------------------------------
from fastapi import APIRouter, HTTPException
from fastapi.responses import FileResponse
from pydantic import BaseModel
from typing import List
from datetime import datetime
import sqlite3
from pathlib import Path
import traceback

from frontend.static.js.new_requisitions_pdf_generator import generate_requisition_pdf

router = APIRouter(tags=["requisitions"])

DB_PATH = Path("data/orders.db")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

# ---------------- Models ---------------- #

class RequisitionItem(BaseModel):
    description: str
    quantity: float

class RequisitionPayload(BaseModel):
    requisition_number: str
    requisitioner_id: int
    requisition_note: str
    items: List[RequisitionItem]

# ---------------- Endpoint ---------------- #

@router.post("/requisitions", response_model=dict)
async def submit_requisition(payload: RequisitionPayload):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            # Step 1: check if requisition_number already exists
            cursor.execute(
                "SELECT 1 FROM requisitions WHERE requisition_number = ?",
                (payload.requisition_number,)
            )
            if cursor.fetchone():
                raise HTTPException(status_code=400, detail="Requisition number already exists")

            # Step 2: insert new requisition
            cursor.execute("""
                INSERT INTO requisitions (
                    requisition_number,
                    requisitioner_id,
                    requisition_note,
                    requisition_date,
                    status
                ) VALUES (?, ?, ?, ?, ?)
            """, (
                payload.requisition_number,
                payload.requisitioner_id,
                payload.requisition_note,
                datetime.now().isoformat(),
                "submitted"
            ))

            requisition_id = cursor.lastrowid

            for item in payload.items:
                cursor.execute("""
                    INSERT INTO requisition_items (
                        requisition_id,
                        description,
                        quantity
                    ) VALUES (?, ?, ?)
                """, (
                    requisition_id,
                    item.description,
                    item.quantity
                ))

            # Step 3: update settings to bump requisition_number_start
            prefix = ''.join(filter(str.isalpha, payload.requisition_number))
            number = int(''.join(filter(str.isdigit, payload.requisition_number)))
            next_number = f"{prefix}{number + 1}"

            cursor.execute("""
                UPDATE settings
                SET requisition_number_start = ?
            """, (next_number,))

            # ‚úÖ Step 4: relink temporary attachments
            cursor.execute("""
                UPDATE attachments
                SET requisition_id = ?, requisition_number = NULL
                WHERE requisition_id IS NULL AND requisition_number = ?
            """, (
                requisition_id,
                payload.requisition_number
            ))

            conn.commit()
            return {"status": "success", "requisition_id": requisition_id}

    except HTTPException as he:
        raise he  # Preserve intentional 400 errors
    except Exception as e:
        print("üî• Backend crash:")
        print(traceback.format_exc())
        raise HTTPException(status_code=500, detail=f"Error submitting requisition: {str(e)}")

@router.get("/api/pending_requisitions", response_model=dict)
def get_pending_requisitions():
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            cursor.execute("""
                SELECT
                    r.id,
                    r.requisition_number,
                    r.requisition_date,
                    r.requisition_note,
                    r.status,
                    rq.name AS requisitioner,
                    (
                        SELECT GROUP_CONCAT(ri.description, ', ')
                        FROM requisition_items ri
                        WHERE ri.requisition_id = r.id
                    ) AS description,
                    (
                        SELECT SUM(ri.quantity)
                        FROM requisition_items ri
                        WHERE ri.requisition_id = r.id
                    ) AS total_quantity,
                    r.converted_order_id
                FROM requisitions r
                LEFT JOIN requisitioners rq ON r.requisitioner_id = rq.id
                WHERE r.status = 'submitted'
                ORDER BY r.requisition_date DESC
            """)

            rows = cursor.fetchall()
            requisitions = [dict(row) for row in rows]
            return {"requisitions": requisitions}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching requisitions: {str(e)}")

@router.get("/requisitions/api/generate_pdf/{requisition_id}")
def requisition_pdf(requisition_id: int):
    try:
        pdf_path = generate_requisition_pdf(requisition_id)
        return FileResponse(
            pdf_path,
            media_type="application/pdf",
            filename=f"Requisition_{requisition_id}.pdf"
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"PDF generation failed: {str(e)}")


üìÑ backend/endpoints/auth.py
------------------------------------------------------------
from fastapi import APIRouter, Request, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from backend.database import get_db_connection
import bcrypt
import json

router = APIRouter()
templates = Jinja2Templates(directory="frontend/templates")

@router.get("/", response_class=HTMLResponse)
async def login_page(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})

@router.post("/login")
async def login(request: Request):
    try:
        data = await request.json()
    except Exception:
        return JSONResponse(status_code=400, content={"error": "Invalid JSON payload"})

    username = data.get("username", "").strip().lower()
    password = data.get("password", "")

    if not username or not password:
        return JSONResponse(status_code=400, content={"error": "Username and password are required"})

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, username, password_hash, rights, auth_threshold_band FROM users WHERE username = ?",
            (username,)
        )
        user = cursor.fetchone()
        conn.close()

        if not user:
            return JSONResponse(status_code=401, content={"error": "Invalid username or password"})

        stored_hash = user["password_hash"]
        if not bcrypt.checkpw(password.encode("utf-8"), stored_hash.encode("utf-8")):
            return JSONResponse(status_code=401, content={"error": "Invalid username or password"})

        user_roles = user["rights"] or "view"

        request.session["user"] = {
            "id": user["id"],
            "username": user["username"],
            "rights": user_roles,
            "auth_threshold_band": user["auth_threshold_band"]
        }

        # Assign session roles from DB
        request.session["roles"] = user_roles

        return JSONResponse(status_code=200, content={"success": True})

    except Exception as e:
        return JSONResponse(status_code=500, content={"error": f"Login failed due to server error: {str(e)}"})

@router.get("/logout")
async def logout(request: Request):
    request.session.clear()
    return JSONResponse(status_code=200, content={"message": "Logged out successfully"})

@router.get("/session_debug")
async def session_debug(request: Request):
    return JSONResponse(content={
        "user": request.session.get("user"),
        "roles": request.session.get("roles")
    })


üìÑ backend/endpoints/html_routes.py
------------------------------------------------------------
from fastapi import APIRouter, Request, HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from backend.database import get_db_connection
import logging

# Logging setup
logging.basicConfig(
    filename="logs/server.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

router = APIRouter()
templates = Jinja2Templates(directory="frontend/templates")


@router.get("/orders/new", response_class=HTMLResponse)
async def new_order_page(request: Request):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            # Fetch requesters
            cursor.execute("SELECT id, name FROM requesters ORDER BY name")
            requesters = [dict(row) for row in cursor.fetchall()]

            # Fetch suppliers
            cursor.execute("SELECT id, name FROM suppliers ORDER BY name")
            suppliers = [dict(row) for row in cursor.fetchall()]

            # Fetch items
            cursor.execute("SELECT item_code, item_description FROM items ORDER BY item_code")
            items = [dict(row) for row in cursor.fetchall()]

            # Fetch projects
            cursor.execute("SELECT project_code, project_name FROM projects ORDER BY project_code")
            projects = [dict(row) for row in cursor.fetchall()]

            # Fetch business details
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            row = cursor.fetchone()
            if not row:
                logging.error("No business details found in database")
                raise HTTPException(status_code=500, detail="No business details found in database")

            business_details = dict(row)
            logging.info(f"Business details fetched: {business_details}")

        return templates.TemplateResponse(
            "new_order.html",
            {
                "request": request,
                "requesters": requesters,
                "suppliers": suppliers,
                "items": items,
                "projects": projects,
                "business_details": business_details
            }
        )
    except Exception as e:
        logging.error(f"Error rendering new order page: {str(e)}")
        raise


@router.get("/orders/pending_orders", response_class=HTMLResponse)
async def pending_orders_page(request: Request):
    try:
        return templates.TemplateResponse("pending_orders.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering pending orders page: {str(e)}")
        raise


@router.get("/mobile/mobile_authorisations", response_class=HTMLResponse)
async def mobile_authorisations_screen(request: Request):
    try:
        return templates.TemplateResponse("mobile/mobile_authorisations.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering mobile authorisations screen: {str(e)}")
        raise


@router.get("/orders/authorisations_per_user", response_class=HTMLResponse)
async def authorisations_per_user_screen(request: Request):
    try:
        return templates.TemplateResponse("authorisations_per_user.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering authorisations_per_user screen: {str(e)}")
        raise


@router.get("/orders/{order_id}", response_class=HTMLResponse)
async def view_order_by_id(order_id: int, request: Request):
    try:
        return templates.TemplateResponse("order_detail.html", {"request": request, "order_id": order_id})
    except Exception as e:
        logging.error(f"Error rendering order detail page: {str(e)}")
        raise


üìÑ backend/utils/permissions_utils.py
------------------------------------------------------------
# File: backend/utils/permissions_utils.py

from fastapi import Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

templates = Jinja2Templates(directory="frontend/templates")

def enforce_roles(request: Request, allowed_roles: list):
    """
    Checks if the user has at least one of the allowed roles.
    Returns None if allowed. Returns access_denied TemplateResponse if not.
    """
    roles = request.session.get("roles", "")
    role_set = {r.strip().lower() for r in roles.split(",")}

    if not any(role in role_set for role in allowed_roles):
        return templates.TemplateResponse("access_denied.html", {"request": request})

    return None


üìÑ backend/endpoints/lookups/users.py
------------------------------------------------------------
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, constr
from typing import Optional
from backend.database import get_db_connection
import bcrypt

router = APIRouter()

# ----------------------------
# Pydantic Models
# ----------------------------

class UserCreate(BaseModel):
    username: constr(strip_whitespace=True, min_length=1)
    password: constr(strip_whitespace=True, min_length=4)
    rights: str
    auth_threshold_band: Optional[int] = None

class UserUpdate(BaseModel):
    username: constr(strip_whitespace=True, min_length=1)
    password: Optional[constr(strip_whitespace=True, min_length=4)] = None
    rights: str
    auth_threshold_band: Optional[int] = None

# ----------------------------
# GET all users
# ----------------------------

@router.get("/users")
async def get_users():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, username, rights, auth_threshold_band FROM users")
    users = cursor.fetchall()
    conn.close()
    return {
        "users": [
            {
                "id": u[0],
                "username": u[1],
                "rights": u[2],
                "auth_threshold_band": u[3]
            } for u in users
        ]
    }

# ----------------------------
# POST: Add a new user
# ----------------------------

@router.post("/users")
async def add_user(payload: UserCreate):
    conn = get_db_connection()
    cursor = conn.cursor()

    password_hash = bcrypt.hashpw(payload.password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

    try:
        cursor.execute(
            "INSERT INTO users (username, password_hash, rights, auth_threshold_band) VALUES (?, ?, ?, ?)",
            (payload.username, password_hash, payload.rights, payload.auth_threshold_band)
        )
        conn.commit()
        return {"status": "User added successfully"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()

# ----------------------------
# PUT: Update an existing user
# ----------------------------

@router.put("/users/{user_id}")
async def update_user(user_id: int, payload: UserUpdate):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail="User not found")

        fields_to_update = {
            "username": payload.username,
            "rights": payload.rights,
            "auth_threshold_band": payload.auth_threshold_band
        }

        if payload.password and payload.password.strip():
            password_hash = bcrypt.hashpw(payload.password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            fields_to_update["password_hash"] = password_hash

        set_clause = ", ".join([f"{key} = ?" for key in fields_to_update])
        values = list(fields_to_update.values()) + [user_id]

        cursor.execute(f"UPDATE users SET {set_clause} WHERE id = ?", values)
        conn.commit()
        return {"status": "User updated successfully"}

    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()

# ----------------------------
# DELETE: Remove a user
# ----------------------------

@router.delete("/users/{user_id}")
async def delete_user(user_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
        if cursor.rowcount == 0:
            raise HTTPException(status_code=404, detail="User not found")
        conn.commit()
        return {"status": "User deleted successfully"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()


üìÑ backend/endpoints/lookups/requisitioners.py
------------------------------------------------------------
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List
import sqlite3
from pathlib import Path

router = APIRouter(tags=["requisitioners"])

DB_PATH = Path("data/orders.db")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

# ------------------- Models ------------------- #

class Requisitioner(BaseModel):
    id: int
    name: str

class NewRequisitioner(BaseModel):
    name: str

# ------------------- Endpoints ------------------- #

@router.get("/requisitioners", response_model=List[Requisitioner])
async def get_requisitioners():
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM requisitioners ORDER BY name")
            rows = cursor.fetchall()
            return [dict(row) for row in rows]
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching requisitioners: {str(e)}")

@router.post("/requisitioners", response_model=dict)
async def add_requisitioner(payload: NewRequisitioner):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO requisitioners (name) VALUES (?)", (payload.name,))
            conn.commit()
            return {"status": "success", "id": cursor.lastrowid}
    except sqlite3.IntegrityError:
        raise HTTPException(status_code=400, detail="Requisitioner already exists.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error adding requisitioner: {str(e)}")

@router.delete("/requisitioners/{id}", response_model=dict)
async def delete_requisitioner(id: int):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM requisitioners WHERE id = ?", (id,))
            conn.commit()
            return {"status": "deleted", "id": id}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error deleting requisitioner: {str(e)}")


üìÑ frontend/templates/access_denied.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Access Denied</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f8f9fa;
      color: #333;
      padding: 2rem;
      text-align: center;
    }
    h1 {
      font-size: 2rem;
      margin-bottom: 1rem;
      color: #b30000;
    }
    p {
      font-size: 1rem;
    }
  </style>
</head>
<body>
  <h1>üö´ Access Denied</h1>
  <p>You do not have permission to view this page.</p>
</body>
</html>


üìÑ frontend/templates/pending_requisitions.html
------------------------------------------------------------
{% extends "base.html" %}
{% block title %}Pending Requisitions{% endblock %}

{% block content %}
<h2>Pending Requisitions</h2>

<div class="filters" style="margin-bottom: 1.5rem;">
  <div class="filter-group">
    <label for="start-date">Start Date:</label>
    <input type="date" id="start-date">
  </div>
  <div class="filter-group">
    <label for="end-date">End Date:</label>
    <input type="date" id="end-date">
  </div>
  <div class="filter-group">
    <label for="filter-requisitioner">Requisitioner:</label>
    <select id="filter-requisitioner">
      <option value="All">All</option>
    </select>
  </div>
  <div class="filter-group">
    <label for="filter-status">Status:</label>
    <select id="filter-status">
      <option value="All">All</option>
      <option value="submitted">Submitted</option>
      <option value="ordered">Ordered</option>
      <option value="archived">Archived</option>
    </select>
  </div>
  <div class="filter-actions">
    <button id="run-btn">Run</button>
    <button id="clear-btn">Clear</button>
  </div>
</div>

<table>
  <thead>
    <tr>
      <th>Date</th>
      <th>Requisition #</th>
      <th>Requisitioner</th>
      <th>Project</th>
      <th>Quantity</th>
      <th>Description</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody id="pending-requisition-body">
    <tr><td colspan="7">Loading...</td></tr>
  </tbody>
</table>

<script type="module" src="/static/js/pending_requisitions.js"></script>
{% endblock %}


üìÑ frontend/static/js/pending_requisitions.js
------------------------------------------------------------
import { loadRequisitioners } from "./components/shared_filters.js";
import { showUploadAttachmentsModal, showViewAttachmentsModal, checkAttachments } from "./components/requisitions_attachment_modal.js";
import { showOrderNoteModal } from "./components/order_note_modal.js";
import { showPDFModal } from "./components/pdf_modal.js";

console.log("üì¶ pending_requisitions.js loaded");

async function loadFiltersAndRequisitions() {
  try {
    await loadRequisitioners("filter-requisitioner");
    await loadRequisitions();
  } catch (err) {
    console.error("‚ùå Error loading filters:", err);
    document.getElementById("pending-requisition-body").innerHTML = `<tr><td colspan="7">Error loading filters: ${err.message}</td></tr>`;
  }
}

async function loadRequisitions() {
  const startDate = document.getElementById("start-date").value;
  const endDate = document.getElementById("end-date").value;
  const requisitioner = document.getElementById("filter-requisitioner").value;
  const status = document.getElementById("filter-status").value;

  const params = new URLSearchParams();
  if (startDate) params.append("start_date", startDate);
  if (endDate) params.append("end_date", endDate);
  if (requisitioner && requisitioner !== "All") params.append("requisitioner", requisitioner);
  if (status && status !== "All") params.append("status", status);

  try {
    const res = await fetch(`/api/pending_requisitions?${params.toString()}`);
    if (!res.ok) throw new Error(`HTTP ${res.status}: ${await res.text()}`);
    const data = await res.json();

    const tbody = document.getElementById("pending-requisition-body");
    tbody.innerHTML = "";

    if (data.requisitions && Array.isArray(data.requisitions) && data.requisitions.length > 0) {
      data.requisitions.forEach((req, index) => {
        const row = document.createElement("tr");

        const formattedDate = new Date(req.requisition_date).toLocaleDateString("en-ZA");
        const sanitizedNote = escapeHTML(req.requisition_note || "");
        const converted = req.converted_order_id ? "‚úÖ" : "";

        row.innerHTML = `
          <td>${formattedDate}</td>
          <td>${escapeHTML(req.requisition_number)}</td>
          <td>${escapeHTML(req.requisitioner)}</td>
          <td>${escapeHTML(req.project || "")}</td>
          <td>${escapeHTML(req.total_quantity || "")}</td>
          <td>${escapeHTML(req.description || "")}</td>
          <td>
            ${converted}
            <span class="pdf-icon" title="View PDF" data-id="${req.id}">üìÑ</span>
            <span class="note-icon" title="Edit Note" data-id="${req.id}" data-note="${sanitizedNote}" id="note-${index}">üìù</span>
            <span class="clip-icon" title="View/Upload Attachments" data-id="${req.id}" data-number="${req.requisition_number}">üìé</span>
          </td>
        `;

        tbody.appendChild(row);

        row.querySelector(`#note-${index}`).addEventListener("click", (e) => {
          const target = e.target;
          showOrderNoteModal(sanitizedNote, req.id, (newNote) => {
            target.setAttribute("data-note", escapeHTML(newNote));
          });
        });

        row.querySelector(".clip-icon").addEventListener("click", async (e) => {
          const target = e.target;
          const id = parseInt(target.getAttribute("data-id"));
          const number = target.getAttribute("data-number");
          const has = await checkAttachments(number, "requisition");

          if (has) {
            showViewAttachmentsModal(id, number, null, null, "requisition");
          } else {
            showUploadAttachmentsModal(id, number, () => {}, "requisition");
          }
        });

        row.querySelector(".pdf-icon").addEventListener("click", async () => {
          try {
            const response = await fetch(`/requisitions/api/generate_pdf/${req.id}`);
            if (!response.ok) throw new Error(`PDF generation failed with status ${response.status}`);
            const blob = await response.blob();
            showPDFModal(blob);
          } catch (err) {
            alert("‚ùå Could not generate PDF");
            console.error(err);
          }
        });
      });
    } else {
      tbody.innerHTML = `<tr><td colspan="7">No requisitions found.</td></tr>`;
    }
  } catch (err) {
    console.error("‚ùå Error loading requisitions:", err);
    document.getElementById("pending-requisition-body").innerHTML = `<tr><td colspan="7">Error loading requisitions: ${err.message}</td></tr>`;
  }
}

function escapeHTML(str) {
  if (typeof str !== "string") return "";
  return str.replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;");
}

function clearFilters() {
  document.getElementById("start-date").value = "";
  document.getElementById("end-date").value = "";
  document.getElementById("filter-requisitioner").value = "All";
  document.getElementById("filter-status").value = "All";
  loadRequisitions();
}

document.getElementById("run-btn").addEventListener("click", loadRequisitions);
document.getElementById("clear-btn").addEventListener("click", clearFilters);
document.addEventListener("DOMContentLoaded", loadFiltersAndRequisitions);

window.showOrderNoteModal = showOrderNoteModal;
window.showUploadAttachmentsModal = showUploadAttachmentsModal;
window.checkAttachments = checkAttachments;
window.showViewAttachmentsModal = showViewAttachmentsModal;
window.showPDFModal = showPDFModal;


üìÑ frontend/static/js/requisition_modal.js
------------------------------------------------------------
[ERROR] Could not read file: [Errno 2] No such file or directory: 'frontend/static/js/requisition_modal.js'


üìÑ frontend/templates/new_requisition.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>New Requisition</title>
  <link rel="stylesheet" href="/static/css/style.css">
  <script type="module" src="/static/js/new_requisition_main.js" defer></script>
</head>

<body>
  {% include "_tab_nav.html" %}

  <div class="container">
    <h2>üì¶ New Requisition</h2>

    <!-- Requisition Header -->
    <div class="form-group">
      <label for="requisitioner">Requisitioner:</label>
      <select id="requisitioner" required></select>
    </div>

    <div class="form-group">
      <label for="requisition-date">Date of Requisition:</label>
      <input type="date" id="requisition-date" readonly />
    </div>

    <div class="form-group">
      <label for="requisition-number">Requisition Number:</label>
      <input type="text" id="requisition-number" readonly />
    </div>

    <div class="form-group">
      <label for="requisition-note">Requisition Note:</label>
      <textarea id="requisition-note" rows="3" placeholder="Optional note..."></textarea>
    </div>

    <!-- Line Items Table -->
    <table id="requisition-table">
      <thead>
        <tr>
          <th>Description</th>
          <th>Quantity</th>
          <th></th>
        </tr>
      </thead>
      <tbody id="line-items-body">
        <!-- JS will populate rows -->
      </tbody>
    </table>

    <!-- Aligned Buttons -->
    <div class="form-actions" style="display: flex; gap: 1rem; margin-top: 1.5rem;">
      <button id="add-line" type="button">‚ûï Add Line</button>
      <button id="preview-pdf" type="button">üìÑ View PDF</button>
      <button id="submit-requisition" type="button">‚úÖ Submit Requisition</button>
    </div>

    <!-- Message Log -->
    <div id="requisition-log" class="message-log" style="margin-top: 1rem;"></div>
  </div>
</body>
</html>


üìÑ frontend/static/js/new_requisition_main.js
------------------------------------------------------------
import { logToServer, populateDropdown } from "./components/utils.js";

let rowCount = 0;
let currentRequisitionId = null;
let currentRequisitionNumber = null;

document.addEventListener("DOMContentLoaded", async () => {
  await populateDropdown("/lookups/requisitioners", "requisitioner");
  addLineItem();

  try {
    const settings = await fetch("/lookups/settings").then(res => res.json());
    const nextReqNum = settings.requisition_number_start || "REQ1000";
    const today = new Date().toISOString().split("T")[0];

    currentRequisitionNumber = nextReqNum;
    document.getElementById("requisition-number").value = nextReqNum;
    document.getElementById("requisition-date").value = today;
  } catch (err) {
    console.error("‚ùå Failed to load settings:", err);
  }

  document.getElementById("add-line").addEventListener("click", addLineItem);
  document.getElementById("submit-requisition").addEventListener("click", submitRequisition);
  document.getElementById("preview-pdf").addEventListener("click", previewPDF);
});

function addLineItem() {
  const tbody = document.getElementById("line-items-body");
  const row = document.createElement("tr");
  row.dataset.row = rowCount;

  row.innerHTML = `
    <td><input type="text" class="description" required placeholder="Enter item description"></td>
    <td><input type="number" class="quantity" required min="0" step="1" value="1"></td>
    <td><button type="button" onclick="this.closest('tr').remove()">üóëÔ∏è</button></td>
  `;

  tbody.appendChild(row);
  rowCount++;
}

async function submitRequisition() {
  const log = document.getElementById("requisition-log");
  log.textContent = "";

  const requisitionerId = document.getElementById("requisitioner").value;
  const note = document.getElementById("requisition-note").value;
  const date = document.getElementById("requisition-date").value;

  if (!requisitionerId) {
    log.textContent = "‚ö†Ô∏è Please select a requisitioner.";
    return;
  }

  const items = [];
  document.querySelectorAll("#line-items-body tr").forEach(row => {
    const desc = row.querySelector(".description").value.trim();
    const qty = parseFloat(row.querySelector(".quantity").value);

    if (desc && qty > 0) {
      items.push({ description: desc, quantity: qty });
    }
  });

  if (items.length === 0) {
    log.textContent = "‚ö†Ô∏è Please add at least one valid line item.";
    return;
  }

  try {
    const payload = {
      requisition_number: currentRequisitionNumber,
      requisitioner_id: parseInt(requisitionerId),
      requisition_note: note,
      requisition_date: date,
      items
    };

    const res = await fetch("/requisitions", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });

    const data = await res.json();
    if (res.ok) {
      log.textContent = `‚úÖ Requisition submitted (ID: ${data.requisition_id})`;
      currentRequisitionId = data.requisition_id;
    } else {
      log.textContent = `‚ùå Submission failed: ${data.detail}`;
    }

  } catch (err) {
    log.textContent = `‚ùå Error: ${err.message}`;
  }
}

function previewPDF() {
  alert("üìÑ PDF preview not yet implemented.");
}


üìÑ frontend/static/js/components/shared_filters.js
------------------------------------------------------------
export async function loadRequesters(selectId) {
  try {
    const res = await fetch("/lookups/requesters");
    const data = await res.json();
    const select = document.getElementById(selectId);
    if (!select) return;

    select.innerHTML = '<option value="All">All</option>';
    data.requesters.forEach(r => {
      const opt = document.createElement("option");
      opt.value = r.name;
      opt.textContent = r.name;
      select.appendChild(opt);
    });
  } catch (err) {
    console.error(`‚ùå Failed to load requesters for ${selectId}:`, err);
  }
}

export async function loadSuppliers(selectId) {
  try {
    const res = await fetch("/lookups/suppliers");
    const data = await res.json();
    const select = document.getElementById(selectId);
    if (!select) return;

    select.innerHTML = '<option value="All">All</option>';
    data.suppliers.forEach(s => {
      const opt = document.createElement("option");
      opt.value = s.name;
      opt.textContent = s.name;
      select.appendChild(opt);
    });
  } catch (err) {
    console.error(`‚ùå Failed to load suppliers for ${selectId}:`, err);
  }
}

export async function loadRequisitioners(selectId) {
  try {
    const res = await fetch("/lookups/requisitioners");
    const data = await res.json();
    const select = document.getElementById(selectId);
    if (!select) return;

    select.innerHTML = '<option value="All">All</option>';
    data.forEach(r => {
      const opt = document.createElement("option");
      opt.value = r.name;
      opt.textContent = r.name;
      select.appendChild(opt);
    });
  } catch (err) {
    console.error(`‚ùå Failed to load requisitioners for ${selectId}:`, err);
  }
}


üìÑ frontend/static/js/components/pdf_modal.js
------------------------------------------------------------
// File: frontend/static/js/components/pdf_modal.js

export function showPDFModal(blob) {
    const modal = document.createElement("div");
    modal.style.position = "fixed";
    modal.style.top = 0;
    modal.style.left = 0;
    modal.style.width = "100%";
    modal.style.height = "100%";
    modal.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
    modal.style.display = "flex";
    modal.style.alignItems = "center";
    modal.style.justifyContent = "center";
    modal.style.zIndex = 10000;

    const contentWrapper = document.createElement("div");
    contentWrapper.style.width = "80%";
    contentWrapper.style.height = "80%";
    contentWrapper.style.display = "flex";
    contentWrapper.style.flexDirection = "column";
    contentWrapper.style.backgroundColor = "white";
    contentWrapper.style.borderRadius = "8px";
    contentWrapper.style.boxShadow = "0 0 10px #fff";
    contentWrapper.style.overflow = "hidden";

    const headerBar = document.createElement("div");
    headerBar.style.display = "flex";
    headerBar.style.justifyContent = "flex-end";
    headerBar.style.alignItems = "center";
    headerBar.style.backgroundColor = "#f0f0f0";
    headerBar.style.padding = "8px 12px";

    const pdfURL = URL.createObjectURL(blob);
    const iframe = document.createElement("iframe");
    iframe.src = pdfURL;
    iframe.style.width = "100%";
    iframe.style.height = "100%";
    iframe.style.border = "none";

    // === üìß Email Button ===
    const emailBtn = document.createElement("button");
    emailBtn.textContent = "üìß Email PDF";
    emailBtn.style.background = "#28a745";
    emailBtn.style.color = "#fff";
    emailBtn.style.border = "none";
    emailBtn.style.padding = "6px 12px";
    emailBtn.style.borderRadius = "4px";
    emailBtn.style.cursor = "pointer";
    emailBtn.style.marginRight = "8px";
    emailBtn.onclick = async () => {
        const orderId = window.currentOrderIdForPDF;
        if (!orderId) return alert("Order ID not available");

        try {
            const response = await fetch(`/orders/email_purchase_order/${orderId}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                credentials: "include"
            });

            if (!response.ok) {
                const error = await response.text();
                throw new Error(error);
            }

            alert("‚úÖ Purchase order emailed successfully.");
        } catch (err) {
            console.error("Email failed:", err);
            alert("‚ùå Failed to send email. See console for details.");
        }
    };

    // === Download Button ===
    const downloadBtn = document.createElement("button");
    downloadBtn.textContent = "Download PDF";
    downloadBtn.style.background = "#007bff";
    downloadBtn.style.color = "#fff";
    downloadBtn.style.border = "none";
    downloadBtn.style.padding = "6px 12px";
    downloadBtn.style.borderRadius = "4px";
    downloadBtn.style.cursor = "pointer";
    downloadBtn.onclick = () => {
        const link = document.createElement("a");
        link.href = pdfURL;
        const filename = window.currentOrderNumberForPDF || "PurchaseOrder.pdf";
        link.download = filename;
        link.click();
    };

    const buttonGroup = document.createElement("div");
    buttonGroup.style.display = "flex";
    buttonGroup.style.alignItems = "center";
    buttonGroup.style.gap = "10px"; // ‚Üê KEY: adds spacing between buttons

    buttonGroup.appendChild(emailBtn);
    buttonGroup.appendChild(downloadBtn);

    const closeBtn = document.createElement("button");
    closeBtn.textContent = "‚úñ";
    closeBtn.style.background = "transparent";
    closeBtn.style.border = "none";
    closeBtn.style.color = "#333";
    closeBtn.style.fontSize = "20px";
    closeBtn.style.cursor = "pointer";
    closeBtn.onclick = () => {
        document.body.removeChild(modal);
        URL.revokeObjectURL(pdfURL);
    };

    headerBar.appendChild(buttonGroup);
    headerBar.appendChild(closeBtn);

    modal.addEventListener("click", (e) => {
        if (e.target === modal) {
            document.body.removeChild(modal);
            URL.revokeObjectURL(pdfURL);
        }
    });

    contentWrapper.appendChild(headerBar);
    contentWrapper.appendChild(iframe);
    modal.appendChild(contentWrapper);
    document.body.appendChild(modal);
}


üìÑ frontend/static/js/components/utils.js
------------------------------------------------------------
// Logs messages to the server
export async function logToServer(level, message, details = {}) {
  try {
    await fetch("/log", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify({ level, message, details })
    });
  } catch (error) {
    console.error("Failed to log to server:", error);
  }
}

/**
 * Enables fuzzy search on the description part of a select element.
 * Assumes each <option> includes `data-description` for filtering.
 * 
 * @param {string} selectId - The ID of the <select> element.
 */
export function enableFuzzySearch(selectId) {
  const selectEl = document.getElementById(selectId);
  if (!selectEl || selectEl.tagName !== "SELECT") return;

  const originalOptions = Array.from(selectEl.options);

  const input = document.createElement("input");
  input.type = "text";
  input.placeholder = "Search description...";
  input.style.marginBottom = "0.5rem";
  input.style.width = "100%";
  input.style.padding = "0.25rem";
  input.style.fontSize = "0.9rem";

  selectEl.parentNode.insertBefore(input, selectEl);

  input.addEventListener("input", () => {
    const query = input.value.toLowerCase();
    selectEl.innerHTML = "";

    const matched = originalOptions.filter(opt => {
      const desc = opt.dataset.description || opt.textContent;
      return desc.toLowerCase().includes(query);
    });

    matched.forEach(opt => selectEl.appendChild(opt));
  });

  selectEl.addEventListener("change", () => {
    input.value = "";
    input.dispatchEvent(new Event("input"));
  });
}

export async function populateDropdown(endpoint, selectId, hideDefault = false) {
  try {
    const res = await fetch(endpoint);
    const data = await res.json();
    const select = document.getElementById(selectId);
    if (!select) return;

    if (!hideDefault) {
      select.innerHTML = '<option value="">Select...</option>';
    } else {
      select.innerHTML = "";
    }

    const key = Object.keys(data)[0];
    const items = Array.isArray(data[key]) ? data[key] : data;

    items.forEach(item => {
      const opt = document.createElement("option");
      opt.value = item.id;
      opt.textContent = item.name;
      select.appendChild(opt);
    });
  } catch (err) {
    console.error(`‚ùå Failed to load dropdown from ${endpoint}:`, err);
  }
}



üìÑ frontend/static/css/style.css
------------------------------------------------------------
  body {
    font-family: Arial, sans-serif;
    margin: 2rem;
    background-color: #f4f6f8;
  }

  h2 {
    margin-bottom: 1.5rem;
    font-size: 1.8rem;
    color: #1a3c5e;
  }

  /* ------------------ TABLE ------------------ */
  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
    background-color: #fff;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    overflow: hidden;
  }

  th {
    background-color: #e8eef4;
    font-weight: 600;
    color: #1a3c5e;
    text-transform: none;
    font-size: 0.95rem;
    height: 48px;
  }

  td {
    border: 1px solid #e0e4e8;
    padding: 0.75rem;
    text-align: center;
    font-size: 0.95rem;
    color: #333;
  }

  /* Add spacing between buttons in table cells */
  td button {
    margin-right: 0.5rem;
  }

  td button:last-child {
    margin-right: 0;
  }

  /* Left-align all cells in maintenance screen tables */
  #users-table td,
  #requesters-table td,
  #items-table td,
  #suppliers-table td,
  #projects-table td {
    text-align: left;
  }

  /* ------------------ FILTERS ------------------ */
  .filters {
    margin-bottom: 1.5rem;
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    align-items: center;
    background-color: #fff;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .filters label {
    font-weight: 600;
    color: #1a3c5e;
    margin-right: 0.5rem;
    font-size: 0.95rem;
  }

  input[type="date"],
  input[type="text"],
  input[type="number"],
  select,
  textarea {
    padding: 0.6rem;
    font-size: 0.95rem;
    font-family: Arial, sans-serif;
    border: 1px solid #c7d0d9;
    border-radius: 6px;
    background-color: #fff;
    min-width: 180px;
    max-width: 240px;
    transition: border-color 0.2s;
  }

  input[type="date"]:focus,
  select:focus,
  input[type="text"]:focus,
  textarea:focus {
    outline: none;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px rgba(0, 102, 204, 0.2);
  }

  /* ------------------ BUTTONS ------------------ */
  button {
    padding: 0.6rem 1.5rem;
    cursor: pointer;
    background-color: #0066cc;
    color: #fff;
    border: none;
    border-radius: 6px;
    font-size: 0.95rem;
    font-weight: 500;
    transition: background-color 0.2s;
  }

  button:hover {
    background-color: #0055aa;
  }

  /* ------------------ ICONS ------------------ */
  .expand-icon,
  .clip-icon,
  .eye-icon,
  .note-icon,
  .supplier-note-icon,
  .receive-icon,
  .pdf-icon {
    cursor: pointer;
    font-size: 1.2rem;
    margin: 0 0.4rem;
    display: inline-block;
    color: #0066cc;
    transition: color 0.2s;
  }

  .expand-icon:hover,
  .clip-icon:hover,
  .eye-icon:hover,
  .note-icon:hover,
  .supplier-note-icon:hover,
  .receive-icon:hover {
    color: #003366;
  }

  .eye-icon.disabled {
    opacity: 0.3;
    cursor: default;
  }

  /* ------------------ LOGIN ------------------ */
  .login-box {
    background: white;
    padding: 2rem 3rem;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
    text-align: center;
    margin: 5rem auto;
  }

  .login-box h2 {
    margin-bottom: 1.5rem;
    font-size: 1.5rem;
    color: #333;
  }

  .login-box input {
    width: 100%;
    padding: 0.8rem;
    margin-bottom: 1.2rem;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1rem;
  }

  .login-box button {
    width: 100%;
    padding: 0.8rem;
    background-color: #0056b3;
    border: none;
    color: white;
    font-size: 1rem;
    border-radius: 5px;
    cursor: pointer;
  }

  .login-box button:hover {
    background-color: #004a99;
  }

  #login-error {
    margin-top: 0.5rem;
    color: red;
    font-size: 0.9rem;
  }

  /* ------------------ MAINTENANCE ------------------ */
  .tabs {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .tab {
    padding: 0.5rem 1rem;
    cursor: pointer;
    background: #ddd;
    border-radius: 4px 4px 0 0;
  }

  .tab.active {
    background: #007BFF;
    color: white;
  }

  .tab-content {
    display: none;
    padding: 1rem;
    border: 1px solid #ccc;
    border-radius: 0 4px 4px 4px;
    background-color: white;
  }

  .tab-content.active {
    display: block;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    font-weight: bold;
  }

  /* ------------------ NEW ORDER SCREEN ONLY ------------------ */
  .order-header {
    margin-bottom: 2rem;
  }

  .order-header label span {
    font-weight: bold;
    font-size: 1.05rem;
    margin-left: 0.5rem;
  }

  .form-row {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .column {
    flex: 1 1 240px;
    display: flex;
    flex-direction: column;
  }

  #note_to_supplier {
    min-height: 100px;
  }

  .delivery-block {
    margin-top: 2.5rem;
    margin-bottom: 2.5rem;
  }

  .add-item-block {
    margin-top: 2rem;
    margin-bottom: 2rem;
  }

  .summary {
    margin-bottom: 2rem;
  }

  .button-group {
    margin-top: 2rem;
  }

  /* Reusable table styling for modals */
  .receive-modal table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
    font-size: 14px;
  }

  .receive-modal th,
  .receive-modal td {
    border: 1px solid #ccc;
    padding: 8px;
    text-align: left;
  }

  .receive-modal input[type="number"] {
    width: 80px;
  }
  i:hover {
    cursor: pointer;
  }
  .note-icon:hover,
  .clip-icon:hover,
  .expand-icon:hover,
  .receive-icon:hover,
  .supplier-note-icon:hover {
    cursor: pointer;
  }
  .email-icon {
    cursor: pointer;
    margin-left: 5px;
    font-size: 1.2em;
  }
  .email-icon:hover {
    color: #007bff;
  }

  /* ------------------ FORM FIELD SPACING (MAINTENANCE) ------------------ */

  #settings .form-group label,
  #settings .form-group input {
    display: block;
    margin-bottom: 0.5rem;
  }

  #settings .form-group input {
    width: 250px;
    padding: 0.5rem;
  }

  #settings .form-group {
    margin-bottom: 1.2rem;
  }

  /* ------------------ BUSINESS DETAILS FORM SPACING ------------------ */

  #business_details .form-group label,
  #business_details .form-group input {
    display: block;
    margin-bottom: 0.5rem;
  }

  #business_details .form-group input {
    width: 280px;
    padding: 0.5rem;
  }

  #business_details .form-group {
    margin-bottom: 1.2rem;
  }

  /* ------------------ USERS TAB FORM SPACING ------------------ */

  #users .form-group label,
  #users .form-group input,
  #users .form-group select {
    display: block;
    margin-bottom: 0.5rem;
  }

  #users .form-group input,
  #users .form-group select {
    width: 280px;
    padding: 0.5rem;
  }

  #users .form-group {
    margin-bottom: 1.2rem;
  }

  .receive-icon.disabled {
  opacity: 0.4;
  pointer-events: none;
  cursor: not-allowed;
}
/* ------------------ TOP TAB NAV ------------------ */
.tab-nav {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 0.8rem;
  margin: 1.5rem 0 2rem 0;
}

.tab-nav a {
  display: inline-block;
  padding: 0.6rem 1.2rem;
  background-color: #007bff;
  color: white;
  text-decoration: none;
  border-radius: 8px;
  font-weight: bold;
  transition: background-color 0.2s;
}

.tab-nav a:hover {
  background-color: #005fa3;
}


üìÑ frontend/static/js/maintenance.js
------------------------------------------------------------
// File: /frontend/static/js/maintenance.js

import { initMaintenanceScreen } from './maintenance_screen/index.js';

document.addEventListener("DOMContentLoaded", () => {
  initMaintenanceScreen();
});


üìÑ frontend/templates/maintenance.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Maintenance - Universal Recycling</title>
  <link rel="stylesheet" href="/static/css/style.css" />
</head>
<body>

  {% include "_tab_nav.html" %}

  <h2>Maintenance</h2>

  <div class="tabs">
    <div class="tab active" data-tab="users">Users</div>
    <div class="tab" data-tab="requesters">Requesters</div>
    <div class="tab" data-tab="items">Items</div>
    <div class="tab" data-tab="suppliers">Suppliers</div>
    <div class="tab" data-tab="projects">Projects</div>
    <div class="tab" data-tab="requisitioners">Requisitioners</div>
    <div class="tab" data-tab="settings">Settings</div>
    <div class="tab" data-tab="business_details">Business Details</div>
  </div>

  <!-- Users -->
  <div id="users" class="tab-content active">
    <form class="form-group" onsubmit="event.preventDefault();">
      <input type="hidden" id="user-id" />
      <label for="user-username">Username:</label>
      <input type="text" id="user-username" autocomplete="username" />
      <label for="user-password">Password:</label>
      <input type="password" id="user-password" autocomplete="current-password" />
      <label for="user-rights">Rights:</label>
      <select id="user-rights">
        <option value="edit">Edit</option>
        <option value="view">View Only</option>
        <option value="admin">Admin</option>
      </select>
      <label for="user-auth-threshold-band">Authorization Threshold Band:</label>
      <select id="user-auth-threshold-band">
        <option value="">Not Set</option>
        <option value="1">Band 1</option>
        <option value="2">Band 2</option>
        <option value="3">Band 3</option>
        <option value="4">Band 4</option>
      </select>
      <button type="submit">Add User</button>
      <button type="button" id="cancel-user-edit" style="display: none;">Cancel</button>
    </form>
    <table>
      <thead><tr><th>Username</th><th>Rights</th><th>Threshold Band</th><th>Actions</th></tr></thead>
      <tbody id="users-table"></tbody>
    </table>
  </div>

  <!-- Requesters -->
  <div id="requesters" class="tab-content">
    <div class="form-group">
      <label for="requester-name">Name:</label>
      <input type="text" id="requester-name" />
      <button id="add-requester-button">Add Requester</button>
    </div>
    <table>
      <thead><tr><th>Name</th><th>Actions</th></tr></thead>
      <tbody id="requesters-table"></tbody>
    </table>
  </div>

  <!-- Items -->
  <div id="items" class="tab-content">
    <div class="form-group">
      <label for="item-code">Item Code:</label>
      <input type="text" id="item-code" />
      <label for="item-description">Description:</label>
      <input type="text" id="item-description" />
      <button id="add-item-button">Add Item</button>
    </div>
    <div class="form-group">
      <hr style="margin-top: 1.5rem; margin-bottom: 1rem;" />
      <label for="items-csv-upload">Import Items CSV:</label>
      <input type="file" id="items-csv-upload" accept=".csv" />
      <button id="import-items-button">Import CSV</button>
    </div>
    <table>
      <thead><tr><th>Item Code</th><th>Description</th><th>Actions</th></tr></thead>
      <tbody id="items-table"></tbody>
    </table>
  </div>

  <!-- Suppliers -->
  <div id="suppliers" class="tab-content">
    <div class="form-group">
      <h4>Add/Edit Supplier</h4>
      <form id="supplier-form" onsubmit="event.preventDefault();">
        <input type="hidden" id="supplier-id" />
        <label for="supplier-name">Supplier Name:</label>
        <input type="text" id="supplier-name" required />
        <button type="submit">Add Supplier</button>
        <button type="button" id="cancel-supplier-edit" style="display: none;">Cancel</button>
      </form>
    </div>
    <div class="form-group">
      <hr style="margin-top: 1.5rem; margin-bottom: 1rem;" />
      <label for="suppliers-csv-upload">Import Suppliers CSV:</label>
      <input type="file" id="suppliers-csv-upload" accept=".csv" />
      <button id="import-suppliers-button">Import CSV</button>
    </div>
    <table>
      <thead><tr><th>Supplier Name</th><th>Actions</th></tr></thead>
      <tbody id="suppliers-table"></tbody>
    </table>
  </div>

  <!-- Projects -->
  <div id="projects" class="tab-content">
    <div class="form-group">
      <label for="project-code">Project Code:</label>
      <input type="text" id="project-code" />
      <label for="project-name">Project Name:</label>
      <input type="text" id="project-name" />
      <button id="add-project-button">Add Project</button>
    </div>
    <div class="form-group">
      <hr style="margin-top: 1.5rem; margin-bottom: 1rem;" />
      <label for="projects-csv-upload">Import Projects CSV:</label>
      <input type="file" id="projects-csv-upload" accept=".csv" />
      <button id="import-projects-button">Import CSV</button>
    </div>
    <table>
      <thead><tr><th>Project Code</th><th>Project Name</th><th>Actions</th></tr></thead>
      <tbody id="projects-table"></tbody>
    </table>
  </div>

  <!-- Requisitioners -->
<div id="requisitioners" class="tab-content">
  <div class="form-group">
    <label for="requisitioner-name">Name:</label>
    <input type="text" id="requisitioner-name" />
    <button id="add-requisitioner-button">Add Requisitioner</button>
  </div>
  <table>
    <thead><tr><th>Name</th><th>Actions</th></tr></thead>
    <tbody id="requisitioners-table"></tbody>
  </table>
</div>

  <!-- Settings -->
  <div id="settings" class="tab-content">
    <div class="form-group">
      <label for="order-number-start">Start Order Number:</label>
      <input type="text" id="order-number-start" />
      <label for="requisition-number-start">Start Requisition Number:</label>
      <input type="text" id="requisition-number-start" placeholder="e.g. REQ1000" />
      <label for="auth-threshold-1">Authorization Threshold 1 (R):</label>
      <input type="number" id="auth-threshold-1" step="0.01" />
      <label for="auth-threshold-2">Authorization Threshold 2 (R):</label>
      <input type="number" id="auth-threshold-2" step="0.01" />
      <label for="auth-threshold-3">Authorization Threshold 3 (R):</label>
      <input type="number" id="auth-threshold-3" step="0.01" />
      <label for="auth-threshold-4">Authorization Threshold 4 (R):</label>
      <input type="number" id="auth-threshold-4" step="0.01" />
      <button id="update-settings-button">Update</button>
    </div>
  </div>

  <!-- Business Details -->
  <div id="business_details" class="tab-content">
    <div class="form-group">
      <label for="company-name">Company Name:</label>
      <input type="text" id="company-name" />
      <label for="address-line1">Address Line 1:</label>
      <input type="text" id="address-line1" />
      <label for="address-line2">Address Line 2:</label>
      <input type="text" id="address-line2" />
      <label for="city">City:</label>
      <input type="text" id="city" />
      <label for="province">Province:</label>
      <input type="text" id="province" />
      <label for="postal-code">Postal Code:</label>
      <input type="text" id="postal-code" />
      <label for="telephone">Telephone:</label>
      <input type="text" id="telephone" />
      <label for="vat-number">VAT Number:</label>
      <input type="text" id="vat-number" />
      <button id="update-business-details-button">Update</button>
    </div>
  </div>

  <script type="module" src="/static/js/maintenance.js"></script>
</body>
</html>


üìÑ frontend/static/js/authorisations_per_user.js
------------------------------------------------------------
// File: frontend/static/js/authorisations_per_user.js

import { loadRequesters, loadSuppliers } from "./components/shared_filters.js";

export async function setupAuthorisationUI({
  user,
  mountPointId,
  showPDF,
  onAuthorised = () => {},
  onError = () => {}
}) {
  console.log("üîê My Authorisations screen (desktop) loaded");

  const tableBody = document.getElementById(mountPointId);
  if (!tableBody) {
    console.error(`‚ùå Mount point '${mountPointId}' not found.`);
    return;
  }

  await loadRequesters("filter-requester");
  await loadSuppliers("filter-supplier");

  await loadOrdersForUser(user);

  async function loadOrdersForUser(user) {
    tableBody.innerHTML = "<tr><td colspan='7'>Loading orders...</td></tr>";

    try {
      const res = await fetch("/orders/api/awaiting_authorisation");
      const orders = await res.json();

      const userBand = parseInt(user.auth_threshold_band);
      const eligibleOrders = orders.filter(
        order => parseInt(order.required_auth_band) === userBand
      );

      if (eligibleOrders.length === 0) {
        tableBody.innerHTML = "<tr><td colspan='7'>‚úÖ No orders awaiting your authorisation.</td></tr>";
        return;
      }

      tableBody.innerHTML = "";

      for (const order of eligibleOrders) {
        const row = document.createElement("tr");
        const created = new Date(order.created_date);
        const formattedDate = `${created.getDate()} ${created.toLocaleString("default", {
          month: "short"
        })} ${created.getFullYear()}`;

        row.innerHTML = `
          <td>${formattedDate}</td>
          <td>${order.order_number}</td>
          <td>${order.requester_name}</td>
          <td>${order.supplier_name}</td>
          <td>R${order.total}</td>
          <td>${order.status}</td>
          <td>
            <button class="view-btn">View</button>
            <button class="auth-btn">Authorise</button>
          </td>
        `;

        row.querySelector(".view-btn").addEventListener("click", () => {
          try {
            showPDF(order.id);  // ‚úÖ delegate to external handler
          } catch (err) {
            console.error("‚ùå Error triggering PDF display:", err);
            onError("‚ùå Could not open PDF preview.");
          }
        });

        row.querySelector(".auth-btn").addEventListener("click", async () => {
          try {
            const res = await fetch(`/orders/api/authorise_order/${order.id}`, { method: "POST" });
            const result = await res.json();

            if (result.message === "Order authorised") {
              console.log(`‚úÖ Authorised order ${order.order_number}`);
              onAuthorised(order);
              row.remove();
            } else {
              onError("‚ùå Failed to authorise: " + result.message);
            }
          } catch (err) {
            console.error("‚ùå Error during authorisation:", err);
            onError("‚ùå Network or server error while authorising.");
          }
        });

        tableBody.appendChild(row);
      }
    } catch (err) {
      console.error("‚ùå Could not load orders:", err);
      tableBody.innerHTML = "<tr><td colspan='7'>‚ùå Error loading orders.</td></tr>";
    }
  }
}


üìÑ frontend/static/js/new_requisitions_pdf_generator.py
------------------------------------------------------------
from pathlib import Path
import sqlite3
from datetime import datetime
from weasyprint import HTML

DB_PATH = Path("data/orders.db")
OUTPUT_DIR = Path("generated_pdfs")
OUTPUT_DIR.mkdir(exist_ok=True)

def generate_requisition_pdf(requisition_id: int) -> Path:
    # --- Step 1: Get data from DB ---
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    cursor.execute("""
        SELECT r.requisition_number, r.requisition_note, r.requisition_date, rq.name AS requisitioner
        FROM requisitions r
        LEFT JOIN requisitioners rq ON r.requisitioner_id = rq.id
        WHERE r.id = ?
    """, (requisition_id,))
    header = cursor.fetchone()

    if not header:
        raise ValueError("Requisition not found")

    cursor.execute("""
        SELECT description, project, quantity
        FROM requisition_items
        WHERE requisition_id = ?
    """, (requisition_id,))
    items = cursor.fetchall()
    conn.close()

    # --- Step 2: Build HTML ---
    html = f"""
    <html>
    <head>
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 2rem;
            }}
            h2 {{
                color: #2a2a2a;
            }}
            table {{
                width: 100%;
                border-collapse: collapse;
                margin-top: 1rem;
            }}
            th, td {{
                border: 1px solid #ccc;
                padding: 8px;
                text-align: left;
            }}
            th {{
                background-color: #f2f2f2;
            }}
        </style>
    </head>
    <body>
        <h2>üì¶ Requisition PDF</h2>
        <p><strong>Requisition Number:</strong> {header['requisition_number']}</p>
        <p><strong>Requisitioner:</strong> {header['requisitioner']}</p>
        <p><strong>Date:</strong> {datetime.fromisoformat(header['requisition_date']).strftime("%d %b %Y")}</p>
        <p><strong>Note:</strong> {header['requisition_note'] or "‚Äî"}</p>

        <table>
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Project</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody>
    """

    for item in items:
        html += f"""
        <tr>
            <td>{item['description']}</td>
            <td>{item['project']}</td>
            <td>{item['quantity']}</td>
        </tr>
        """

    html += """
            </tbody>
        </table>
        <p style="margin-top: 2rem; font-size: 0.9rem;">Generated by Universal Recycling system</p>
    </body>
    </html>
    """

    # --- Step 3: Generate PDF ---
    pdf_path = OUTPUT_DIR / f"requisition_{requisition_id}.pdf"
    HTML(string=html).write_pdf(str(pdf_path))

    return pdf_path


üìÑ frontend/static/js/components/requisitions_attachment_modal.js
------------------------------------------------------------
export function showViewAttachmentsModal(requisitionId, requisitionNumber, onUploadComplete = null) {
  const fetchUrl = `/requisitions/attachments/${requisitionId}`;

  fetch(fetchUrl)
    .then(res => res.json())
    .then(data => {
      const files = data.attachments || [];
      const modal = createBaseModal();
      const title = document.createElement("h3");
      title.textContent = `Attachments for ${requisitionNumber}`;
      modal.inner.appendChild(title);

      if (files.length > 0) {
        const list = document.createElement("ul");
        list.style.listStyle = "none";
        list.style.padding = "0";

        files.forEach(f => {
          const li = document.createElement("li");
          const link = document.createElement("a");
          link.href = "#";
          link.textContent = f.filename;
          link.style.display = "block";
          link.style.marginBottom = "0.5rem";
          link.style.color = "green";
          link.style.textDecoration = "underline";
          link.style.cursor = "pointer";

          link.onclick = async (e) => {
            e.preventDefault();
            try {
              window.currentOrderNumberForPDF = `${requisitionNumber}_${f.filename}`;
              const res = await fetch(`/${f.file_path}`);
              if (!res.ok) throw new Error(`HTTP ${res.status}`);
              const blob = await res.blob();
              const module = await import('./pdf_modal.js');
              module.showPDFModal(blob);
            } catch (err) {
              alert("‚ùå Failed to preview PDF");
              console.error("PDF preview failed:", err);
            }
          };

          li.appendChild(link);
          list.appendChild(li);
        });

        modal.inner.appendChild(list);
      }

      const dropzone = document.createElement("div");
      dropzone.textContent = "Drag and drop files here or click to select";
      dropzone.style.border = "2px dashed #aaa";
      dropzone.style.padding = "2rem";
      dropzone.style.textAlign = "center";
      dropzone.style.cursor = "pointer";
      dropzone.style.marginTop = "1rem";
      dropzone.style.background = "#fafafa";

      dropzone.onclick = () => {
        const input = document.createElement("input");
        input.type = "file";
        input.multiple = true;
        input.onchange = () => handleFiles(input.files, requisitionId, requisitionNumber, modal.inner, onUploadComplete);
        input.click();
      };

      dropzone.ondragover = e => {
        e.preventDefault();
        dropzone.style.background = "#eee";
      };
      dropzone.ondragleave = () => {
        dropzone.style.background = "#fafafa";
      };
      dropzone.ondrop = e => {
        e.preventDefault();
        dropzone.style.background = "#fafafa";
        handleFiles(e.dataTransfer.files, requisitionId, requisitionNumber, modal.inner, onUploadComplete);
      };

      modal.inner.appendChild(dropzone);

      const closeBtn = document.createElement("button");
      closeBtn.textContent = "Close";
      closeBtn.style.marginTop = "1.5rem";
      closeBtn.style.padding = "0.5rem 1rem";
      closeBtn.style.border = "none";
      closeBtn.style.cursor = "pointer";
      closeBtn.style.background = "#ccc";
      closeBtn.onclick = () => document.body.removeChild(modal.container);

      modal.inner.appendChild(closeBtn);
      document.body.appendChild(modal.container);
    })
    .catch(err => {
      alert("‚ùå Failed to load attachments");
      console.error(err);
    });
}

export function showUploadAttachmentsModal(requisitionId, requisitionNumber, onUploadComplete = null) {
  showViewAttachmentsModal(requisitionId, requisitionNumber, onUploadComplete);
}

export async function checkAttachments(requisitionId) {
  const url = `/requisitions/attachments/${requisitionId}`;
  try {
    const res = await fetch(url);
    const data = await res.json();
    return Array.isArray(data.attachments) && data.attachments.length > 0;
  } catch (err) {
    console.error("Failed to check attachments:", err);
    return false;
  }
}

function handleFiles(fileList, requisitionId, requisitionNumber, modalInner, onUploadComplete = null) {
  Array.from(fileList).forEach(file => {
    const formData = new FormData();
    formData.append("file", file);

    if (requisitionId !== null && requisitionId !== undefined) {
      formData.append("requisition_id", requisitionId);
    } else if (requisitionNumber) {
      formData.append("requisition_number", requisitionNumber);
    }

    fetch("/requisitions/upload_attachment", {
      method: "POST",
      body: formData,
    })
      .then(res => res.json())
      .then(data => {
        const msg = document.createElement("p");
        msg.textContent = data.message;
        msg.style.color = "green";
        modalInner.appendChild(msg);
        if (onUploadComplete) onUploadComplete();
      })
      .catch(err => {
        const msg = document.createElement("p");
        msg.textContent = `‚ùå Failed to upload: ${file.name}`;
        msg.style.color = "red";
        modalInner.appendChild(msg);
        console.error(err);
      });
  });
}

function createBaseModal() {
  const container = document.createElement("div");
  container.style.position = "fixed";
  container.style.top = "0";
  container.style.left = "0";
  container.style.width = "100vw";
  container.style.height = "100vh";
  container.style.backgroundColor = "rgba(0,0,0,0.5)";
  container.style.display = "flex";
  container.style.alignItems = "center";
  container.style.justifyContent = "center";
  container.style.zIndex = "9999";

  const inner = document.createElement("div");
  inner.style.backgroundColor = "white";
  inner.style.padding = "1.5rem";
  inner.style.borderRadius = "8px";
  inner.style.width = "90%";
  inner.style.maxWidth = "500px";
  inner.style.maxHeight = "80vh";
  inner.style.overflowY = "auto";
  inner.style.fontFamily = "Arial, sans-serif";
  inner.style.position = "relative";

  const close = document.createElement("button");
  close.textContent = "‚úñ";
  close.style.position = "absolute";
  close.style.top = "10px";
  close.style.right = "10px";
  close.style.background = "none";
  close.style.border = "none";
  close.style.fontSize = "1.2rem";
  close.style.cursor = "pointer";
  close.onclick = () => document.body.removeChild(container);

  inner.appendChild(close);
  container.appendChild(inner);

  return { container, inner };
}


üìÑ frontend/templates/_tab_nav.html
------------------------------------------------------------
<div class="tab-nav">
  <a href="/home">Home</a>
  <a href="/requisitions/new">New Requisition</a>
  <a href="/orders/new">New Order</a>
  <a href="/orders/pending_orders">Pending Orders</a>
  <a href="/orders/received_orders">Received Orders</a>
  <a href="/orders/partially_delivered">Partially Delivered Orders</a>
  <a href="/orders/audit_trail">Audit Trail</a>
  <a href="/mobile/authorisations">My Authorisations</a>
  <a href="/requisitions/pending_requisitions">Pending Requisitions</a>
  <a href="/orders/cod_orders">COD Orders</a>
  <a href="/maintenance">Maintenance</a>
  <a href="/logout">Logout</a>
  
</div>


üì¶ DATABASE SCHEMA: data/orders.db
============================================================

üî∏ Table: requesters
  id (INTEGER)
  name (TEXT)

üî∏ Table: sqlite_sequence
  name ()
  seq ()

üî∏ Table: suppliers
  id (INTEGER)
  account_number (TEXT)
  name (TEXT)
  telephone (TEXT)
  vat_number (TEXT)
  registration_number (TEXT)
  email (TEXT)
  contact_name (TEXT)
  contact_telephone (TEXT)
  address_line1 (TEXT)
  address_line2 (TEXT)
  address_line3 (TEXT)
  postal_code (TEXT)

üî∏ Table: orders
  id (INTEGER)
  order_number (TEXT)
  status (TEXT)
  created_date (TEXT)
  received_date (TEXT)
  total (REAL)
  order_note (TEXT)
  note_to_supplier (TEXT)
  supplier_id (INTEGER)
  requester_id (INTEGER)
  required_auth_band (INTEGER)
  payment_terms (TEXT)
  payment_date (TEXT)
  amount_paid (REAL)

üî∏ Table: order_items
  id (INTEGER)
  order_id (INTEGER)
  item_code (TEXT)
  item_description (TEXT)
  project (TEXT)
  qty_ordered (REAL)
  qty_received (REAL)
  received_date (TEXT)
  price (REAL)
  total (REAL)

üî∏ Table: attachments
  id (INTEGER)
  order_id (INTEGER)
  filename (TEXT)
  file_path (TEXT)
  upload_date (TEXT)
  requisition_id (INTEGER)
  requisition_number (TEXT)

üî∏ Table: audit_trail
  id (INTEGER)
  order_id (INTEGER)
  action (TEXT)
  details (TEXT)
  action_date (TEXT)
  user_id (INTEGER)
  timestamp (TEXT)

üî∏ Table: projects
  id (INTEGER)
  project_code (TEXT)
  project_name (TEXT)

üî∏ Table: items
  id (INTEGER)
  item_code (TEXT)
  item_description (TEXT)

üî∏ Table: business_details
  id (INTEGER)
  company_name (TEXT)
  address_line1 (TEXT)
  address_line2 (TEXT)
  city (TEXT)
  province (TEXT)
  postal_code (TEXT)
  telephone (TEXT)
  vat_number (TEXT)

üî∏ Table: received_item_logs
  id (INTEGER)
  order_item_id (INTEGER)
  qty_received (REAL)
  received_by_user_id (INTEGER)
  received_date (TEXT)

üî∏ Table: settings
  id (INTEGER)
  order_number_start (TEXT)
  auth_threshold_1 (INTEGER)
  auth_threshold_2 (INTEGER)
  auth_threshold_3 (INTEGER)
  auth_threshold_4 (INTEGER)
  requisition_number_start (TEXT)

üî∏ Table: users
  id (INTEGER)
  username (TEXT)
  password_hash (TEXT)
  rights (TEXT)
  auth_threshold_band (INTEGER)
  roles (TEXT)

üî∏ Table: requisitions
  id (INTEGER)
  requisition_number (TEXT)
  requisitioner_id (INTEGER)
  requisition_date (TEXT)
  requisition_note (TEXT)
  status (TEXT)
  converted_order_id (INTEGER)

üî∏ Table: requisitioners
  id (INTEGER)
  name (TEXT)

üî∏ Table: requisition_attachments
  id (INTEGER)
  requisition_id (INTEGER)
  filename (TEXT)
  file_path (TEXT)
  upload_date (TEXT)

üî∏ Table: requisition_items
  id (INTEGER)
  requisition_id (INTEGER)
  description (TEXT)
  quantity (REAL)

üå≤ PROJECT TREE (depth=5)
============================================================
.
‚îú‚îÄ‚îÄ backend
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __pycache__
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ database.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ main.cpython-313.pyc
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ database.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ endpoints
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __pycache__
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ admin.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ auth.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ html_routes.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ new_order_pdf_generator.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_attachments.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_email.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_notes.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_queries.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_receiving.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ orders.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pending_order_pdf_generator.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requisition_attachments.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requisitions.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ utils.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ admin.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ auth.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ html_routes.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ lookups
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __pycache__
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ business_details.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ items.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mark_cod_paid_api.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ projects.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requesters.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requisitioners.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ settings.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ suppliers.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ users.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ business_details.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ items.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mark_cod_paid_api.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ projects.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requesters.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requisitioners.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ settings.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ suppliers.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ users.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mobile
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __pycache__
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mobile_auth.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ mobile_awaiting_authorisation.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mobile_auth.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ mobile_awaiting_authorisation.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ new_order_pdf_generator.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_attachments.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_email.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_notes.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_queries.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_receiving.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ orders.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pending_order_pdf_generator.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requisition_attachments.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requisitions.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ users.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ utils.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ whatsapp.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ scrapers
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ twilio
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ twilio_utils.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ utils
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __pycache__
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __init__.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ db_utils.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_utils.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ send_email.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ db_utils.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_utils.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ permissions_utils.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ send_email.py
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ utils.py
‚îú‚îÄ‚îÄ bootstrap_admin_user.py
‚îú‚îÄ‚îÄ cookies.txt
‚îú‚îÄ‚îÄ data
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ orders_backup_20250509_081210.db
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ orders_backup_20250509_081218.db
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ orders_backup_before_clear_dynamic_20250526_073429.db
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ orders_backup_before_reset_20250519_105625.db
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ orders_backup_before_reset_20250521_062017.db
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ orders_backup_before_reset_20250525_103031.db
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ orders.db
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pdfs
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_URC1200.pdf
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_URC1201.pdf
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ order_URC1203.pdf
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ printouts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_1.txt
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_3.txt
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ order_7.txt
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ test_orders.db
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ uploads
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 101_2025-05-07_11-05.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 101_Screenshot_2025-05-07_at_13.34.24.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 13_Screenshot_2025-04-23_at_05.19.18.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 14_Screenshot_2025-04-23_at_05.19.18.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 153_Intimisso.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 155_Investment_Made_-_12_May_2025.jpg
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 17_Intimisso.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 18_Hydehurst RC- Proof of submission.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 19_Fidessa Consulting.PDF
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20_test_invoice.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250530141159_Intimisso.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250530150935_Intimisso.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531111129_Screenshot 2025-05-31 at 07.25.57.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531111608_Screenshot 2025-05-31 at 07.25.57.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531111656_Screenshot 2025-05-31 at 07.25.57.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531111720_Screenshot 2025-05-31 at 07.25.57.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531111949_Screenshot 2025-05-31 at 07.25.57.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531112017_Screenshot 2025-05-31 at 07.25.57.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531112627_Screenshot 2025-05-31 at 07.25.57.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531113406_Screenshot 2025-05-31 at 07.25.57.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531114549_Screenshot 2025-05-31 at 07.25.57.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531114726_Screenshot 2025-05-31 at 07.25.57.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531121244_Screenshot 2025-05-31 at 07.25.57.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531121316_Screenshot 2025-05-31 at 12.09.01.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 20250531121421_Screenshot 2025-05-31 at 07.25.57.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 205_Intimisso.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 206_Screenshot_2025-05-31_at_10.53.46.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 21_Fidessa Consulting.PDF
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 21_test_invoice.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 22_Hydehurst RC- Proof of submission.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 24_Fidessa Consulting.PDF
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 25_Screenshot 2025-04-20 at 17.12.14.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 26_Intimisso.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 27_test_invoice.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 28_Deposit - 2.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 28_test_invoice.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 30_2025-04-22_18-29.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 30_2025-04-22_18-44_1.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 30_2025-04-22_18-44.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 30_Intimisso.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 31_Screenshot_2025-04-23_at_05.19.18.png
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 42_Intimisso.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 43_Intimisso.pdf
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 44_order_URC1201.pdf
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ test_invoice.pdf
‚îú‚îÄ‚îÄ frontend
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ static
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ audio
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Alert.wav
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ css
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ style.css
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ images
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ universal_logo.jpg
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __pycache__
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ new_requisitions_pdf_generator.cpython-313.pyc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ audit_trail.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ authorisations_per_user.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ cod_orders.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ attachment_modal.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ expand_line_items.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mobile_pdf_modal.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_note_modal.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ payments_modal.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pdf_modal.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ receive_modal.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requisitions_attachment_modal.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ shared_filters.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ utils.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ login.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ maintenance_screen
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ business_details.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ items.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ projects.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requesters.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ requisitioners.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ settings.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ suppliers.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ users.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ maintenance.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ new_order_main.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ new_order_modals.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ new_order_screen
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pdf_utils.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ submit_utils.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ new_requisition_main.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ new_requisitions_pdf_generator.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ partially_delivered.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pending_orders.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pending_requisitions.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ received_orders.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ send_email.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ mobile
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ css
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ mobile_authorisations.css
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ js
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ authorisations_screen
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ manifest.json
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ service-worker.js
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ templates
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ _tab_nav.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ access_denied.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ audit_trail.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ authorisations_per_user.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ base.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ cod_orders.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ home.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ login.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ maintenance.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ mobile
‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ mobile_authorisations.html
‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ mobile_login.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ new_order.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ new_requisition.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ partially_delivered.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ pdf_template.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ pending_orders.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ pending_requisitions.html
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ print_template.html
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ received_orders.html
‚îú‚îÄ‚îÄ generated_pdfs
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ requisition_1.pdf
‚îú‚îÄ‚îÄ logs
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ client.log
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ cod_payments.log
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ db_activity_log.txt
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ new_orders_log.txt
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ order_receiving_log.txt
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ route_audit.log
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ server.log
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ scripts
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ __pycache__
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ add_debug_validation_handler.cpython-313.pyc
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ add_debug_validation_handler.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ database_scripts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ clear_all_database_tables.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ clear_dynamic_database_tables.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ print_all_data.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ push_database_to_vm.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ seed_static_data.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dump_scripts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ individual_screens
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ output_all_mobile_scripts.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ output_all_pdf_scripts.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ output_all_receiving_scripts.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ output_audit_trail_screen_files.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ output_authorisations_per_user.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ output_cod_screen.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ output_login_screen_files.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ output_maintenance_screen_files.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ output_new_order_screen.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ output_requisitions_screen.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ tree_dependencies_database.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ mother_output_all_files_code_to_text.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ git_scripts
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ google_vm_pull_and_start.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ google_vm_push_and_leave.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pull_and_start.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pull_database_from_google_vm.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ push_and_leave.py
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ push_database_to_vm.py
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ start_server.py
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ stop_server.py
‚îú‚îÄ‚îÄ scripts_for_each_screen
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ output_requisitions_screen.txt
‚îú‚îÄ‚îÄ setup_env.py
‚îî‚îÄ‚îÄ venv
    ‚îú‚îÄ‚îÄ bin
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ activate
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ activate.csh
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ activate.fish
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Activate.ps1
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dotenv
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ fastapi
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ fonttools
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ normalizer
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pip
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pip3
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pip3.13
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pyftmerge
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pyftsubset
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ python -> python3.13
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ python3 -> python3.13
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ python3.13 -> /opt/homebrew/opt/python@3.13/bin/python3.13
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ttx
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ uvicorn
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ weasyprint
    ‚îú‚îÄ‚îÄ include
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ python3.13
    ‚îú‚îÄ‚îÄ lib
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ python3.13
    ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ site-packages
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ __pycache__
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ _brotli.cpython-313-darwin.so
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ _cffi_backend.cpython-313-darwin.so
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ aiohappyeyeballs
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ aiohappyeyeballs-2.6.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ aiohttp
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ aiohttp_retry
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ aiohttp_retry-2.9.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ aiohttp-3.11.18.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ aiosignal
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ aiosignal-1.3.2.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ annotated_types
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ annotated_types-0.7.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ anyio
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ anyio-4.9.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ attr
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ attrs
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ attrs-25.3.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ bcrypt
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ bcrypt-4.3.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ Brotli-1.1.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ brotli.py
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ certifi
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ certifi-2025.4.26.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ cffi
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ cffi-1.17.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ charset_normalizer
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ charset_normalizer-3.4.2.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ click
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ click-8.2.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ cssselect2
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ cssselect2-0.8.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ dotenv
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ fastapi
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ fastapi-0.115.12.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ fontTools
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ fonttools-4.58.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ frozenlist
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ frozenlist-1.6.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ h11
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ h11-0.16.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ idna
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ idna-3.10.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ itsdangerous
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ itsdangerous-2.2.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ jinja2
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ jinja2-3.1.6.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ jwt
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ markupsafe
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ MarkupSafe-3.0.2.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ multidict
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ multidict-6.4.4.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ multipart
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ PIL
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pillow-11.2.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pip
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pip-25.1.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ propcache
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ propcache-0.3.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pycparser
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pycparser-2.22.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pydantic
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pydantic_core
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pydantic_core-2.33.2.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pydantic-2.11.5.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pydyf
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pydyf-0.11.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ PyJWT-2.10.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pyphen
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ pyphen-0.17.2.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ python_dotenv-1.1.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ python_multipart
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ python_multipart-0.0.20.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ requests
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ requests-2.32.3.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ sniffio
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ sniffio-1.3.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ starlette
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ starlette-0.46.2.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ tinycss2
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ tinycss2-1.4.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ tinyhtml5
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ tinyhtml5-2.0.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ twilio
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ twilio-9.6.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ typing_extensions-4.13.2.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ typing_extensions.py
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ typing_inspection
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ typing_inspection-0.4.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ urllib3
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ urllib3-2.4.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ uvicorn
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ uvicorn-0.34.2.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ weasyprint
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ weasyprint-65.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ webencodings
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ webencodings-0.5.1.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ yarl
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ yarl-1.20.0.dist-info
    ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ zopfli
    ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ zopfli-0.2.3.post1.dist-info
    ‚îú‚îÄ‚îÄ pyvenv.cfg
    ‚îî‚îÄ‚îÄ share
        ‚îî‚îÄ‚îÄ man
            ‚îî‚îÄ‚îÄ man1
                ‚îî‚îÄ‚îÄ ttx.1

149 directories, 258 files
