📄 frontend/static/css/style.css
------------------------------------------------------------
body {
  font-family: Arial, sans-serif;
  margin: 2rem;
  background-color: #f4f6f8;
}

h2 {
  margin-bottom: 1.5rem;
  font-size: 1.8rem;
  color: #1a3c5e;
}

/* ------------------ TABLE ------------------ */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 1rem;
  background-color: #fff;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  overflow: hidden;
}

th {
  background-color: #e8eef4;
  font-weight: 600;
  color: #1a3c5e;
  text-transform: none;
  font-size: 0.95rem;
  height: 48px;
}

td {
  border: 1px solid #e0e4e8;
  padding: 0.75rem;
  text-align: center;
  font-size: 0.95rem;
  color: #333;
}

/* Add spacing between buttons in table cells */
td button {
  margin-right: 0.5rem;
}

td button:last-child {
  margin-right: 0;
}

/* Left-align all cells in maintenance screen tables */
#users-table td,
#requesters-table td,
#items-table td,
#suppliers-table td,
#projects-table td {
  text-align: left;
}

/* ------------------ FILTERS ------------------ */
.filters {
  margin-bottom: 1.5rem;
  display: flex;
  flex-wrap: wrap;
  gap: 1.5rem;
  align-items: center;
  background-color: #fff;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.filters label {
  font-weight: 600;
  color: #1a3c5e;
  margin-right: 0.5rem;
  font-size: 0.95rem;
}

input[type="date"],
input[type="text"],
input[type="number"],
select,
textarea {
  padding: 0.6rem;
  font-size: 0.95rem;
  font-family: Arial, sans-serif;
  border: 1px solid #c7d0d9;
  border-radius: 6px;
  background-color: #fff;
  min-width: 180px;
  max-width: 240px;
  transition: border-color 0.2s;
}

input[type="date"]:focus,
select:focus,
input[type="text"]:focus,
textarea:focus {
  outline: none;
  border-color: #0066cc;
  box-shadow: 0 0 0 2px rgba(0, 102, 204, 0.2);
}

/* ------------------ BUTTONS ------------------ */
button {
  padding: 0.6rem 1.5rem;
  cursor: pointer;
  background-color: #0066cc;
  color: #fff;
  border: none;
  border-radius: 6px;
  font-size: 0.95rem;
  font-weight: 500;
  transition: background-color 0.2s;
}

button:hover {
  background-color: #0055aa;
}

/* ------------------ ICONS ------------------ */
.expand-icon,
.clip-icon,
.eye-icon,
.note-icon,
.supplier-note-icon,
.receive-icon,
.pdf-icon {
  cursor: pointer;
  font-size: 1.2rem;
  margin: 0 0.4rem;
  display: inline-block;
  color: #0066cc;
  transition: color 0.2s;
}

.expand-icon:hover,
.clip-icon:hover,
.eye-icon:hover,
.note-icon:hover,
.supplier-note-icon:hover,
.receive-icon:hover {
  color: #003366;
}

.eye-icon.disabled {
  opacity: 0.3;
  cursor: default;
}

/* ------------------ LOGIN ------------------ */
.login-box {
  background: white;
  padding: 2rem 3rem;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 400px;
  text-align: center;
  margin: 5rem auto;
}

.login-box h2 {
  margin-bottom: 1.5rem;
  font-size: 1.5rem;
  color: #333;
}

.login-box input {
  width: 100%;
  padding: 0.8rem;
  margin-bottom: 1.2rem;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 1rem;
}

.login-box button {
  width: 100%;
  padding: 0.8rem;
  background-color: #0056b3;
  border: none;
  color: white;
  font-size: 1rem;
  border-radius: 5px;
  cursor: pointer;
}

.login-box button:hover {
  background-color: #004a99;
}

#login-error {
  margin-top: 0.5rem;
  color: red;
  font-size: 0.9rem;
}

/* ------------------ MAINTENANCE ------------------ */
.tabs {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
}

.tab {
  padding: 0.5rem 1rem;
  cursor: pointer;
  background: #ddd;
  border-radius: 4px 4px 0 0;
}

.tab.active {
  background: #007BFF;
  color: white;
}

.tab-content {
  display: none;
  padding: 1rem;
  border: 1px solid #ccc;
  border-radius: 0 4px 4px 4px;
  background-color: white;
}

.tab-content.active {
  display: block;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  font-weight: bold;
}

/* ------------------ NEW ORDER SCREEN ONLY ------------------ */
.order-header {
  margin-bottom: 2rem;
}

.order-header label span {
  font-weight: bold;
  font-size: 1.05rem;
  margin-left: 0.5rem;
}

.form-row {
  display: flex;
  flex-wrap: wrap;
  gap: 2rem;
  margin-bottom: 2rem;
}

.column {
  flex: 1 1 240px;
  display: flex;
  flex-direction: column;
}

#note_to_supplier {
  min-height: 100px;
}

.delivery-block {
  margin-top: 2.5rem;
  margin-bottom: 2.5rem;
}

.add-item-block {
  margin-top: 2rem;
  margin-bottom: 2rem;
}

.summary {
  margin-bottom: 2rem;
}

.button-group {
  margin-top: 2rem;
}

/* Reusable table styling for modals */
.receive-modal table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 1rem;
  font-size: 14px;
}

.receive-modal th,
.receive-modal td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: left;
}

.receive-modal input[type="number"] {
  width: 80px;
}
i:hover {
  cursor: pointer;
}
.note-icon:hover,
.clip-icon:hover,
.expand-icon:hover,
.receive-icon:hover,
.supplier-note-icon:hover {
  cursor: pointer;
}
.email-icon {
  cursor: pointer;
  margin-left: 5px;
  font-size: 1.2em;
}
.email-icon:hover {
  color: #007bff;
}

/* ------------------ FORM FIELD SPACING (MAINTENANCE) ------------------ */

#settings .form-group label,
#settings .form-group input {
  display: block;
  margin-bottom: 0.5rem;
}

#settings .form-group input {
  width: 250px;
  padding: 0.5rem;
}

#settings .form-group {
  margin-bottom: 1.2rem;
}

/* ------------------ BUSINESS DETAILS FORM SPACING ------------------ */

#business_details .form-group label,
#business_details .form-group input {
  display: block;
  margin-bottom: 0.5rem;
}

#business_details .form-group input {
  width: 280px;
  padding: 0.5rem;
}

#business_details .form-group {
  margin-bottom: 1.2rem;
}

/* ------------------ USERS TAB FORM SPACING ------------------ */

#users .form-group label,
#users .form-group input,
#users .form-group select {
  display: block;
  margin-bottom: 0.5rem;
}

#users .form-group input,
#users .form-group select {
  width: 280px;
  padding: 0.5rem;
}

#users .form-group {
  margin-bottom: 1.2rem;
}


📄 backend/endpoints/html_routes.py
------------------------------------------------------------
from fastapi import APIRouter, Request, HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from backend.database import get_db_connection
import logging

# Logging setup
logging.basicConfig(
    filename="logs/server.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

router = APIRouter()
templates = Jinja2Templates(directory="frontend/templates")


@router.get("/orders/new", response_class=HTMLResponse)
async def new_order_page(request: Request):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            # Fetch requesters
            cursor.execute("SELECT id, name FROM requesters ORDER BY name")
            requesters = [dict(row) for row in cursor.fetchall()]

            # Fetch suppliers
            cursor.execute("SELECT id, name FROM suppliers ORDER BY name")
            suppliers = [dict(row) for row in cursor.fetchall()]

            # Fetch items
            cursor.execute("SELECT item_code, item_description FROM items ORDER BY item_code")
            items = [dict(row) for row in cursor.fetchall()]

            # Fetch projects
            cursor.execute("SELECT project_code, project_name FROM projects ORDER BY project_code")
            projects = [dict(row) for row in cursor.fetchall()]

            # Fetch business details
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            row = cursor.fetchone()
            if not row:
                logging.error("No business details found in database")
                raise HTTPException(status_code=500, detail="No business details found in database")

            business_details = dict(row)
            logging.info(f"Business details fetched: {business_details}")

        return templates.TemplateResponse(
            "new_order.html",
            {
                "request": request,
                "requesters": requesters,
                "suppliers": suppliers,
                "items": items,
                "projects": projects,
                "business_details": business_details
            }
        )
    except Exception as e:
        logging.error(f"Error rendering new order page: {str(e)}")
        raise


@router.get("/orders/pending_orders", response_class=HTMLResponse)
async def pending_orders_page(request: Request):
    try:
        return templates.TemplateResponse("pending_orders.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering pending orders page: {str(e)}")
        raise


@router.get("/mobile/authorisations", response_class=HTMLResponse)
async def mobile_authorisations_screen(request: Request):
    try:
        return templates.TemplateResponse("mobile/authorisations.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering mobile authorisations screen: {str(e)}")
        raise


@router.get("/authorisations_per_user", response_class=HTMLResponse)
async def authorisations_per_user_screen(request: Request):
    try:
        return templates.TemplateResponse("authorisations_per_user.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering authorisations_per_user screen: {str(e)}")
        raise


📄 backend/endpoints/lookups/settings.py
------------------------------------------------------------
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from backend.database import get_db_connection

router = APIRouter()

# --- Schemas ---
class SettingsPayload(BaseModel):
    order_number_start: str
    auth_threshold_1: int
    auth_threshold_2: int
    auth_threshold_3: int
    auth_threshold_4: int

class OrderNumberPayload(BaseModel):
    order_number_start: str


# --- GET full settings ---
@router.get("/settings")
async def get_settings():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT order_number_start, auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4
        FROM settings WHERE id = 1
    """)
    row = cursor.fetchone()

    if row:
        settings = {
            "order_number_start": row["order_number_start"] or "URC1000",
            "auth_threshold_1": row["auth_threshold_1"] or 0,
            "auth_threshold_2": row["auth_threshold_2"] or 0,
            "auth_threshold_3": row["auth_threshold_3"] or 0,
            "auth_threshold_4": row["auth_threshold_4"] or 0
        }
    else:
        settings = {
            "order_number_start": "URC1000",
            "auth_threshold_1": 0,
            "auth_threshold_2": 0,
            "auth_threshold_3": 0,
            "auth_threshold_4": 0
        }
        cursor.execute("""
            INSERT INTO settings (id, order_number_start, auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4)
            VALUES (1, ?, ?, ?, ?, ?)
        """, (
            settings["order_number_start"],
            settings["auth_threshold_1"],
            settings["auth_threshold_2"],
            settings["auth_threshold_3"],
            settings["auth_threshold_4"]
        ))
        conn.commit()

    conn.close()
    return settings


# --- PUT full settings ---
@router.put("/settings")
async def update_settings(payload: SettingsPayload):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            UPDATE settings
            SET order_number_start = ?, auth_threshold_1 = ?, auth_threshold_2 = ?, auth_threshold_3 = ?, auth_threshold_4 = ?
            WHERE id = 1
        """, (
            payload.order_number_start,
            payload.auth_threshold_1,
            payload.auth_threshold_2,
            payload.auth_threshold_3,
            payload.auth_threshold_4
        ))
        if cursor.rowcount == 0:
            cursor.execute("""
                INSERT INTO settings (id, order_number_start, auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4)
                VALUES (1, ?, ?, ?, ?, ?)
            """, (
                payload.order_number_start,
                payload.auth_threshold_1,
                payload.auth_threshold_2,
                payload.auth_threshold_3,
                payload.auth_threshold_4
            ))
        conn.commit()
        return {"message": "Settings updated successfully"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()


# --- PUT order number only ---
@router.put("/order_number")
async def update_order_number(payload: OrderNumberPayload):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            UPDATE settings SET order_number_start = ? WHERE id = 1
        """, (payload.order_number_start,))
        if cursor.rowcount == 0:
            cursor.execute("""
                INSERT INTO settings (id, order_number_start)
                VALUES (1, ?)
            """, (payload.order_number_start,))
        conn.commit()
        return {"message": "Order number updated"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()


📄 backend/endpoints/lookups/users.py
------------------------------------------------------------
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, constr
from typing import Optional
from backend.database import get_db_connection
import bcrypt

router = APIRouter()

# ----------------------------
# Pydantic Models
# ----------------------------

class UserCreate(BaseModel):
    username: constr(strip_whitespace=True, min_length=1)
    password: constr(strip_whitespace=True, min_length=4)
    rights: str
    auth_threshold_band: Optional[int] = None

class UserUpdate(BaseModel):
    username: constr(strip_whitespace=True, min_length=1)
    password: Optional[constr(strip_whitespace=True, min_length=4)] = None
    rights: str
    auth_threshold_band: Optional[int] = None

# ----------------------------
# GET all users
# ----------------------------

@router.get("/users")
async def get_users():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, username, rights, auth_threshold_band FROM users")
    users = cursor.fetchall()
    conn.close()
    return {
        "users": [
            {
                "id": u[0],
                "username": u[1],
                "rights": u[2],
                "auth_threshold_band": u[3]
            } for u in users
        ]
    }

# ----------------------------
# POST: Add a new user
# ----------------------------

@router.post("/users")
async def add_user(payload: UserCreate):
    conn = get_db_connection()
    cursor = conn.cursor()

    password_hash = bcrypt.hashpw(payload.password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

    try:
        cursor.execute(
            "INSERT INTO users (username, password_hash, rights, auth_threshold_band) VALUES (?, ?, ?, ?)",
            (payload.username, password_hash, payload.rights, payload.auth_threshold_band)
        )
        conn.commit()
        return {"status": "User added successfully"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()

# ----------------------------
# PUT: Update an existing user
# ----------------------------

@router.put("/users/{user_id}")
async def update_user(user_id: int, payload: UserUpdate):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail="User not found")

        fields_to_update = {
            "username": payload.username,
            "rights": payload.rights,
            "auth_threshold_band": payload.auth_threshold_band
        }

        if payload.password and payload.password.strip():
            password_hash = bcrypt.hashpw(payload.password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            fields_to_update["password_hash"] = password_hash

        set_clause = ", ".join([f"{key} = ?" for key in fields_to_update])
        values = list(fields_to_update.values()) + [user_id]

        cursor.execute(f"UPDATE users SET {set_clause} WHERE id = ?", values)
        conn.commit()
        return {"status": "User updated successfully"}

    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()

# ----------------------------
# DELETE: Remove a user
# ----------------------------

@router.delete("/users/{user_id}")
async def delete_user(user_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
        if cursor.rowcount == 0:
            raise HTTPException(status_code=404, detail="User not found")
        conn.commit()
        return {"status": "User deleted successfully"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()


📄 backend/endpoints/utils.py
------------------------------------------------------------
# backend/endpoints/utils.py

from fastapi import APIRouter, HTTPException, Request
import logging
from pathlib import Path
from pydantic import BaseModel
from typing import Dict, Any
import json

router = APIRouter(tags=["utils"])

# --- Setup Log File ---
log_path = Path("logs/client.log")
log_path.parent.mkdir(exist_ok=True)

# File logger for structured client logs
logger = logging.getLogger("client")
logger.setLevel(logging.INFO)
file_handler = logging.FileHandler(log_path)
file_handler.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
logger.addHandler(file_handler)


# --- Structured Log Endpoint ---
class ClientLog(BaseModel):
    level: str
    message: str
    details: Dict[str, Any]
    timestamp: str

@router.post("/log_client")
async def log_client(log: ClientLog) -> Dict[str, str]:
    """
    Log client-side messages to a server-side log file.

    Args:
        log: ClientLog object containing level, message, details, and timestamp.

    Returns:
        Dict with status message.

    Raises:
        HTTPException: If logging fails.
    """
    try:
        log_message = f"{log.message} | Details: {json.dumps(log.details)}"
        logger.log(
            getattr(logging, log.level.upper(), logging.INFO),
            log_message
        )
        return {"status": "Log recorded"}
    except Exception as e:
        logger.error(f"Failed to log client message: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Failed to log message: {str(e)}")


# --- Raw JS-Based Logging Endpoint (used by utils.js -> logToServer) ---
@router.post("/log")
async def log_from_frontend(request: Request):
    """
    Accept log submissions from frontend via utils.js and logToServer().
    """
    try:
        payload = await request.json()
        level = payload.get("level", "INFO").upper()
        message = payload.get("message", "")
        details = payload.get("details", {})

        log_entry = f"{level} | {message} | {json.dumps(details)}"

        if level == "ERROR":
            logger.error(log_entry)
        elif level == "WARNING":
            logger.warning(log_entry)
        else:
            logger.info(log_entry)

        return {"status": "ok"}
    except Exception as e:
        logger.exception("Failed to process /log call from frontend")
        raise HTTPException(status_code=500, detail=f"Failed to log message: {str(e)}")


📄 backend/utils.py
------------------------------------------------------------
from fastapi import HTTPException, Depends
from functools import wraps
from contextlib import contextmanager
import sqlite3
import logging
from typing import List, Dict, Any
from backend.database import get_db_connection

# Logging setup
logging.basicConfig(filename="logs/server.log", level=logging.INFO,
                    format="%(asctime)s | %(levelname)s | %(message)s")

# Database dependency
@contextmanager
def db_session():
    conn = get_db_connection()
    try:
        yield conn
    finally:
        conn.close()

async def get_db():
    with db_session() as conn:
        yield conn

# Error handling decorator
def handle_db_errors(entity: str, action: str):
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except sqlite3.IntegrityError as e:
                logging.error(f"Integrity error {action} {entity}: {str(e)}")
                raise HTTPException(status_code=400, detail=f"{entity.capitalize()} could not be {action} (possible duplicate).")
            except sqlite3.Error as e:
                logging.error(f"Database error {action} {entity}: {str(e)}")
                raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
            except Exception as e:
                logging.error(f"Error {action} {entity}: {str(e)}")
                raise HTTPException(status_code=500, detail=f"Error {action} {entity}: {str(e)}")
        return wrapper
    return decorator

# Logging helpers
def log_success(entity: str, action: str, details: str):
    logging.info(f"{entity.capitalize()} {action}: {details}")

def log_warning(entity: str, message: str):
    logging.warning(f"{entity.capitalize()} {message}")

# Generic CRUD helpers
async def fetch_list(db: sqlite3.Connection, table: str, fields: List[str], response_key: str) -> Dict[str, List[Dict]]:
    cursor = db.cursor()
    cursor.execute(f"SELECT {', '.join(fields)} FROM {table}")
    rows = cursor.fetchall()
    result = [dict(zip(fields, row)) for row in rows]
    log_success(response_key, "fetched", f"{len(result)} items")
    return {response_key: result}

async def add_record(db: sqlite3.Connection, table: str, payload: Dict[str, Any], fields: List[str], log_message: str) -> Dict[str, str]:
    values = tuple(payload[field] for field in fields)
    placeholders = ", ".join(["?"] * len(fields))
    cursor = db.cursor()
    cursor.execute(f"INSERT INTO {table} ({', '.join(fields)}) VALUES ({placeholders})", values)
    db.commit()
    log_success(table, "added", log_message)
    return {"message": f"{table.capitalize()} added successfully"}

async def update_record(db: sqlite3.Connection, table: str, record_id: int, payload: Dict[str, Any], fields: List[str], log_message: str) -> Dict[str, str]:
    values = tuple(payload[field] for field in fields) + (record_id,)
    set_clause = ", ".join(f"{field} = ?" for field in fields)
    cursor = db.cursor()
    cursor.execute(f"UPDATE {table} SET {set_clause} WHERE id = ?", values)
    if cursor.rowcount == 0:
        log_warning(table, f"No {table} found with id {record_id}")
        raise HTTPException(status_code=404, detail=f"{table.capitalize()} not found")
    db.commit()
    log_success(table, "updated", log_message)
    return {"message": f"{table.capitalize()} updated successfully"}

📄 backend/database.py
------------------------------------------------------------
import sqlite3
from pathlib import Path
import logging

# Logging setup
logging.basicConfig(
    filename="logs/db_activity_log.txt",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

DB_PATH = Path("data/orders.db")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            # Create requesters table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requesters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT
                )
            """)

            # Create suppliers table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS suppliers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    account_number TEXT,
                    name TEXT,
                    telephone TEXT,
                    vat_number TEXT,
                    registration_number TEXT,
                    email TEXT,
                    contact_name TEXT,
                    contact_telephone TEXT,
                    address_line1 TEXT,
                    address_line2 TEXT,
                    address_line3 TEXT,
                    postal_code TEXT
                )
            """)

            # Create orders table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_number TEXT,
                    status TEXT,
                    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    received_date TEXT,
                    total REAL,
                    order_note TEXT,
                    note_to_supplier TEXT,
                    supplier_id INTEGER,
                    requester_id INTEGER,
                    FOREIGN KEY (supplier_id) REFERENCES suppliers(id),
                    FOREIGN KEY (requester_id) REFERENCES requesters(id)
                )
            """)

            # Create order_items table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS order_items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    item_code TEXT,
                    item_description TEXT,
                    project TEXT,
                    qty_ordered REAL,
                    qty_received REAL,
                    received_date TEXT,
                    price REAL,
                    total REAL,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)

            # Create attachments table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS attachments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    filename TEXT NOT NULL,
                    file_path TEXT NOT NULL,
                    upload_date TEXT NOT NULL,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)

            # Create audit_trail table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS audit_trail (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    action TEXT,
                    details TEXT,
                    action_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    user_id INTEGER,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)

            # Create settings table
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS settings (
                id INTEGER PRIMARY KEY CHECK (id = 1),
                order_number_start TEXT,
                auth_threshold_1 INTEGER,
                auth_threshold_2 INTEGER,
                auth_threshold_3 INTEGER,
                auth_threshold_4 INTEGER
            )
            """)

            # Create users table with auth band
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                rights TEXT NOT NULL,
                auth_threshold_band INTEGER  -- Nullable, used to filter access on authorisation PWA
            )
            """)

            # Create projects table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS projects (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    project_code TEXT,
                    project_name TEXT
                )
            """)

            # Create items table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    item_code TEXT,
                    item_description TEXT
                )
            """)

            # Create business_details table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS business_details (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_name TEXT NOT NULL,
                    address_line1 TEXT,
                    address_line2 TEXT,
                    city TEXT,
                    province TEXT,
                    postal_code TEXT,
                    telephone TEXT,
                    vat_number TEXT
                )
            """)

            # Insert default business details if not exists
            cursor.execute("""
                INSERT OR IGNORE INTO business_details (
                    id, company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                ) VALUES (
                    1, 'Universal Recycling Company Pty Ltd', '123 Industrial Road', 'Unit 4', 'Cape Town', 'Western Cape', '8001', '+27 21 555 1234', 'VAT123456789'
                )
            """)

            conn.commit()
            logging.info("Database tables created successfully.")
    except sqlite3.Error as e:
        logging.error(f"Failed to initialize database: {str(e)}")
        raise

def determine_status_and_band(total: float) -> tuple[str, int]:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4 FROM settings WHERE id = 1")
        row = cursor.fetchone()
        if not row:
            raise ValueError("Authorization thresholds not configured.")

        thresholds = [row["auth_threshold_1"], row["auth_threshold_2"], row["auth_threshold_3"], row["auth_threshold_4"]]
        status = "Pending"
        required_band = 0

        if total > thresholds[0]:
            status = "Awaiting Authorisation"
            if total <= thresholds[1]:
                required_band = 1
            elif total <= thresholds[2]:
                required_band = 2
            elif total <= thresholds[3]:
                required_band = 3
            else:
                required_band = 4

        return status, required_band

def create_order(order_data: dict, items: list) -> dict:
    status, required_band = determine_status_and_band(order_data["total"])

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO orders (
                order_number, status, total, order_note, note_to_supplier,
                supplier_id, requester_id, required_auth_band
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            order_data["order_number"],
            status,
            order_data["total"],
            order_data["order_note"],
            order_data["note_to_supplier"],
            order_data["supplier_id"],
            order_data["requester_id"],
            required_band
        ))
        order_id = cursor.lastrowid

        for item in items:
            cursor.execute("""
                INSERT INTO order_items (
                    order_id, item_code, item_description, project,
                    qty_ordered, price, total
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                order_id,
                item["item_code"],
                item["item_description"],
                item["project"],
                item["qty_ordered"],
                item["price"],
                item["qty_ordered"] * item["price"]
            ))

        cursor.execute("""
            INSERT INTO audit_trail (order_id, action, details, user_id)
            VALUES (?, 'Created', ?, ?)
        """, (order_id, f"Order {order_data['order_number']} created", 0))

        conn.commit()

        cursor.execute("""
            SELECT id, order_number, status, created_date, total,
                   order_note, note_to_supplier, supplier_id,
                   requester_id, required_auth_band
            FROM orders WHERE id = ?
        """, (order_id,))
        order = cursor.fetchone()
        return dict(order)

def get_settings() -> dict:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT order_number_start, auth_threshold_1, auth_threshold_2,
                   auth_threshold_3, auth_threshold_4
            FROM settings
            WHERE id = 1
        """)
        row = cursor.fetchone()
        return dict(row) if row else {}

def update_settings(payload: dict):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO settings (
                id, order_number_start, auth_threshold_1, auth_threshold_2,
                auth_threshold_3, auth_threshold_4
            ) VALUES (?, ?, ?, ?, ?, ?)
            ON CONFLICT(id) DO UPDATE SET
                order_number_start = excluded.order_number_start,
                auth_threshold_1 = excluded.auth_threshold_1,
                auth_threshold_2 = excluded.auth_threshold_2,
                auth_threshold_3 = excluded.auth_threshold_3,
                auth_threshold_4 = excluded.auth_threshold_4
        """, (
            1,
            payload["order_number_start"],
            payload["auth_threshold_1"],
            payload["auth_threshold_2"],
            payload["auth_threshold_3"],
            payload["auth_threshold_4"]
        ))
        conn.commit()

def get_business_details() -> dict:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
            FROM business_details WHERE id = 1
        """)
        row = cursor.fetchone()
        return dict(row) if row else {}

📄 backend/main.py
------------------------------------------------------------
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse, Response
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.routing import APIRouter
from backend.endpoints import html_routes

from pathlib import Path
import logging
import sys
import os

# --- Database ---
from backend.database import init_db, get_db_connection

# --- Routers ---
from backend.endpoints import routers
from backend.endpoints.admin import admin_router
from backend.endpoints.auth import router as auth_router
from backend.endpoints.orders import router as orders_router
from backend.endpoints.new_order_pdf_generator import router as new_order_pdf_router
from backend.endpoints.pending_order_pdf_generator import router as pending_order_pdf_router
from backend.endpoints.order_queries import router as order_queries_router
from backend.endpoints.order_receiving import router as order_receiving_router
from backend.endpoints.order_attachments import router as attachments_router
from backend.endpoints.order_email import router as order_email_router
from backend.endpoints.utils import router as utils_router
from backend.endpoints.mobile.awaiting_authorisation import router as mobile_auth_router

# Allow scripts to import from parent
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from scripts.add_debug_validation_handler import install_validation_handler

# Setup logging
Path("logs").mkdir(exist_ok=True)
logging.basicConfig(
    filename="logs/server_startup.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

try:
    init_db()
    logging.info("✅ Database initialized successfully.")
except Exception as e:
    logging.exception("❌ Failed to initialize database")
    raise

# --- FastAPI App Init ---
app = FastAPI(
    debug=True,
    title="Universal Recycling Purchase Order System",
    description="Purchase Order management system for Universal Recycling"
)

install_validation_handler(app)

# --- Static and Upload Directories ---
app.mount("/static", StaticFiles(directory="frontend/static"), name="static")
app.mount("/data/uploads", StaticFiles(directory="data/uploads"), name="uploads")

# --- Middleware ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
app.add_middleware(SessionMiddleware, secret_key="your-new-secure-key")  # Replace with a secure key

templates = Jinja2Templates(directory="frontend/templates")

# --- Static Routes Router ---
static_router = APIRouter()

@static_router.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    logging.info("Rendering login page")
    return templates.TemplateResponse("login.html", {"request": request})

@static_router.get("/home", response_class=HTMLResponse)
async def home(request: Request):
    if not request.session.get("user"):
        return RedirectResponse("/")
    logging.info("Rendering home page")
    return templates.TemplateResponse("home.html", {"request": request})

@static_router.get("/orders/new", response_class=HTMLResponse)
async def new_order_page(request: Request):
    logging.info("Starting to render new order page")
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM requesters ORDER BY name")
            requesters = [dict(row) for row in cursor.fetchall()]
            logging.info(f"Requesters fetched: {requesters}")
            cursor.execute("SELECT id, name FROM suppliers ORDER BY name")
            suppliers = [dict(row) for row in cursor.fetchall()]
            logging.info(f"Suppliers fetched: {suppliers}")
            cursor.execute("SELECT item_code, item_description FROM items ORDER BY item_code")
            items = [dict(row) for row in cursor.fetchall()]
            logging.info(f"Items fetched: {items}")
            cursor.execute("SELECT project_code, project_name FROM projects ORDER BY project_code")
            projects = [dict(row) for row in cursor.fetchall()]
            logging.info(f"Projects fetched: {projects}")
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            row = cursor.fetchone()
            if not row:
                logging.error("No business details found in database")
                business_details = {
                    "company_name": "Default Company",
                    "address_line1": "N/A",
                    "address_line2": "",
                    "city": "N/A",
                    "province": "N/A",
                    "postal_code": "N/A",
                    "telephone": "N/A",
                    "vat_number": "N/A"
                }
            else:
                business_details = dict(row)
            logging.info(f"Business details fetched: {business_details}")

        template_context = {
            "request": request,
            "requesters": requesters,
            "suppliers": suppliers,
            "items": items,
            "projects": projects,
            "business_details": business_details
        }
        logging.info(f"Template context: {template_context}")
        
        response = templates.TemplateResponse("new_order.html", template_context)
        logging.info("Successfully rendered new_order.html")
        return response
    except Exception as e:
        logging.error(f"Error rendering new order page: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Error rendering new order page: {str(e)}")

@static_router.get("/orders/pending_orders", response_class=HTMLResponse)
async def pending_orders_page(request: Request):
    logging.info("Rendering pending orders page")
    return templates.TemplateResponse("pending_orders.html", {"request": request})

@static_router.get("/orders/received_orders", response_class=HTMLResponse)
async def received_orders_page(request: Request):
    logging.info("Rendering received orders page")
    return templates.TemplateResponse("received_orders.html", {"request": request})

@static_router.get("/orders/audit_trail", response_class=HTMLResponse)
async def audit_trail_page(request: Request):
    logging.info("Rendering audit trail page")
    return templates.TemplateResponse("audit_trail.html", {"request": request})

@static_router.get("/maintenance", response_class=HTMLResponse)
async def maintenance_page(request: Request):
    logging.info("Rendering maintenance page")
    return templates.TemplateResponse("maintenance.html", {"request": request})

@static_router.get("/orders/partially_delivered", response_class=HTMLResponse)
async def partially_delivered_page(request: Request):
    logging.info("Rendering partially delivered orders page")
    return templates.TemplateResponse("partially_delivered.html", {"request": request})

@static_router.get("/favicon.ico")
async def favicon():
    favicon_path = Path("frontend/static/favicon.ico")
    if not favicon_path.exists():
        return {"error": "Favicon not found"}, 404
    try:
        with open(favicon_path, "rb") as f:
            content = f.read()
        return Response(content=content, media_type="image/x-icon")
    except Exception as e:
        logging.error(f"Error serving favicon: {str(e)}", exc_info=True)
        return {"error": "Failed to serve favicon"}, 500

# --- Include Routers ---
# Include static routes first to take precedence
app.include_router(static_router)
app.include_router(mobile_auth_router)

# Include lookup routers under /lookups
for router in routers:
    if router is not order_queries_router and router is not orders_router and router is not attachments_router and router is not order_receiving_router:
        app.include_router(router, prefix="/lookups")

# Include other routers with their specific prefixes
app.include_router(html_routes.router)
app.include_router(admin_router, prefix="/admin")
app.include_router(order_queries_router, prefix="/orders/api")
app.include_router(new_order_pdf_router, prefix="/orders/api")
app.include_router(auth_router)
app.include_router(orders_router, prefix="/orders")
app.include_router(attachments_router, prefix="/orders")
app.include_router(order_receiving_router, prefix="/orders")
app.include_router(utils_router)
app.include_router(order_email_router, prefix="/orders")
app.include_router(pending_order_pdf_router, prefix="/orders/api")

# --- Dev CLI ---
if __name__ == "__main__":
    import uvicorn
    try:
        logging.info("🚀 Starting Uvicorn server...")
        uvicorn.run(app, host="0.0.0.0", port=8004)
    except Exception as e:
        logging.exception("❌ Server failed to start")
        raise

📄 frontend/templates/login.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Login</title>
  <link rel="stylesheet" href="/static/css/style.css" />
</head>
<body>
  <div class="login-box">
    <h2>Login</h2>
    <form id="login-form">
      <input type="text" id="username" placeholder="Enter your username" autocomplete="username" required />
      <input type="password" id="password" placeholder="Enter your password" autocomplete="current-password" required />
      <button type="submit">Login</button>
      <div id="login-error"></div>
    </form>
  </div>
  <script src="/static/js/login.js"></script>
</body>
</html>

📄 frontend/templates/home.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Orders Dashboard</title>
  <link rel="stylesheet" href="/static/css/style.css" />
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 2rem;
    }

    .header {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      margin-bottom: 2rem;
    }

    .welcome-message {
      font-size: 1.2rem;
      margin-bottom: 1rem;
    }

    .tab-buttons {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .tab-buttons button {
      background-color: #e0e0e0;
      border: none;
      padding: 0.7rem 1.2rem;
      border-radius: 6px;
      font-size: 1rem;
      cursor: pointer;
      color: black;
      font-weight: 500;
      transition: background-color 0.2s;
    }

    .tab-buttons button:hover {
      background-color: #ccc;
    }

    .tab-buttons button.active {
      background-color: #3367d6;
      color: white;
      font-weight: bold;
    }
  </style>
</head>
<body>

  <div class="header">
    <div class="welcome-message">
      Welcome {{ username | capitalize }} to the <strong>Universal Recycling Purchase Order System</strong>
    </div>
    <div class="tab-buttons">
      <button onclick="location.href='/orders/new'">New Order</button>
      <button onclick="location.href='/orders/pending_orders'">Pending Orders</button>
      <button onclick="location.href='/orders/received_orders'">Received Orders</button>
      <button onclick="location.href='/orders/audit_trail'">Audit Trail</button>
      <button onclick="location.href='/maintenance'">Maintenance</button>
      <button onclick="location.href='/logout'">Logout</button>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const path = window.location.pathname;
      const tabButtons = document.querySelectorAll(".tab-buttons button");

      tabButtons.forEach(btn => {
        const onclick = btn.getAttribute("onclick");
        const match = onclick && onclick.match(/location\.href='([^']+)'/);
        if (match && match[1] && path.startsWith(match[1])) {
          btn.classList.add("active");
        }
      });
    });
  </script>

</body>
</html>


📄 frontend/templates/index.html
------------------------------------------------------------


📄 frontend/templates/_tab_nav.html
------------------------------------------------------------
<div class="tab-buttons">
  <button onclick="location.href='/home'">Home</button>
  <button onclick="location.href='/orders/new'">New Order</button>
  <button onclick="location.href='/orders/pending_orders'">Pending Orders</button>
  <button onclick="location.href='/orders/received_orders'">Received Orders</button>
  <button onclick="location.href='/orders/partially_delivered'">Partially Delivered Orders</button>
  <button onclick="location.href='/orders/audit_trail'">Audit Trail</button>
  <button onclick="location.href='/maintenance'">Maintenance</button>
  <button onclick="location.href='/logout'">Logout</button>
</div>


📄 frontend/static/js/components/shared_filters.js
------------------------------------------------------------
export async function loadRequesters(selectId) {
    try {
      const res = await fetch("/lookups/requesters");
      const data = await res.json();
      const select = document.getElementById(selectId);
      if (!select) return;
  
      select.innerHTML = '<option value="All">All</option>';
      data.requesters.forEach(r => {
        const opt = document.createElement("option");
        opt.value = r.name;
        opt.textContent = r.name;
        select.appendChild(opt);
      });
    } catch (err) {
      console.error(`❌ Failed to load requesters for ${selectId}:`, err);
    }
}
  
export async function loadSuppliers(selectId) {
    try {
      const res = await fetch("/lookups/suppliers");
      const data = await res.json();
      const select = document.getElementById(selectId);
      if (!select) return;
  
      select.innerHTML = '<option value="All">All</option>';
      data.suppliers.forEach(s => {
        const opt = document.createElement("option");
        opt.value = s.name;
        opt.textContent = s.name;
        select.appendChild(opt);
      });
    } catch (err) {
      console.error(`❌ Failed to load suppliers for ${selectId}:`, err);
    }
}

📄 frontend/static/js/pending_orders.js
------------------------------------------------------------
import { loadRequesters, loadSuppliers } from './components/shared_filters.js';
import { expandLineItems } from './components/expand_line_items.js';
import { showUploadAttachmentsModal, checkAttachments, showViewAttachmentsModal } from './components/attachment_modal.js';
import { showOrderNoteModal, showSupplierNoteModal } from './components/order_note_modal.js';
import { showReceiveModal } from './components/receive_modal.js';
import { showPDFModal } from './components/pdf_modal.js';

console.log("Loading pending_orders.js");

async function loadFiltersAndOrders() {
    try {
        console.log("Loading filters...");
        await Promise.all([
            loadRequesters("filter-requester").catch(err => { console.error("Failed to load requesters:", err); throw err; }),
            loadSuppliers("filter-supplier").catch(err => { console.error("Failed to load suppliers:", err); throw err; })
        ]);
        console.log("Filters loaded successfully");
        await loadOrders();
    } catch (error) {
        console.error("Error loading filters or orders:", error);
        document.getElementById("pending-body").innerHTML = '<tr><td colspan="7">Error loading filters: ' + escapeHTML(error.message) + '</td></tr>';
    }
}

function escapeHTML(str) {
    if (typeof str !== 'string') return '';
    return str
        .replace(/&/g, '&')
        .replace(/</g, '<')
        .replace(/>/g, '>')
        .replace(/"/g, '"')
        .replace(/'/g, '');
}

async function loadOrders() {
    const startDate = document.getElementById("start-date").value;
    const endDate = document.getElementById("end-date").value;
    const requester = document.getElementById("filter-requester").value;
    const supplier = document.getElementById("filter-supplier").value;
    const status = document.getElementById("filter-status").value;

    const params = new URLSearchParams();
    if (startDate) params.append("start_date", startDate);
    if (endDate) params.append("end_date", endDate);
    if (requester && requester !== "All") params.append("requester", requester);
    if (supplier && supplier !== "All") params.append("supplier", supplier);
    if (status && status !== "All") params.append("status", status);

    try {
        console.log("Fetching orders with params:", params.toString());
        const res = await fetch(`/orders/api/pending_orders?${params.toString()}`);
        if (!res.ok) {
            const errorText = await res.text();
            throw new Error(`HTTP error! Status: ${res.status}, Message: ${errorText}`);
        }
        const data = await res.json();

        console.log("Pending Orders API Response:", JSON.stringify(data, null, 2));

        const tbody = document.getElementById("pending-body");
        tbody.innerHTML = "";

        if (data.orders && Array.isArray(data.orders) && data.orders.length > 0) {
            data.orders.forEach((order, index) => {
                const row = document.createElement("tr");
                const sanitizedOrderNote = escapeHTML(order.order_note || "");
                const sanitizedSupplierNote = escapeHTML(order.note_to_supplier || "");
                const sanitizedOrderNumber = escapeHTML(order.order_number || "");
                const sanitizedSupplier = escapeHTML(order.supplier || "N/A");
                const sanitizedRequester = escapeHTML(order.requester || "N/A");
                const sanitizedDate = escapeHTML(order.created_date || "");
                const sanitizedTotal = order.total != null ? `R${parseFloat(order.total).toFixed(2)}` : "R0.00";
                const sanitizedStatus = escapeHTML(order.status || "");
                row.innerHTML = `
                    <td>${sanitizedDate}</td>
                    <td>${sanitizedOrderNumber}</td>
                    <td>${sanitizedRequester}</td>
                    <td>${sanitizedSupplier}</td>
                    <td>${sanitizedTotal}</td>
                    <td><span class="status">${sanitizedStatus}</span></td>
                    <td>
                        <span class="expand-icon" data-order-id="${order.id || ''}">⬇️</span>
                        <span class="clip-icon" title="View/Upload Attachments" data-order-id="${order.id || ''}" data-order-number="${sanitizedOrderNumber}">📎</span>
                        <span class="note-icon" title="Edit Order Note" data-order-id="${order.id || ''}" data-order-note="${sanitizedOrderNote}" id="order-note-${index}">📝</span>
                        <span class="supplier-note-icon" title="View Note to Supplier" data-supplier-note="${sanitizedSupplierNote}" data-order-number="${sanitizedOrderNumber}" id="supplier-note-${index}">📦</span>
                        <span class="receive-icon" title="Mark as Received" data-order-id="${order.id || ''}" data-order-number="${sanitizedOrderNumber}">✅</span>
                        <span class="pdf-icon" title="View Purchase Order PDF" data-order-id="${order.id || ''}" data-order-number="${sanitizedOrderNumber}">📄</span>
                    </td>
                `;
                tbody.appendChild(row);

                row.querySelector(`#supplier-note-${index}`).addEventListener("click", () => {
                    try {
                        window.showSupplierNoteModal(sanitizedSupplierNote);
                    } catch (e) {
                        console.error(`Failed to show supplier note for order ${sanitizedOrderNumber}:`, e);
                        alert(`Error displaying supplier note: ${e.message}`);
                    }
                });
                row.querySelector(`#order-note-${index}`).addEventListener("click", (e) => {
                    const target = e.target;
                    window.showOrderNoteModal(sanitizedOrderNote, order.id || '', (newNote) => {
                        target.setAttribute("data-order-note", escapeHTML(newNote));
                    });
                });
                row.querySelector(".expand-icon").addEventListener("click", (e) => {
                    if (!order.id) {
                        console.error("No order ID provided for expanding line items");
                        alert("Cannot expand line items: No order ID available");
                        return;
                    }
                    window.expandLineItems(order.id, e.target);
                });
                row.querySelector(".clip-icon").addEventListener("click", (e) => {
                    const target = e.target;
                    window.checkAttachments(order.id || '').then(has => {
                        if (has) {
                            window.showViewAttachmentsModal(order.id || '', sanitizedOrderNumber);
                        } else {
                            window.showUploadAttachmentsModal(order.id || '', sanitizedOrderNumber, () => {
                                window.checkAttachments(order.id || '').then(has => target.classList.toggle('eye-icon', has));
                            });
                        }
                    });
                });
                row.querySelector(".receive-icon").addEventListener("click", () => window.showReceiveModal(order.id || '', sanitizedOrderNumber));

                row.querySelector(".pdf-icon").addEventListener("click", async () => {
                    try {
                        const response = await fetch(`/orders/api/generate_pdf_for_order/${order.id}`);
                        if (!response.ok) throw new Error(`PDF generation failed with status ${response.status}`);

                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/pdf')) {
                            const blob = await response.blob();
                            if (blob.size === 0) {
                                throw new Error('Received empty PDF file');
                            }
                            showPDFModal(blob);
                        } else {
                            const data = await response.json();
                            throw new Error(`Unexpected response: ${JSON.stringify(data)}`);
                        }
                    } catch (err) {
                        alert("❌ Could not generate PDF");
                        console.error(err);
                    }
                });
            });
        } else {
            tbody.innerHTML = '<tr><td colspan="7">No pending orders found.</td></tr>';
        }
    } catch (error) {
        console.error("Error loading orders:", error);
        document.getElementById("pending-body").innerHTML = '<tr><td colspan="7">Error loading orders: ' + escapeHTML(error.message) + '</td></tr>';
    }
}

function clearFilters() {
    document.getElementById("start-date").value = "";
    document.getElementById("end-date").value = "";
    document.getElementById("filter-requester").value = "All";
    document.getElementById("filter-supplier").value = "All";
    document.getElementById("filter-status").value = "All";
    loadOrders();
}

document.getElementById("run-btn").addEventListener("click", loadOrders);
document.getElementById("clear-btn").addEventListener("click", clearFilters);
document.addEventListener("DOMContentLoaded", loadFiltersAndOrders);

window.expandLineItems = expandLineItems;
window.showUploadAttachmentsModal = showUploadAttachmentsModal;
window.checkAttachments = checkAttachments;
window.showViewAttachmentsModal = showViewAttachmentsModal;
window.showOrderNoteModal = showOrderNoteModal;
window.showSupplierNoteModal = showSupplierNoteModal;
window.showReceiveModal = showReceiveModal;

📄 frontend/templates/pending_orders.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pending Orders - Universal Recycling</title>
  <link rel="icon" href="data:,">
  <link rel="stylesheet" href="/static/css/style.css" />
</head>
<body>

  {% include "_tab_nav.html" %}

  <h2>Pending Orders</h2>

  <div class="filters">
    <label for="start-date">Start Date:</label>
    <input type="date" id="start-date">
    <label for="end-date">End Date:</label>
    <input type="date" id="end-date">
    <label for="filter-requester">Requester:</label>
    <select id="filter-requester">
      <option value="All">All</option>
    </select>
    <label for="filter-supplier">Supplier:</label>
    <select id="filter-supplier">
      <option value="All">All</option>
    </select>
    <label for="filter-status">Status:</label>
    <select id="filter-status">
      <option value="All">All</option>
      <option value="Pending">Pending</option>
      <option value="Waiting for Approval">Waiting for Approval</option>
      <option value="Awaiting Authorisation">Awaiting Authorisation</option>
      <option value="Authorised">Authorised</option>
    </select>
    <button id="run-btn">Run</button>
    <button id="clear-btn">Clear</button>
  </div>

  <table>
    <thead>
      <tr>
        <th>Request Date</th>
        <th>Order Number</th>
        <th>Requester</th>
        <th>Supplier</th>
        <th>Total</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="pending-body"></tbody>
  </table>

  <script type="module" src="/static/js/pending_orders.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const path = window.location.pathname;
      const tabButtons = document.querySelectorAll(".tab-buttons button");
      tabButtons.forEach(btn => {
        const target = btn.getAttribute("onclick").match(/location\.href='([^']+)'/)[1];
        if (path.startsWith(target)) {
          btn.classList.add("active");
        }
      });
    });
  </script>

</body>
</html>


📄 backend/endpoints/orders.py
------------------------------------------------------------
import logging
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Optional
import sqlite3
from datetime import datetime

from backend.utils.db_utils import handle_db_errors, log_success, log_warning
from backend.utils.order_utils import calculate_order_total
from backend.database import create_order, get_db_connection

router = APIRouter(tags=["orders"])

# --- Models ---
class OrderItemCreate(BaseModel):
    item_code: str
    item_description: str
    project: Optional[str] = None
    qty_ordered: float
    price: float

class OrderCreate(BaseModel):
    order_number: str
    status: str
    order_note: Optional[str] = None
    note_to_supplier: Optional[str] = None
    supplier_id: int
    requester_id: int
    items: List[OrderItemCreate]
    auth_band_required: Optional[int] = None  # NEW FIELD

class OrderUpdate(BaseModel):
    status: Optional[str] = None
    order_note: Optional[str] = None
    note_to_supplier: Optional[str] = None
    supplier_id: Optional[int] = None
    requester_id: Optional[int] = None

class ReceiveItem(BaseModel):
    item_id: int
    qty_received: float

class ReceivePayload(BaseModel):
    items: List[ReceiveItem]

# --- Routes ---
@router.post("")
async def create_new_order(order: OrderCreate):
    try:
        logging.info(f"🔍 Incoming order: {order}")
        total = calculate_order_total([item.dict() for item in order.items])
        order_data = {
            "order_number": order.order_number,
            "status": order.status,
            "total": total,
            "order_note": order.order_note,
            "note_to_supplier": order.note_to_supplier,
            "supplier_id": order.supplier_id,
            "requester_id": order.requester_id,
            "auth_band_required": order.auth_band_required  # NEW FIELD
        }
        items = [item.dict() for item in order.items]
        result = create_order(order_data, items)
        log_success("order", "created", f"Order {order.order_number} with total R{total}")
        return {"message": "Order created successfully", "order_id": result["id"]}
    except Exception as e:
        logging.exception("❌ Order creation failed")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("")
@handle_db_errors(entity="orders", action="fetching")
async def get_orders():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT o.id, o.order_number, o.status, o.created_date, o.received_date, o.total,
               o.order_note, o.note_to_supplier, o.supplier_id, o.requester_id,
               s.name as supplier_name, r.name as requester_name
        FROM orders o
        LEFT JOIN suppliers s ON o.supplier_id = s.id
        LEFT JOIN requesters r ON o.requester_id = r.id
    """)
    rows = cursor.fetchall()
    conn.close()
    result = [dict(row) for row in rows]
    log_success("orders", "fetched", f"{len(result)} items")
    return {"orders": result}

@router.get("/{order_id}")
@handle_db_errors(entity="order", action="fetching")
async def get_order(order_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT o.id, o.order_number, o.status, o.created_date, o.received_date, o.total,
               o.order_note, o.note_to_supplier, o.supplier_id, o.requester_id,
               s.name as supplier_name, r.name as requester_name
        FROM orders o
        LEFT JOIN suppliers s ON o.supplier_id = s.id
        LEFT JOIN requesters r ON o.requester_id = r.id
        WHERE o.id = ?
    """, (order_id,))
    row = cursor.fetchone()
    conn.close()
    if not row:
        log_warning("order", f"No order found with id {order_id}")
        raise HTTPException(status_code=404, detail="Order not found")
    log_success("order", "fetched", f"Order {row['order_number']}")
    return dict(row)

@router.put("/{order_id}")
@handle_db_errors(entity="order", action="updating")
async def update_order(order_id: int, order: OrderUpdate):
    conn = get_db_connection()
    cursor = conn.cursor()
    updates = {}
    if order.status:
        updates["status"] = order.status
    if order.order_note is not None:
        updates["order_note"] = order.order_note
    if order.note_to_supplier is not None:
        updates["note_to_supplier"] = order.note_to_supplier
    if order.supplier_id:
        updates["supplier_id"] = order.supplier_id
    if order.requester_id:
        updates["requester_id"] = order.requester_id

    if not updates:
        raise HTTPException(status_code=400, detail="No fields provided for update")

    set_clause = ", ".join(f"{k} = ?" for k in updates.keys())
    values = tuple(updates.values()) + (order_id,)
    cursor.execute(f"UPDATE orders SET {set_clause} WHERE id = ?", values)

    if cursor.rowcount == 0:
        conn.close()
        log_warning("order", f"No order found with id {order_id}")
        raise HTTPException(status_code=404, detail="Order not found")

    conn.commit()
    conn.close()
    log_success("order", "updated", f"Order {order_id} updated with fields {list(updates.keys())}")
    return {"message": "Order updated successfully"}

@router.get("/api/items_for_order/{order_id}")
@handle_db_errors(entity="order_items", action="fetching")
async def get_items_for_order(order_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, item_code, item_description, project, qty_ordered, qty_received,
               received_date, price, total
        FROM order_items
        WHERE order_id = ?
    """, (order_id,))
    rows = cursor.fetchall()
    conn.close()
    result = [dict(row) for row in rows]
    log_success("order_items", "fetched", f"{len(result)} items for order {order_id}")
    return {"items": result}

@router.post("/orders/receive/{order_id}")
@handle_db_errors(entity="receive", action="processing")
async def mark_items_as_received(order_id: int, payload: ReceivePayload):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    for item in payload.items:
        cursor.execute("""
            UPDATE order_items
            SET qty_received = ?, received_date = ?
            WHERE id = ? AND order_id = ?
        """, (item.qty_received, datetime.now().strftime("%Y-%m-%d"), item.item_id, order_id))

    cursor.execute("""
        UPDATE orders
        SET status = 'Received', received_date = ?
        WHERE id = ? AND status IN ('Pending', 'Awaiting Authorisation')
    """, (datetime.now().strftime("%Y-%m-%d"), order_id))

    conn.commit()
    conn.close()
    log_success("receive", "processed", f"Marked {len(payload.items)} items as received")
    return {"message": "Items marked as received"}

@router.get("/api/received_orders")
@handle_db_errors(entity="orders", action="fetching received")
async def get_received_orders():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT o.id, o.order_number, o.status, o.created_date, o.received_date, o.total,
               o.order_note, o.note_to_supplier, o.supplier_id, o.requester_id,
               s.name as supplier, r.name as requester
        FROM orders o
        LEFT JOIN suppliers s ON o.supplier_id = s.id
        LEFT JOIN requesters r ON o.requester_id = r.id
        WHERE o.status IN ('Received', 'Partially Received')
        ORDER BY o.order_number ASC
    """)
    rows = cursor.fetchall()
    conn.close()
    result = [dict(row) for row in rows]
    log_success("received_orders", "fetched", f"{len(result)} received/partial orders")
    return {"orders": result}

@router.get("/api/receipt_logs/{order_id}")
@handle_db_errors(entity="received_item_logs", action="fetching")
async def get_receipt_logs(order_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT ril.order_item_id, ril.qty_received, ril.received_date, u.username
        FROM received_item_logs ril
        LEFT JOIN users u ON ril.received_by_user_id = u.id
        WHERE ril.order_item_id IN (
            SELECT id FROM order_items WHERE order_id = ?
        )
        ORDER BY ril.received_date ASC
    """, (order_id,))
    rows = cursor.fetchall()
    conn.close()

    result = [dict(row) for row in rows]
    log_success("receipt_logs", "fetched", f"{len(result)} logs for order {order_id}")
    return {"logs": result}

@router.get("/api/audit_trail_orders")
@handle_db_errors(entity="orders", action="fetching all")
async def get_audit_trail_orders():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT o.id, o.order_number, o.status, o.created_date, o.received_date, o.total,
               o.order_note, o.note_to_supplier, o.supplier_id, o.requester_id,
               s.name as supplier, r.name as requester
        FROM orders o
        LEFT JOIN suppliers s ON o.supplier_id = s.id
        LEFT JOIN requesters r ON o.requester_id = r.id
        ORDER BY o.created_date DESC
    """)
    rows = cursor.fetchall()
    conn.close()
    result = [dict(row) for row in rows]
    log_success("audit_trail_orders", "fetched", f"{len(result)} total orders for audit trail")
    return {"orders": result}


📄 backend/endpoints/pending_order_pdf_generator.py
------------------------------------------------------------
# File: backend/endpoints/pending_order_pdf_generator.py

from fastapi import APIRouter, HTTPException
from fastapi.responses import StreamingResponse
from weasyprint import HTML
from jinja2 import Environment, FileSystemLoader
from backend.database import get_db_connection
import os
import io
import logging

router = APIRouter()

TEMPLATE_PATH = os.path.join(os.path.dirname(__file__), "../../frontend/templates")
LOGO_PATH = "file:///Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/images/universal_logo.jpg"

env = Environment(loader=FileSystemLoader(TEMPLATE_PATH))

@router.get("/generate_pdf_for_order/{order_id}")
async def generate_pdf_for_order(order_id: int):
    try:
        template = env.get_template("pdf_template.html")

        with get_db_connection() as conn:
            conn.row_factory = lambda cursor, row: dict(zip([col[0] for col in cursor.description], row))
            cursor = conn.cursor()

            # Main order info + supplier and requester names
            cursor.execute("""
                SELECT o.*, s.name AS supplier, r.name AS requester
                FROM orders o
                LEFT JOIN suppliers s ON o.supplier_id = s.id
                LEFT JOIN requesters r ON o.requester_id = r.id
                WHERE o.id = ?
            """, (order_id,))
            order = cursor.fetchone()
            if not order:
                raise HTTPException(status_code=404, detail="Order not found")

            logging.info(f"Generating PDF for order_id={order_id}, order_number={order.get('order_number', '?')}")

            # Line items
            cursor.execute("SELECT * FROM order_items WHERE order_id = ?", (order_id,))
            items = cursor.fetchall()

            # Compute item totals if not present
            for item in items:
                try:
                    qty = float(item.get("qty_ordered", 0))
                    price = float(item.get("price", 0))
                    item["total"] = qty * price
                except Exception:
                    item["total"] = 0.0

            # Company info
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            business_details = cursor.fetchone()
            if not business_details:
                raise HTTPException(status_code=404, detail="Business details not found")

        html = template.render(
            order=order,
            items=items,
            business_details=business_details,
            logo_path=LOGO_PATH,
            note_to_supplier=order.get("note_to_supplier", "")
        )

        pdf_io = io.BytesIO()
        HTML(string=html).write_pdf(pdf_io)
        pdf_io.seek(0)

        return StreamingResponse(pdf_io, media_type="application/pdf", headers={
            "Content-Disposition": f"inline; filename=order_{order_id}.pdf"
        })

    except Exception as e:
        logging.exception(f"PDF generation failed for order {order_id}")
        raise HTTPException(status_code=500, detail=f"Failed to generate PDF: {str(e)}")


📄 frontend/static/js/components/expand_line_items.js
------------------------------------------------------------
// Remove the 'export' keyword here
async function expandLineItemsWithReceipts(orderId, iconElement) {
  console.log(`Expanding with receipts for order ID: ${orderId}`);
  const currentRow = iconElement.closest("tr");
  if (!currentRow) {
    throw new Error("Could not find parent table row for icon element.");
  }

  const existingDetailRow = document.getElementById(`receipt-items-row-${orderId}`);
  if (existingDetailRow) {
    const isHidden = existingDetailRow.style.display === "none";
    existingDetailRow.style.display = isHidden ? "table-row" : "none";
    iconElement.textContent = isHidden ? "⬆️" : "⬇️";
    return;
  }

  try {
    const [itemsRes, logsRes] = await Promise.all([
      fetch(`/orders/api/items_for_order/${orderId}`),
      fetch(`/orders/api/receipt_logs/${orderId}`)
    ]);

    if (!itemsRes.ok || !logsRes.ok) {
      const itemsError = itemsRes.ok ? "" : await itemsRes.text();
      const logsError = logsRes.ok ? "" : await logsRes.text();
      throw new Error(
        `Fetch error: items ${itemsRes.status} (${itemsError}), logs ${logsRes.status} (${logsError})`
      );
    }

    const itemsData = await itemsRes.json().catch((err) => {
      throw new Error(`Failed to parse items JSON: ${err.message}`);
    });
    const logsData = await logsRes.json().catch((err) => {
      throw new Error(`Failed to parse logs JSON: ${err.message}`);
    });
    const receiptLogs = logsData.logs || [];

    const logMap = {};
    for (const log of receiptLogs) {
      if (!log.order_item_id) {
        console.warn(`Skipping log with missing order_item_id:`, log);
        continue;
      }
      if (!logMap[log.order_item_id]) logMap[log.order_item_id] = [];
      logMap[log.order_item_id].push(log);
    }

    const newRow = document.createElement("tr");
    newRow.id = `receipt-items-row-${orderId}`;
    const cell = document.createElement("td");
    cell.colSpan = currentRow.children.length;
    cell.style.padding = "1rem";

    if (!itemsData.items || itemsData.items.length === 0) {
      cell.innerHTML = "<em>No items found.</em>";
    } else {
      const table = document.createElement("table");
      table.style.width = "100%";
      table.style.borderCollapse = "collapse";
      table.style.marginTop = "0.5rem";

      const header = document.createElement("tr");
      header.style.backgroundColor = "#f0f0f0";
      header.style.fontWeight = "bold";
      ["Item Code", "Description", "Qty Ordered", "Price", "Total", "Receipts"].forEach((text) => {
        const th = document.createElement("td");
        th.textContent = text;
        header.appendChild(th);
      });
      table.appendChild(header);

      itemsData.items.forEach((item) => {
        const row = document.createElement("tr");

        const cells = [
          item.item_code || "N/A",
          item.item_description || "N/A",
          item.qty_ordered || 0,
          typeof item.price === "number" ? `R${item.price.toFixed(2)}` : "R0.00",
          typeof item.total === "number" ? `R${item.total.toFixed(2)}` : "R0.00",
        ];

        cells.forEach((text) => {
          const td = document.createElement("td");
          td.textContent = text;
          row.appendChild(td);
        });

        const logCell = document.createElement("td");
        const logs = logMap[item.id] || [];
        if (logs.length === 0) {
          logCell.textContent = "-";
        } else {
          const subTable = document.createElement("table");
          subTable.style.width = "100%";
          subTable.style.borderCollapse = "collapse";
          const subHeader = document.createElement("tr");
          ["Qty", "Date", "User"].forEach((label) => {
            const sh = document.createElement("td");
            sh.style.fontWeight = "bold";
            sh.textContent = label;
            subHeader.appendChild(sh);
          });
          subTable.appendChild(subHeader);

          logs.forEach((log) => {
            const logRow = document.createElement("tr");
            [log.qty_received, log.received_date, log.username || "N/A"].forEach((val) => {
              const td = document.createElement("td");
              td.textContent = val || "N/A";
              logRow.appendChild(td);
            });
            subTable.appendChild(logRow);
          });

          logCell.appendChild(subTable);
        }

        row.appendChild(logCell);
        table.appendChild(row);
      });

      cell.appendChild(table);
    }

    newRow.appendChild(cell);
    if (!currentRow.parentNode) {
      throw new Error("Parent node for current row not found.");
    }
    currentRow.parentNode.insertBefore(newRow, currentRow.nextSibling);
    iconElement.textContent = "⬆️";
  } catch (err) {
    console.error("❌ Error expanding received order:", err);
    alert(`❌ Could not expand received order: ${err.message}`);
  }
}

// Export all names in a single block
export {
  expandLineItemsWithReceipts,
  expandLineItemsWithReceipts as expandLineItems,
  expandLineItemsWithReceipts as expandLineItemsForAudit,
};

📦 DATABASE SCHEMA: data/orders.db
============================================================

🔸 Table: requesters
  id (INTEGER)
  name (TEXT)

🔸 Table: sqlite_sequence
  name ()
  seq ()

🔸 Table: suppliers
  id (INTEGER)
  account_number (TEXT)
  name (TEXT)
  telephone (TEXT)
  vat_number (TEXT)
  registration_number (TEXT)
  email (TEXT)
  contact_name (TEXT)
  contact_telephone (TEXT)
  address_line1 (TEXT)
  address_line2 (TEXT)
  address_line3 (TEXT)
  postal_code (TEXT)

🔸 Table: orders
  id (INTEGER)
  order_number (TEXT)
  status (TEXT)
  created_date (TEXT)
  received_date (TEXT)
  total (REAL)
  order_note (TEXT)
  note_to_supplier (TEXT)
  supplier_id (INTEGER)
  requester_id (INTEGER)
  required_auth_band (INTEGER)

🔸 Table: order_items
  id (INTEGER)
  order_id (INTEGER)
  item_code (TEXT)
  item_description (TEXT)
  project (TEXT)
  qty_ordered (REAL)
  qty_received (REAL)
  received_date (TEXT)
  price (REAL)
  total (REAL)

🔸 Table: attachments
  id (INTEGER)
  order_id (INTEGER)
  filename (TEXT)
  file_path (TEXT)
  upload_date (TEXT)

🔸 Table: audit_trail
  id (INTEGER)
  order_id (INTEGER)
  action (TEXT)
  details (TEXT)
  action_date (TEXT)
  user_id (INTEGER)

🔸 Table: projects
  id (INTEGER)
  project_code (TEXT)
  project_name (TEXT)

🔸 Table: items
  id (INTEGER)
  item_code (TEXT)
  item_description (TEXT)

🔸 Table: business_details
  id (INTEGER)
  company_name (TEXT)
  address_line1 (TEXT)
  address_line2 (TEXT)
  city (TEXT)
  province (TEXT)
  postal_code (TEXT)
  telephone (TEXT)
  vat_number (TEXT)

🔸 Table: received_item_logs
  id (INTEGER)
  order_item_id (INTEGER)
  qty_received (REAL)
  received_by_user_id (INTEGER)
  received_date (TEXT)

🔸 Table: settings
  id (INTEGER)
  order_number_start (TEXT)
  auth_threshold_1 (INTEGER)
  auth_threshold_2 (INTEGER)
  auth_threshold_3 (INTEGER)
  auth_threshold_4 (INTEGER)

🔸 Table: users
  id (INTEGER)
  username (TEXT)
  password_hash (TEXT)
  rights (TEXT)
  auth_threshold_band (INTEGER)

🌲 PROJECT TREE (depth=4)
============================================================
.
├── backend
│   ├── __pycache__
│   │   ├── database.cpython-313.pyc
│   │   └── main.cpython-313.pyc
│   ├── database.py
│   ├── endpoints
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-313.pyc
│   │   │   ├── admin.cpython-313.pyc
│   │   │   ├── auth.cpython-313.pyc
│   │   │   ├── html_routes.cpython-313.pyc
│   │   │   ├── new_order_pdf_generator.cpython-313.pyc
│   │   │   ├── order_attachments.cpython-313.pyc
│   │   │   ├── order_email.cpython-313.pyc
│   │   │   ├── order_queries.cpython-313.pyc
│   │   │   ├── order_receiving.cpython-313.pyc
│   │   │   ├── orders.cpython-313.pyc
│   │   │   ├── pending_order_pdf_generator.cpython-313.pyc
│   │   │   └── utils.cpython-313.pyc
│   │   ├── admin.py
│   │   ├── auth.py
│   │   ├── html_routes.py
│   │   ├── lookups
│   │   │   ├── __init__.py
│   │   │   ├── __pycache__
│   │   │   │   ├── __init__.cpython-313.pyc
│   │   │   │   ├── business_details.cpython-313.pyc
│   │   │   │   ├── items.cpython-313.pyc
│   │   │   │   ├── projects.cpython-313.pyc
│   │   │   │   ├── requesters.cpython-313.pyc
│   │   │   │   ├── settings.cpython-313.pyc
│   │   │   │   ├── suppliers.cpython-313.pyc
│   │   │   │   └── users.cpython-313.pyc
│   │   │   ├── business_details.py
│   │   │   ├── items.py
│   │   │   ├── projects.py
│   │   │   ├── requesters.py
│   │   │   ├── settings.py
│   │   │   ├── suppliers.py
│   │   │   └── users.py
│   │   ├── mobile
│   │   │   ├── __pycache__
│   │   │   │   └── awaiting_authorisation.cpython-313.pyc
│   │   │   └── awaiting_authorisation.py
│   │   ├── new_order_pdf_generator.py
│   │   ├── order_attachments.py
│   │   ├── order_email.py
│   │   ├── order_notes.py
│   │   ├── order_queries.py
│   │   ├── order_receiving.py
│   │   ├── orders.py
│   │   ├── pending_order_pdf_generator.py
│   │   ├── users.py
│   │   ├── utils.py
│   │   └── whatsapp.py
│   ├── main.py
│   ├── scrapers
│   ├── twilio
│   │   ├── __init__.py
│   │   └── twilio_utils.py
│   ├── utils
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-313.pyc
│   │   │   ├── db_utils.cpython-313.pyc
│   │   │   ├── order_utils.cpython-313.pyc
│   │   │   └── send_email.cpython-313.pyc
│   │   ├── db_utils.py
│   │   ├── order_utils.py
│   │   └── send_email.py
│   └── utils.py
├── bootstrap_admin_user.py
├── data
│   ├── orders_backup_20250509_081210.db
│   ├── orders_backup_20250509_081218.db
│   ├── orders_backup_before_reset_20250519_105625.db
│   ├── orders.db
│   ├── pdfs
│   │   ├── order_URC1200.pdf
│   │   ├── order_URC1201.pdf
│   │   └── order_URC1203.pdf
│   ├── printouts
│   │   ├── order_1.txt
│   │   ├── order_3.txt
│   │   └── order_7.txt
│   ├── test_orders.db
│   └── uploads
│       ├── 101_2025-05-07_11-05.pdf
│       ├── 101_Screenshot_2025-05-07_at_13.34.24.png
│       ├── 13_Screenshot_2025-04-23_at_05.19.18.png
│       ├── 14_Screenshot_2025-04-23_at_05.19.18.png
│       ├── 17_Intimisso.pdf
│       ├── 18_Hydehurst RC- Proof of submission.pdf
│       ├── 19_Fidessa Consulting.PDF
│       ├── 20_test_invoice.pdf
│       ├── 21_Fidessa Consulting.PDF
│       ├── 21_test_invoice.pdf
│       ├── 22_Hydehurst RC- Proof of submission.pdf
│       ├── 24_Fidessa Consulting.PDF
│       ├── 25_Screenshot 2025-04-20 at 17.12.14.png
│       ├── 26_Intimisso.pdf
│       ├── 27_test_invoice.pdf
│       ├── 28_Deposit - 2.pdf
│       ├── 28_test_invoice.pdf
│       ├── 30_2025-04-22_18-29.pdf
│       ├── 30_2025-04-22_18-44_1.pdf
│       ├── 30_2025-04-22_18-44.pdf
│       ├── 30_Intimisso.pdf
│       ├── 31_Screenshot_2025-04-23_at_05.19.18.png
│       ├── 42_Intimisso.pdf
│       ├── 43_Intimisso.pdf
│       ├── 44_order_URC1201.pdf
│       └── test_invoice.pdf
├── frontend
│   ├── static
│   │   ├── css
│   │   │   └── style.css
│   │   ├── images
│   │   │   └── universal_logo.jpg
│   │   ├── js
│   │   │   ├── audit_trail.js
│   │   │   ├── authorisations_per_user.js
│   │   │   ├── components
│   │   │   │   ├── attachment_modal.js
│   │   │   │   ├── expand_line_items.js
│   │   │   │   ├── order_note_modal.js
│   │   │   │   ├── pdf_modal.js
│   │   │   │   ├── receive_modal.js
│   │   │   │   ├── shared_filters.js
│   │   │   │   └── utils.js
│   │   │   ├── login.js
│   │   │   ├── maintenance_screen
│   │   │   │   ├── business_details.js
│   │   │   │   ├── index.js
│   │   │   │   ├── items.js
│   │   │   │   ├── projects.js
│   │   │   │   ├── requesters.js
│   │   │   │   ├── settings.js
│   │   │   │   ├── suppliers.js
│   │   │   │   └── users.js
│   │   │   ├── maintenance.js
│   │   │   ├── new_order_main.js
│   │   │   ├── new_order_modals.js
│   │   │   ├── new_order_screen
│   │   │   │   ├── pdf_utils.js
│   │   │   │   └── submit_utils.js
│   │   │   ├── partially_delivered.js
│   │   │   ├── pending_orders.js
│   │   │   ├── received_orders.js
│   │   │   └── send_email.js
│   │   └── mobile
│   │       ├── css
│   │       │   └── authorisations.css
│   │       └── js
│   │           └── authorisations_screen
│   └── templates
│       ├── _tab_nav.html
│       ├── audit_trail.html
│       ├── authorisations_per_user.html
│       ├── home.html
│       ├── index.html
│       ├── login.html
│       ├── maintenance.html
│       ├── mobile
│       │   ├── authorisations.html
│       │   └── css
│       ├── new_order.html
│       ├── partially_delivered.html
│       ├── pdf_template.html
│       ├── pending_orders.html
│       ├── print_template.html
│       └── received_orders.html
├── logs
│   ├── client.log
│   ├── db_activity_log.txt
│   ├── new_orders_log.txt
│   ├── order_receiving_log.txt
│   ├── partially_delivered_log.txt
│   ├── route_audit.log
│   └── server.log
├── requirements.txt
├── scripts
│   ├── __pycache__
│   │   └── add_debug_validation_handler.cpython-313.pyc
│   ├── add_debug_validation_handler.py
│   ├── database_scripts
│   │   ├── clear_database_tables.py
│   │   ├── print_all_data.py
│   │   └── seed_static_data.py
│   ├── dump_scripts
│   │   ├── individual_screens
│   │   │   ├── output_all_mobile_scripts.py
│   │   │   ├── output_all_pdf_scripts.py
│   │   │   ├── output_audit_trail_screen_files.py
│   │   │   ├── output_authorisations_per_user.py
│   │   │   ├── output_login_screen_files.py
│   │   │   ├── output_maintenance_screen_files.py
│   │   │   ├── output_new_order_screen.py
│   │   │   └── tree_dependencies_database.py
│   │   └── mother_output_all_files_code_to_text.py
│   ├── old_scripts
│   │   ├── find_unused_endpoints.py
│   │   ├── find_unused_project_files.py
│   │   ├── integration_tests.py
│   │   └── test_pipeline_end_to_end.py
│   ├── pull_and_start.py
│   ├── push_and_leave.py
│   └── start_server.py
├── scripts_for_each_screen
│   └── output_authorisations_per_user.txt
├── scripts_for_entire_project
├── setup_env.py
└── venv
    ├── bin
    │   ├── activate
    │   ├── activate.csh
    │   ├── activate.fish
    │   ├── Activate.ps1
    │   ├── dotenv
    │   ├── fastapi
    │   ├── fonttools
    │   ├── normalizer
    │   ├── pip
    │   ├── pip3
    │   ├── pip3.13
    │   ├── pyftmerge
    │   ├── pyftsubset
    │   ├── python -> python3.13
    │   ├── python3 -> python3.13
    │   ├── python3.13 -> /opt/homebrew/opt/python@3.13/bin/python3.13
    │   ├── ttx
    │   ├── uvicorn
    │   └── weasyprint
    ├── include
    │   └── python3.13
    ├── lib
    │   └── python3.13
    │       └── site-packages
    │           ├── __pycache__
    │           ├── _brotli.cpython-313-darwin.so
    │           ├── _cffi_backend.cpython-313-darwin.so
    │           ├── aiohappyeyeballs
    │           ├── aiohappyeyeballs-2.6.1.dist-info
    │           ├── aiohttp
    │           ├── aiohttp_retry
    │           ├── aiohttp_retry-2.9.1.dist-info
    │           ├── aiohttp-3.11.18.dist-info
    │           ├── aiosignal
    │           ├── aiosignal-1.3.2.dist-info
    │           ├── annotated_types
    │           ├── annotated_types-0.7.0.dist-info
    │           ├── anyio
    │           ├── anyio-4.9.0.dist-info
    │           ├── attr
    │           ├── attrs
    │           ├── attrs-25.3.0.dist-info
    │           ├── bcrypt
    │           ├── bcrypt-4.3.0.dist-info
    │           ├── Brotli-1.1.0.dist-info
    │           ├── brotli.py
    │           ├── certifi
    │           ├── certifi-2025.4.26.dist-info
    │           ├── cffi
    │           ├── cffi-1.17.1.dist-info
    │           ├── charset_normalizer
    │           ├── charset_normalizer-3.4.2.dist-info
    │           ├── click
    │           ├── click-8.1.8.dist-info
    │           ├── cssselect2
    │           ├── cssselect2-0.8.0.dist-info
    │           ├── dotenv
    │           ├── fastapi
    │           ├── fastapi-0.115.12.dist-info
    │           ├── fontTools
    │           ├── fonttools-4.57.0.dist-info
    │           ├── frozenlist
    │           ├── frozenlist-1.6.0.dist-info
    │           ├── h11
    │           ├── h11-0.16.0.dist-info
    │           ├── idna
    │           ├── idna-3.10.dist-info
    │           ├── itsdangerous
    │           ├── itsdangerous-2.2.0.dist-info
    │           ├── jinja2
    │           ├── jinja2-3.1.6.dist-info
    │           ├── jwt
    │           ├── markupsafe
    │           ├── MarkupSafe-3.0.2.dist-info
    │           ├── multidict
    │           ├── multidict-6.4.3.dist-info
    │           ├── multipart
    │           ├── PIL
    │           ├── pillow-11.2.1.dist-info
    │           ├── pip
    │           ├── pip-25.1.1.dist-info
    │           ├── propcache
    │           ├── propcache-0.3.1.dist-info
    │           ├── pycparser
    │           ├── pycparser-2.22.dist-info
    │           ├── pydantic
    │           ├── pydantic_core
    │           ├── pydantic_core-2.33.2.dist-info
    │           ├── pydantic-2.11.4.dist-info
    │           ├── pydyf
    │           ├── pydyf-0.11.0.dist-info
    │           ├── PyJWT-2.10.1.dist-info
    │           ├── pyphen
    │           ├── pyphen-0.17.2.dist-info
    │           ├── python_dotenv-1.1.0.dist-info
    │           ├── python_multipart
    │           ├── python_multipart-0.0.20.dist-info
    │           ├── requests
    │           ├── requests-2.32.3.dist-info
    │           ├── sniffio
    │           ├── sniffio-1.3.1.dist-info
    │           ├── starlette
    │           ├── starlette-0.46.2.dist-info
    │           ├── tinycss2
    │           ├── tinycss2-1.4.0.dist-info
    │           ├── tinyhtml5
    │           ├── tinyhtml5-2.0.0.dist-info
    │           ├── twilio
    │           ├── twilio-9.6.0.dist-info
    │           ├── typing_extensions-4.13.2.dist-info
    │           ├── typing_extensions.py
    │           ├── typing_inspection
    │           ├── typing_inspection-0.4.0.dist-info
    │           ├── urllib3
    │           ├── urllib3-2.4.0.dist-info
    │           ├── uvicorn
    │           ├── uvicorn-0.34.2.dist-info
    │           ├── weasyprint
    │           ├── weasyprint-65.1.dist-info
    │           ├── webencodings
    │           ├── webencodings-0.5.1.dist-info
    │           ├── yarl
    │           ├── yarl-1.20.0.dist-info
    │           ├── zopfli
    │           └── zopfli-0.2.3.post1.dist-info
    ├── pyvenv.cfg
    └── share
        └── man
            └── man1
                └── ttx.1

148 directories, 198 files
