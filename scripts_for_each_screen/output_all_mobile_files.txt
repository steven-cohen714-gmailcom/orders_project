📄 frontend/static/css/style.css
------------------------------------------------------------
  body {
    font-family: Arial, sans-serif;
    margin: 2rem;
    background-color: #f4f6f8;
  }

  h2 {
    margin-bottom: 1.5rem;
    font-size: 1.8rem;
    color: #1a3c5e;
  }

  /* ------------------ TABLE ------------------ */
  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
    background-color: #fff;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    overflow: hidden;
  }

  th {
    background-color: #e8eef4;
    font-weight: 600;
    color: #1a3c5e;
    text-transform: none;
    font-size: 0.95rem;
    height: 48px;
  }

  td {
    border: 1px solid #e0e4e8;
    padding: 0.75rem;
    text-align: center;
    font-size: 0.95rem;
    color: #333;
  }

  /* Add spacing between buttons in table cells */
  td button {
    margin-right: 0.5rem;
  }

  td button:last-child {
    margin-right: 0;
  }

  /* Left-align all cells in maintenance screen tables */
  #users-table td,
  #requesters-table td,
  #items-table td,
  #suppliers-table td,
  #projects-table td {
    text-align: left;
  }

  /* ------------------ FILTERS ------------------ */
  .filters {
    margin-bottom: 1.5rem;
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    align-items: center;
    background-color: #fff;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .filters label {
    font-weight: 600;
    color: #1a3c5e;
    margin-right: 0.5rem;
    font-size: 0.95rem;
  }

  input[type="date"],
  input[type="text"],
  input[type="number"],
  select,
  textarea {
    padding: 0.6rem;
    font-size: 0.95rem;
    font-family: Arial, sans-serif;
    border: 1px solid #c7d0d9;
    border-radius: 6px;
    background-color: #fff;
    min-width: 180px;
    max-width: 240px;
    transition: border-color 0.2s;
  }

  input[type="date"]:focus,
  select:focus,
  input[type="text"]:focus,
  textarea:focus {
    outline: none;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px rgba(0, 102, 204, 0.2);
  }

  /* ------------------ BUTTONS ------------------ */
  button {
    padding: 0.6rem 1.5rem;
    cursor: pointer;
    background-color: #0066cc;
    color: #fff;
    border: none;
    border-radius: 6px;
    font-size: 0.95rem;
    font-weight: 500;
    transition: background-color 0.2s;
  }

  button:hover {
    background-color: #0055aa;
  }

  /* ------------------ ICONS ------------------ */
  .expand-icon,
  .clip-icon,
  .eye-icon,
  .note-icon,
  .supplier-note-icon,
  .receive-icon,
  .pdf-icon {
    cursor: pointer;
    font-size: 1.2rem;
    margin: 0 0.4rem;
    display: inline-block;
    color: #0066cc;
    transition: color 0.2s;
  }

  .expand-icon:hover,
  .clip-icon:hover,
  .eye-icon:hover,
  .note-icon:hover,
  .supplier-note-icon:hover,
  .receive-icon:hover {
    color: #003366;
  }

  .eye-icon.disabled {
    opacity: 0.3;
    cursor: default;
  }

  /* ------------------ LOGIN ------------------ */
  .login-box {
    background: white;
    padding: 2rem 3rem;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
    text-align: center;
    margin: 5rem auto;
  }

  .login-box h2 {
    margin-bottom: 1.5rem;
    font-size: 1.5rem;
    color: #333;
  }

  .login-box input {
    width: 100%;
    padding: 0.8rem;
    margin-bottom: 1.2rem;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1rem;
  }

  .login-box button {
    width: 100%;
    padding: 0.8rem;
    background-color: #0056b3;
    border: none;
    color: white;
    font-size: 1rem;
    border-radius: 5px;
    cursor: pointer;
  }

  .login-box button:hover {
    background-color: #004a99;
  }

  #login-error {
    margin-top: 0.5rem;
    color: red;
    font-size: 0.9rem;
  }

  /* ------------------ MAINTENANCE ------------------ */
  .tabs {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .tab {
    padding: 0.5rem 1rem;
    cursor: pointer;
    background: #ddd;
    border-radius: 4px 4px 0 0;
  }

  .tab.active {
    background: #007BFF;
    color: white;
  }

  .tab-content {
    display: none;
    padding: 1rem;
    border: 1px solid #ccc;
    border-radius: 0 4px 4px 4px;
    background-color: white;
  }

  .tab-content.active {
    display: block;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    font-weight: bold;
  }

  /* ------------------ NEW ORDER SCREEN ONLY ------------------ */
  .order-header {
    margin-bottom: 2rem;
  }

  .order-header label span {
    font-weight: bold;
    font-size: 1.05rem;
    margin-left: 0.5rem;
  }

  .form-row {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .column {
    flex: 1 1 240px;
    display: flex;
    flex-direction: column;
  }

  #note_to_supplier {
    min-height: 100px;
  }

  .delivery-block {
    margin-top: 2.5rem;
    margin-bottom: 2.5rem;
  }

  .add-item-block {
    margin-top: 2rem;
    margin-bottom: 2rem;
  }

  .summary {
    margin-bottom: 2rem;
  }

  .button-group {
    margin-top: 2rem;
  }

  /* Reusable table styling for modals */
  .receive-modal table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
    font-size: 14px;
  }

  .receive-modal th,
  .receive-modal td {
    border: 1px solid #ccc;
    padding: 8px;
    text-align: left;
  }

  .receive-modal input[type="number"] {
    width: 80px;
  }
  i:hover {
    cursor: pointer;
  }
  .note-icon:hover,
  .clip-icon:hover,
  .expand-icon:hover,
  .receive-icon:hover,
  .supplier-note-icon:hover {
    cursor: pointer;
  }
  .email-icon {
    cursor: pointer;
    margin-left: 5px;
    font-size: 1.2em;
  }
  .email-icon:hover {
    color: #007bff;
  }

  /* ------------------ FORM FIELD SPACING (MAINTENANCE) ------------------ */

  #settings .form-group label,
  #settings .form-group input {
    display: block;
    margin-bottom: 0.5rem;
  }

  #settings .form-group input {
    width: 250px;
    padding: 0.5rem;
  }

  #settings .form-group {
    margin-bottom: 1.2rem;
  }

  /* ------------------ BUSINESS DETAILS FORM SPACING ------------------ */

  #business_details .form-group label,
  #business_details .form-group input {
    display: block;
    margin-bottom: 0.5rem;
  }

  #business_details .form-group input {
    width: 280px;
    padding: 0.5rem;
  }

  #business_details .form-group {
    margin-bottom: 1.2rem;
  }

  /* ------------------ USERS TAB FORM SPACING ------------------ */

  #users .form-group label,
  #users .form-group input,
  #users .form-group select {
    display: block;
    margin-bottom: 0.5rem;
  }

  #users .form-group input,
  #users .form-group select {
    width: 280px;
    padding: 0.5rem;
  }

  #users .form-group {
    margin-bottom: 1.2rem;
  }

  .receive-icon.disabled {
  opacity: 0.4;
  pointer-events: none;
  cursor: not-allowed;
}


📄 backend/endpoints/html_routes.py
------------------------------------------------------------
from fastapi import APIRouter, Request, HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from backend.database import get_db_connection
import logging

# Logging setup
logging.basicConfig(
    filename="logs/server.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

router = APIRouter()
templates = Jinja2Templates(directory="frontend/templates")


@router.get("/orders/new", response_class=HTMLResponse)
async def new_order_page(request: Request):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            # Fetch requesters
            cursor.execute("SELECT id, name FROM requesters ORDER BY name")
            requesters = [dict(row) for row in cursor.fetchall()]

            # Fetch suppliers
            cursor.execute("SELECT id, name FROM suppliers ORDER BY name")
            suppliers = [dict(row) for row in cursor.fetchall()]

            # Fetch items
            cursor.execute("SELECT item_code, item_description FROM items ORDER BY item_code")
            items = [dict(row) for row in cursor.fetchall()]

            # Fetch projects
            cursor.execute("SELECT project_code, project_name FROM projects ORDER BY project_code")
            projects = [dict(row) for row in cursor.fetchall()]

            # Fetch business details
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            row = cursor.fetchone()
            if not row:
                logging.error("No business details found in database")
                raise HTTPException(status_code=500, detail="No business details found in database")

            business_details = dict(row)
            logging.info(f"Business details fetched: {business_details}")

        return templates.TemplateResponse(
            "new_order.html",
            {
                "request": request,
                "requesters": requesters,
                "suppliers": suppliers,
                "items": items,
                "projects": projects,
                "business_details": business_details
            }
        )
    except Exception as e:
        logging.error(f"Error rendering new order page: {str(e)}")
        raise


@router.get("/orders/pending_orders", response_class=HTMLResponse)
async def pending_orders_page(request: Request):
    try:
        return templates.TemplateResponse("pending_orders.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering pending orders page: {str(e)}")
        raise


@router.get("/mobile/authorisations", response_class=HTMLResponse)
async def mobile_authorisations_screen(request: Request):
    try:
        return templates.TemplateResponse("mobile/authorisations.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering mobile authorisations screen: {str(e)}")
        raise


@router.get("/orders/authorisations_per_user", response_class=HTMLResponse)
async def authorisations_per_user_screen(request: Request):
    try:
        return templates.TemplateResponse("authorisations_per_user.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering authorisations_per_user screen: {str(e)}")
        raise


# 🧠 IMPORTANT: Any route like `/orders/{order_id}` must come AFTER all fixed-path routes like `/orders/authorisations_per_user`
@router.get("/orders/{order_id}", response_class=HTMLResponse)
async def view_order_by_id(order_id: int, request: Request):
    try:
        # Placeholder view logic if needed
        return templates.TemplateResponse("order_detail.html", {"request": request, "order_id": order_id})
    except Exception as e:
        logging.error(f"Error rendering order detail page: {str(e)}")
        raise


📄 backend/endpoints/lookups/settings.py
------------------------------------------------------------
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from backend.database import get_db_connection

router = APIRouter()

# --- Schemas ---
class SettingsPayload(BaseModel):
    order_number_start: str
    auth_threshold_1: int
    auth_threshold_2: int
    auth_threshold_3: int
    auth_threshold_4: int

class OrderNumberPayload(BaseModel):
    order_number_start: str


# --- GET full settings ---
@router.get("/settings")
async def get_settings():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT order_number_start, auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4
        FROM settings WHERE id = 1
    """)
    row = cursor.fetchone()

    if row:
        settings = {
            "order_number_start": row["order_number_start"] or "URC1000",
            "auth_threshold_1": row["auth_threshold_1"] or 0,
            "auth_threshold_2": row["auth_threshold_2"] or 0,
            "auth_threshold_3": row["auth_threshold_3"] or 0,
            "auth_threshold_4": row["auth_threshold_4"] or 0
        }
    else:
        settings = {
            "order_number_start": "URC1000",
            "auth_threshold_1": 0,
            "auth_threshold_2": 0,
            "auth_threshold_3": 0,
            "auth_threshold_4": 0
        }
        cursor.execute("""
            INSERT INTO settings (id, order_number_start, auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4)
            VALUES (1, ?, ?, ?, ?, ?)
        """, (
            settings["order_number_start"],
            settings["auth_threshold_1"],
            settings["auth_threshold_2"],
            settings["auth_threshold_3"],
            settings["auth_threshold_4"]
        ))
        conn.commit()

    conn.close()
    return settings


# --- PUT full settings ---
@router.put("/settings")
async def update_settings(payload: SettingsPayload):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            UPDATE settings
            SET order_number_start = ?, auth_threshold_1 = ?, auth_threshold_2 = ?, auth_threshold_3 = ?, auth_threshold_4 = ?
            WHERE id = 1
        """, (
            payload.order_number_start,
            payload.auth_threshold_1,
            payload.auth_threshold_2,
            payload.auth_threshold_3,
            payload.auth_threshold_4
        ))
        if cursor.rowcount == 0:
            cursor.execute("""
                INSERT INTO settings (id, order_number_start, auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4)
                VALUES (1, ?, ?, ?, ?, ?)
            """, (
                payload.order_number_start,
                payload.auth_threshold_1,
                payload.auth_threshold_2,
                payload.auth_threshold_3,
                payload.auth_threshold_4
            ))
        conn.commit()
        return {"message": "Settings updated successfully"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()


# --- PUT order number only ---
@router.put("/order_number")
async def update_order_number(payload: OrderNumberPayload):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            UPDATE settings SET order_number_start = ? WHERE id = 1
        """, (payload.order_number_start,))
        if cursor.rowcount == 0:
            cursor.execute("""
                INSERT INTO settings (id, order_number_start)
                VALUES (1, ?)
            """, (payload.order_number_start,))
        conn.commit()
        return {"message": "Order number updated"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()


📄 backend/endpoints/lookups/users.py
------------------------------------------------------------
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, constr
from typing import Optional
from backend.database import get_db_connection
import bcrypt

router = APIRouter()

# ----------------------------
# Pydantic Models
# ----------------------------

class UserCreate(BaseModel):
    username: constr(strip_whitespace=True, min_length=1)
    password: constr(strip_whitespace=True, min_length=4)
    rights: str
    auth_threshold_band: Optional[int] = None

class UserUpdate(BaseModel):
    username: constr(strip_whitespace=True, min_length=1)
    password: Optional[constr(strip_whitespace=True, min_length=4)] = None
    rights: str
    auth_threshold_band: Optional[int] = None

# ----------------------------
# GET all users
# ----------------------------

@router.get("/users")
async def get_users():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, username, rights, auth_threshold_band FROM users")
    users = cursor.fetchall()
    conn.close()
    return {
        "users": [
            {
                "id": u[0],
                "username": u[1],
                "rights": u[2],
                "auth_threshold_band": u[3]
            } for u in users
        ]
    }

# ----------------------------
# POST: Add a new user
# ----------------------------

@router.post("/users")
async def add_user(payload: UserCreate):
    conn = get_db_connection()
    cursor = conn.cursor()

    password_hash = bcrypt.hashpw(payload.password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

    try:
        cursor.execute(
            "INSERT INTO users (username, password_hash, rights, auth_threshold_band) VALUES (?, ?, ?, ?)",
            (payload.username, password_hash, payload.rights, payload.auth_threshold_band)
        )
        conn.commit()
        return {"status": "User added successfully"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()

# ----------------------------
# PUT: Update an existing user
# ----------------------------

@router.put("/users/{user_id}")
async def update_user(user_id: int, payload: UserUpdate):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail="User not found")

        fields_to_update = {
            "username": payload.username,
            "rights": payload.rights,
            "auth_threshold_band": payload.auth_threshold_band
        }

        if payload.password and payload.password.strip():
            password_hash = bcrypt.hashpw(payload.password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            fields_to_update["password_hash"] = password_hash

        set_clause = ", ".join([f"{key} = ?" for key in fields_to_update])
        values = list(fields_to_update.values()) + [user_id]

        cursor.execute(f"UPDATE users SET {set_clause} WHERE id = ?", values)
        conn.commit()
        return {"status": "User updated successfully"}

    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()

# ----------------------------
# DELETE: Remove a user
# ----------------------------

@router.delete("/users/{user_id}")
async def delete_user(user_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
        if cursor.rowcount == 0:
            raise HTTPException(status_code=404, detail="User not found")
        conn.commit()
        return {"status": "User deleted successfully"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=400, detail=str(e))
    finally:
        conn.close()


📄 backend/endpoints/utils.py
------------------------------------------------------------
# backend/endpoints/utils.py

from fastapi import APIRouter, HTTPException, Request
import logging
from pathlib import Path
from pydantic import BaseModel
from typing import Dict, Any
import json

router = APIRouter(tags=["utils"])

# --- Setup Log File ---
log_path = Path("logs/client.log")
log_path.parent.mkdir(exist_ok=True)

# File logger for structured client logs
logger = logging.getLogger("client")
logger.setLevel(logging.INFO)
file_handler = logging.FileHandler(log_path)
file_handler.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
logger.addHandler(file_handler)


# --- Structured Log Endpoint ---
class ClientLog(BaseModel):
    level: str
    message: str
    details: Dict[str, Any]
    timestamp: str

@router.post("/log_client")
async def log_client(log: ClientLog) -> Dict[str, str]:
    """
    Log client-side messages to a server-side log file.

    Args:
        log: ClientLog object containing level, message, details, and timestamp.

    Returns:
        Dict with status message.

    Raises:
        HTTPException: If logging fails.
    """
    try:
        log_message = f"{log.message} | Details: {json.dumps(log.details)}"
        logger.log(
            getattr(logging, log.level.upper(), logging.INFO),
            log_message
        )
        return {"status": "Log recorded"}
    except Exception as e:
        logger.error(f"Failed to log client message: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Failed to log message: {str(e)}")


# --- Raw JS-Based Logging Endpoint (used by utils.js -> logToServer) ---
@router.post("/log")
async def log_from_frontend(request: Request):
    """
    Accept log submissions from frontend via utils.js and logToServer().
    """
    try:
        payload = await request.json()
        level = payload.get("level", "INFO").upper()
        message = payload.get("message", "")
        details = payload.get("details", {})

        log_entry = f"{level} | {message} | {json.dumps(details)}"

        if level == "ERROR":
            logger.error(log_entry)
        elif level == "WARNING":
            logger.warning(log_entry)
        else:
            logger.info(log_entry)

        return {"status": "ok"}
    except Exception as e:
        logger.exception("Failed to process /log call from frontend")
        raise HTTPException(status_code=500, detail=f"Failed to log message: {str(e)}")


📄 backend/endpoints/auth.py
------------------------------------------------------------
from fastapi import APIRouter, Request, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from backend.database import get_db_connection
import bcrypt
import json

router = APIRouter()
templates = Jinja2Templates(directory="frontend/templates")

@router.get("/", response_class=HTMLResponse)
async def login_page(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})

@router.post("/login")
async def login(request: Request):
    try:
        data = await request.json()
    except Exception:
        return JSONResponse(status_code=400, content={"error": "Invalid JSON payload"})

    username = data.get("username", "").strip().lower()
    password = data.get("password", "")

    if not username or not password:
        return JSONResponse(status_code=400, content={"error": "Username and password are required"})

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, username, password_hash, rights, auth_threshold_band FROM users WHERE username = ?",
            (username,)
        )
        user = cursor.fetchone()
        conn.close()

        if not user:
            return JSONResponse(status_code=401, content={"error": "Invalid username or password"})

        stored_hash = user["password_hash"]
        if not bcrypt.checkpw(password.encode("utf-8"), stored_hash.encode("utf-8")):
            return JSONResponse(status_code=401, content={"error": "Invalid username or password"})

        request.session["user"] = {
            "id": user["id"],
            "username": user["username"],
            "rights": user["rights"],
            "auth_threshold_band": user["auth_threshold_band"]
        }

        return JSONResponse(status_code=200, content={"success": True})

    except Exception as e:
        return JSONResponse(status_code=500, content={"error": f"Login failed due to server error: {str(e)}"})

@router.get("/logout")
async def logout(request: Request):
    request.session.clear()
    return JSONResponse(status_code=200, content={"message": "Logged out successfully"})


📄 backend/utils.py
------------------------------------------------------------
from fastapi import HTTPException, Depends
from functools import wraps
from contextlib import contextmanager
import sqlite3
import logging
from typing import List, Dict, Any
from backend.database import get_db_connection

# Logging setup
logging.basicConfig(filename="logs/server.log", level=logging.INFO,
                    format="%(asctime)s | %(levelname)s | %(message)s")

# Database dependency
@contextmanager
def db_session():
    conn = get_db_connection()
    try:
        yield conn
    finally:
        conn.close()

async def get_db():
    with db_session() as conn:
        yield conn

# Error handling decorator
def handle_db_errors(entity: str, action: str):
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except sqlite3.IntegrityError as e:
                logging.error(f"Integrity error {action} {entity}: {str(e)}")
                raise HTTPException(status_code=400, detail=f"{entity.capitalize()} could not be {action} (possible duplicate).")
            except sqlite3.Error as e:
                logging.error(f"Database error {action} {entity}: {str(e)}")
                raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
            except Exception as e:
                logging.error(f"Error {action} {entity}: {str(e)}")
                raise HTTPException(status_code=500, detail=f"Error {action} {entity}: {str(e)}")
        return wrapper
    return decorator

# Logging helpers
def log_success(entity: str, action: str, details: str):
    logging.info(f"{entity.capitalize()} {action}: {details}")

def log_warning(entity: str, message: str):
    logging.warning(f"{entity.capitalize()} {message}")

# Generic CRUD helpers
async def fetch_list(db: sqlite3.Connection, table: str, fields: List[str], response_key: str) -> Dict[str, List[Dict]]:
    cursor = db.cursor()
    cursor.execute(f"SELECT {', '.join(fields)} FROM {table}")
    rows = cursor.fetchall()
    result = [dict(zip(fields, row)) for row in rows]
    log_success(response_key, "fetched", f"{len(result)} items")
    return {response_key: result}

async def add_record(db: sqlite3.Connection, table: str, payload: Dict[str, Any], fields: List[str], log_message: str) -> Dict[str, str]:
    values = tuple(payload[field] for field in fields)
    placeholders = ", ".join(["?"] * len(fields))
    cursor = db.cursor()
    cursor.execute(f"INSERT INTO {table} ({', '.join(fields)}) VALUES ({placeholders})", values)
    db.commit()
    log_success(table, "added", log_message)
    return {"message": f"{table.capitalize()} added successfully"}

async def update_record(db: sqlite3.Connection, table: str, record_id: int, payload: Dict[str, Any], fields: List[str], log_message: str) -> Dict[str, str]:
    values = tuple(payload[field] for field in fields) + (record_id,)
    set_clause = ", ".join(f"{field} = ?" for field in fields)
    cursor = db.cursor()
    cursor.execute(f"UPDATE {table} SET {set_clause} WHERE id = ?", values)
    if cursor.rowcount == 0:
        log_warning(table, f"No {table} found with id {record_id}")
        raise HTTPException(status_code=404, detail=f"{table.capitalize()} not found")
    db.commit()
    log_success(table, "updated", log_message)
    return {"message": f"{table.capitalize()} updated successfully"}

📄 backend/database.py
------------------------------------------------------------
import sqlite3
from pathlib import Path
import logging

# Logging setup
logging.basicConfig(
    filename="logs/db_activity_log.txt",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

DB_PATH = Path("data/orders.db")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            # Create requesters table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requesters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT
                )
            """)

            # Create suppliers table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS suppliers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    account_number TEXT,
                    name TEXT,
                    telephone TEXT,
                    vat_number TEXT,
                    registration_number TEXT,
                    email TEXT,
                    contact_name TEXT,
                    contact_telephone TEXT,
                    address_line1 TEXT,
                    address_line2 TEXT,
                    address_line3 TEXT,
                    postal_code TEXT
                )
            """)

            # Create orders table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_number TEXT,
                    status TEXT,
                    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    received_date TEXT,
                    total REAL,
                    order_note TEXT,
                    note_to_supplier TEXT,
                    supplier_id INTEGER,
                    requester_id INTEGER,
                    FOREIGN KEY (supplier_id) REFERENCES suppliers(id),
                    FOREIGN KEY (requester_id) REFERENCES requesters(id)
                )
            """)

            # Create order_items table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS order_items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    item_code TEXT,
                    item_description TEXT,
                    project TEXT,
                    qty_ordered REAL,
                    qty_received REAL,
                    received_date TEXT,
                    price REAL,
                    total REAL,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)

            # Create attachments table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS attachments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    filename TEXT NOT NULL,
                    file_path TEXT NOT NULL,
                    upload_date TEXT NOT NULL,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)

            # Create audit_trail table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS audit_trail (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    action TEXT,
                    details TEXT,
                    action_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    user_id INTEGER,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)

            # Create settings table
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS settings (
                id INTEGER PRIMARY KEY CHECK (id = 1),
                order_number_start TEXT,
                auth_threshold_1 INTEGER,
                auth_threshold_2 INTEGER,
                auth_threshold_3 INTEGER,
                auth_threshold_4 INTEGER
            )
            """)

            # Create users table with auth band
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                rights TEXT NOT NULL,
                auth_threshold_band INTEGER  -- Nullable, used to filter access on authorisation PWA
            )
            """)

            # Create projects table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS projects (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    project_code TEXT,
                    project_name TEXT
                )
            """)

            # Create items table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    item_code TEXT,
                    item_description TEXT
                )
            """)

            # Create business_details table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS business_details (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_name TEXT NOT NULL,
                    address_line1 TEXT,
                    address_line2 TEXT,
                    city TEXT,
                    province TEXT,
                    postal_code TEXT,
                    telephone TEXT,
                    vat_number TEXT
                )
            """)

            # Insert default business details if not exists
            cursor.execute("""
                INSERT OR IGNORE INTO business_details (
                    id, company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                ) VALUES (
                    1, 'Universal Recycling Company Pty Ltd', '123 Industrial Road', 'Unit 4', 'Cape Town', 'Western Cape', '8001', '+27 21 555 1234', 'VAT123456789'
                )
            """)

            conn.commit()
            logging.info("Database tables created successfully.")
    except sqlite3.Error as e:
        logging.error(f"Failed to initialize database: {str(e)}")
        raise

def determine_status_and_band(total: float) -> tuple[str, int]:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4 FROM settings WHERE id = 1")
        row = cursor.fetchone()
        if not row:
            raise ValueError("Authorization thresholds not configured.")

        thresholds = [row["auth_threshold_1"], row["auth_threshold_2"], row["auth_threshold_3"], row["auth_threshold_4"]]
        status = "Pending"
        required_band = 0

        if total > thresholds[0]:
            status = "Awaiting Authorisation"
            if total <= thresholds[1]:
                required_band = 1
            elif total <= thresholds[2]:
                required_band = 2
            elif total <= thresholds[3]:
                required_band = 3
            else:
                required_band = 4

        return status, required_band

def create_order(order_data: dict, items: list) -> dict:
    status, required_band = determine_status_and_band(order_data["total"])

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO orders (
                order_number, status, total, order_note, note_to_supplier,
                supplier_id, requester_id, required_auth_band
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            order_data["order_number"],
            status,
            order_data["total"],
            order_data["order_note"],
            order_data["note_to_supplier"],
            order_data["supplier_id"],
            order_data["requester_id"],
            required_band
        ))
        order_id = cursor.lastrowid

        for item in items:
            cursor.execute("""
                INSERT INTO order_items (
                    order_id, item_code, item_description, project,
                    qty_ordered, price, total
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                order_id,
                item["item_code"],
                item["item_description"],
                item["project"],
                item["qty_ordered"],
                item["price"],
                item["qty_ordered"] * item["price"]
            ))

        cursor.execute("""
            INSERT INTO audit_trail (order_id, action, details, user_id)
            VALUES (?, 'Created', ?, ?)
        """, (order_id, f"Order {order_data['order_number']} created", 0))

        conn.commit()

        cursor.execute("""
            SELECT id, order_number, status, created_date, total,
                   order_note, note_to_supplier, supplier_id,
                   requester_id, required_auth_band
            FROM orders WHERE id = ?
        """, (order_id,))
        order = cursor.fetchone()
        return dict(order)

def get_settings() -> dict:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT order_number_start, auth_threshold_1, auth_threshold_2,
                   auth_threshold_3, auth_threshold_4
            FROM settings
            WHERE id = 1
        """)
        row = cursor.fetchone()
        return dict(row) if row else {}

def update_settings(payload: dict):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO settings (
                id, order_number_start, auth_threshold_1, auth_threshold_2,
                auth_threshold_3, auth_threshold_4
            ) VALUES (?, ?, ?, ?, ?, ?)
            ON CONFLICT(id) DO UPDATE SET
                order_number_start = excluded.order_number_start,
                auth_threshold_1 = excluded.auth_threshold_1,
                auth_threshold_2 = excluded.auth_threshold_2,
                auth_threshold_3 = excluded.auth_threshold_3,
                auth_threshold_4 = excluded.auth_threshold_4
        """, (
            1,
            payload["order_number_start"],
            payload["auth_threshold_1"],
            payload["auth_threshold_2"],
            payload["auth_threshold_3"],
            payload["auth_threshold_4"]
        ))
        conn.commit()

def get_business_details() -> dict:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
            FROM business_details WHERE id = 1
        """)
        row = cursor.fetchone()
        return dict(row) if row else {}

📄 backend/main.py
------------------------------------------------------------
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse, Response
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.routing import APIRouter
from backend.endpoints import html_routes

from pathlib import Path
import logging
import sys
import os

# --- Database ---
from backend.database import init_db, get_db_connection

# --- Login Check Helper ---
def require_login(request: Request):
    if not request.session.get("user"):
        return RedirectResponse("/", status_code=302)
    return None

# --- Routers ---
from backend.endpoints import routers
from backend.endpoints.admin import admin_router
from backend.endpoints.auth import router as auth_router
from backend.endpoints.orders import router as orders_router
from backend.endpoints.new_order_pdf_generator import router as new_order_pdf_router
from backend.endpoints.pending_order_pdf_generator import router as pending_order_pdf_router
from backend.endpoints.order_queries import router as order_queries_router
from backend.endpoints.order_receiving import router as order_receiving_router
from backend.endpoints.order_attachments import router as attachments_router
from backend.endpoints.order_email import router as order_email_router
from backend.endpoints.utils import router as utils_router
from backend.endpoints.mobile.awaiting_authorisation import router as mobile_auth_router

# Allow scripts to import from parent
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from scripts.add_debug_validation_handler import install_validation_handler

# Setup logging
Path("logs").mkdir(exist_ok=True)
logging.basicConfig(
    filename="logs/server_startup.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

try:
    init_db()
    logging.info("✅ Database initialized successfully.")
except Exception as e:
    logging.exception("❌ Failed to initialize database")
    raise

# --- FastAPI App Init ---
app = FastAPI(
    debug=True,
    title="Universal Recycling Purchase Order System",
    description="Purchase Order management system for Universal Recycling"
)

install_validation_handler(app)

# --- Static and Upload Directories ---
app.mount("/static", StaticFiles(directory="frontend/static"), name="static")
app.mount("/data/uploads", StaticFiles(directory="data/uploads"), name="uploads")

# --- Middleware ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
app.add_middleware(SessionMiddleware, secret_key="your-new-secure-key", same_site="lax", https_only=False)

templates = Jinja2Templates(directory="frontend/templates")

# --- Static Routes Router ---
static_router = APIRouter()

@static_router.get("/home", response_class=HTMLResponse)
async def home(request: Request):
    if not request.session.get("user"):
        return RedirectResponse("/")
    logging.info("Rendering home page")
    return templates.TemplateResponse("home.html", {"request": request})

@static_router.get("/orders/new", response_class=HTMLResponse)
async def new_order_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect

    logging.info("Starting to render new order page")
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM requesters ORDER BY name")
            requesters = [dict(row) for row in cursor.fetchall()]
            cursor.execute("SELECT id, name FROM suppliers ORDER BY name")
            suppliers = [dict(row) for row in cursor.fetchall()]
            cursor.execute("SELECT item_code, item_description FROM items ORDER BY item_code")
            items = [dict(row) for row in cursor.fetchall()]
            cursor.execute("SELECT project_code, project_name FROM projects ORDER BY project_code")
            projects = [dict(row) for row in cursor.fetchall()]
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            row = cursor.fetchone()
            business_details = dict(row) if row else {
                "company_name": "Default Company",
                "address_line1": "N/A",
                "address_line2": "",
                "city": "N/A",
                "province": "N/A",
                "postal_code": "N/A",
                "telephone": "N/A",
                "vat_number": "N/A"
            }

        return templates.TemplateResponse("new_order.html", {
            "request": request,
            "requesters": requesters,
            "suppliers": suppliers,
            "items": items,
            "projects": projects,
            "business_details": business_details
        })

    except Exception as e:
        logging.error(f"Error rendering new order page: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Error rendering new order page: {str(e)}")

@static_router.get("/orders/pending_orders", response_class=HTMLResponse)
async def pending_orders_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("pending_orders.html", {"request": request})

@static_router.get("/orders/received_orders", response_class=HTMLResponse)
async def received_orders_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("received_orders.html", {"request": request})

@static_router.get("/orders/audit_trail", response_class=HTMLResponse)
async def audit_trail_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("audit_trail.html", {"request": request})

@static_router.get("/maintenance", response_class=HTMLResponse)
async def maintenance_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("maintenance.html", {"request": request})

@static_router.get("/orders/partially_delivered", response_class=HTMLResponse)
async def partially_delivered_page(request: Request):
    login_redirect = require_login(request)
    if login_redirect:
        return login_redirect
    return templates.TemplateResponse("partially_delivered.html", {"request": request})

@static_router.get("/favicon.ico")
async def favicon():
    favicon_path = Path("frontend/static/favicon.ico")
    if not favicon_path.exists():
        return {"error": "Favicon not found"}, 404
    try:
        with open(favicon_path, "rb") as f:
            content = f.read()
        return Response(content=content, media_type="image/x-icon")
    except Exception as e:
        logging.error(f"Error serving favicon: {str(e)}", exc_info=True)
        return {"error": "Failed to serve favicon"}, 500

# --- Include Routers ---
app.include_router(static_router)
app.include_router(mobile_auth_router)

for router in routers:
    if router is not order_queries_router and router is not orders_router and router is not attachments_router and router is not order_receiving_router:
        app.include_router(router, prefix="/lookups")

app.include_router(html_routes.router)
app.include_router(admin_router, prefix="/admin")
app.include_router(order_queries_router, prefix="/orders/api")
app.include_router(new_order_pdf_router, prefix="/orders/api")
app.include_router(auth_router)
app.include_router(orders_router, prefix="/orders")
app.include_router(attachments_router, prefix="/orders")
app.include_router(order_receiving_router, prefix="/orders")
app.include_router(utils_router)
app.include_router(order_email_router, prefix="/orders")
app.include_router(pending_order_pdf_router, prefix="/orders/api")

# --- Dev CLI ---
if __name__ == "__main__":
    import uvicorn
    try:
        logging.info("🚀 Starting Uvicorn server...")
        uvicorn.run(app, host="0.0.0.0", port=8004)
    except Exception as e:
        logging.exception("❌ Server failed to start")
        raise


📄 frontend/templates/mobile/authorisations.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mobile Authorisations</title>
  <link rel="stylesheet" href="/static/mobile/css/authorisations.css">
</head>
<body>
  <div class="mobile-container">
    <h2><span id="username-placeholder"></span>, please review the orders below which are waiting for you to authorise:</h2>
    <div class="order-headers">
      <span>Date</span>
      <span>Order #</span>
      <span>Total</span>
      <span>Actions</span>
    </div>
    <div id="order-list">Loading orders...</div>
  </div>

  <script type="module" src="/static/mobile/js/authorisations_screen/main.js"></script>
</body>
</html>


📄 frontend/static/mobile/js/authorisations_screen/main.js
------------------------------------------------------------
console.log("📱 Mobile authorisation screen loaded");

function formatDate(dateStr) {
  if (!dateStr) return "—";
  try {
    const date = new Date(dateStr);
    const day = date.getDate().toString().padStart(2, "0");
    const month = date.toLocaleString("default", { month: "short" });
    const year = date.getFullYear().toString().slice(-2);
    return `${day} ${month} ${year}`;
  } catch {
    return "—";
  }
}

document.addEventListener("DOMContentLoaded", async () => {
  const container = document.getElementById("order-list");

  // 🔍 Fetch username from session via backend
  try {
    const res = await fetch("/mobile/get_user_info");
    const user = await res.json();
    const username = user.username || "";
    const heading = document.querySelector("h2");
    if (heading) {
      heading.innerHTML = `<span style="font-weight: normal;">${username}</span>, please review the orders below which are waiting for you to authorise:`;
    }
  } catch (err) {
    console.error("❌ Failed to fetch user info:", err);
  }

  try {
    const res = await fetch("/orders/api/awaiting_authorisation");
    const data = await res.json();

    if (!Array.isArray(data)) {
      container.textContent = "❌ Invalid response from server.";
      console.error("Expected an array but got:", data);
      return;
    }

    if (data.length === 0) {
      container.textContent = "✅ No orders awaiting your authorisation.";
      return;
    }

    container.innerHTML = ""; // Clear "Loading orders..."

    data.forEach(order => {
      const item = document.createElement("div");
      item.className = "order-row";

      const dateFormatted = formatDate(order.created_date);

      item.innerHTML = `
        <span>${dateFormatted}</span>
        <span>${order.order_number}</span>
        <span>R${order.total}</span>
        <span class="buttons"></span>
      `;

      const viewBtn = document.createElement("button");
      viewBtn.textContent = "View PDF";
      viewBtn.onclick = () => window.open(`/orders/api/generate_pdf_for_order/${order.id}`, "_blank");

      const authBtn = document.createElement("button");
      authBtn.textContent = "Authorise";
      authBtn.onclick = async () => {
        try {
          const res = await fetch(`/orders/api/authorise_order/${order.id}`, {
            method: "POST"
          });
          const result = await res.json();
          if (result.status === "success") {
            authBtn.textContent = "✅ Authorised";
            authBtn.disabled = true;
            viewBtn.disabled = true;
            item.style.opacity = 0.6;
          } else {
            alert("❌ Failed to authorise: " + result.message);
          }
        } catch (err) {
          console.error(err);
          alert("❌ Error sending authorisation request.");
        }
      };

      item.querySelector(".buttons").appendChild(viewBtn);
      item.querySelector(".buttons").appendChild(authBtn);
      container.appendChild(item);
    });

  } catch (err) {
    container.textContent = "❌ Failed to load orders.";
    console.error("Fetch error:", err);
  }
});


📄 frontend/static/mobile/js/css/authorisations.css
------------------------------------------------------------
[ERROR] Could not read file: [Errno 2] No such file or directory: 'frontend/static/mobile/js/css/authorisations.css'


📄 backend/endpoints/mobile/awaiting_authorisation.py
------------------------------------------------------------
from fastapi import APIRouter, Request, HTTPException
from backend.database import get_db_connection
from datetime import datetime
from fastapi.responses import JSONResponse
import json
import logging

router = APIRouter()
logger = logging.getLogger("uvicorn")


@router.get("/mobile/get_user_info")
async def get_user_info(request: Request):
    user = request.session.get("user")
    if not user:
        raise HTTPException(status_code=401, detail="User not authenticated")

    logger.info(f"🔍 Session user before JSONResponse: {user}")
    return JSONResponse(content=user if isinstance(user, dict) else json.loads(user))


@router.get("/orders/api/awaiting_authorisation")
async def get_orders_awaiting_authorisation(request: Request):
    raw = request.session.get("user")
    try:
        user = json.loads(raw) if isinstance(raw, str) else raw
    except Exception:
        raise HTTPException(status_code=401, detail="Invalid session format")

    if not user:
        raise HTTPException(status_code=401, detail="Not logged in")

    band = user.get("auth_threshold_band")
    if band is None:
        raise HTTPException(status_code=403, detail="User does not have an authorisation band")

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT 
                o.id,
                o.order_number,
                o.total,
                o.created_date,
                o.status,
                o.required_auth_band,
                r.name AS requester_name,
                s.name AS supplier_name
            FROM orders o
            LEFT JOIN requesters r ON o.requester_id = r.id
            LEFT JOIN suppliers s ON o.supplier_id = s.id
            WHERE o.status = 'Awaiting Authorisation'
              AND o.required_auth_band = ?
            ORDER BY o.created_date DESC
        """, (band,))
        return [dict(row) for row in cursor.fetchall()]


@router.post("/orders/api/authorise_order/{order_id}")
async def authorise_order(order_id: int, request: Request):
    raw = request.session.get("user")
    try:
        user = json.loads(raw) if isinstance(raw, str) else raw
    except Exception:
        raise HTTPException(status_code=401, detail="Invalid session format")

    if not user:
        raise HTTPException(status_code=401, detail="Not logged in")

    username = user.get("username")
    user_id = user.get("id")

    with get_db_connection() as conn:
        cursor = conn.cursor()

        # Check if order exists and is still awaiting authorisation
        cursor.execute("SELECT status FROM orders WHERE id = ?", (order_id,))
        row = cursor.fetchone()
        if not row:
            raise HTTPException(status_code=404, detail="Order not found")
        if row["status"] != "Awaiting Authorisation":
            raise HTTPException(status_code=400, detail="Order is not in an authorisable state")

        # Update order status
        cursor.execute("""
            UPDATE orders
            SET status = 'Authorised'
            WHERE id = ?
        """, (order_id,))

        # Insert into audit trail
        cursor.execute("""
            INSERT INTO audit_trail (order_id, action, details, action_date, user_id)
            VALUES (?, 'Authorised', ?, ?, ?)
        """, (
            order_id,
            f"Order authorised by {username}",
            datetime.utcnow().isoformat(),
            user_id
        ))

        conn.commit()
        return {"status": "success", "message": "Order authorised"}


📦 DATABASE SCHEMA: data/orders.db
============================================================

🔸 Table: requesters
  id (INTEGER)
  name (TEXT)

🔸 Table: sqlite_sequence
  name ()
  seq ()

🔸 Table: suppliers
  id (INTEGER)
  account_number (TEXT)
  name (TEXT)
  telephone (TEXT)
  vat_number (TEXT)
  registration_number (TEXT)
  email (TEXT)
  contact_name (TEXT)
  contact_telephone (TEXT)
  address_line1 (TEXT)
  address_line2 (TEXT)
  address_line3 (TEXT)
  postal_code (TEXT)

🔸 Table: orders
  id (INTEGER)
  order_number (TEXT)
  status (TEXT)
  created_date (TEXT)
  received_date (TEXT)
  total (REAL)
  order_note (TEXT)
  note_to_supplier (TEXT)
  supplier_id (INTEGER)
  requester_id (INTEGER)
  required_auth_band (INTEGER)

🔸 Table: order_items
  id (INTEGER)
  order_id (INTEGER)
  item_code (TEXT)
  item_description (TEXT)
  project (TEXT)
  qty_ordered (REAL)
  qty_received (REAL)
  received_date (TEXT)
  price (REAL)
  total (REAL)

🔸 Table: attachments
  id (INTEGER)
  order_id (INTEGER)
  filename (TEXT)
  file_path (TEXT)
  upload_date (TEXT)

🔸 Table: audit_trail
  id (INTEGER)
  order_id (INTEGER)
  action (TEXT)
  details (TEXT)
  action_date (TEXT)
  user_id (INTEGER)

🔸 Table: projects
  id (INTEGER)
  project_code (TEXT)
  project_name (TEXT)

🔸 Table: items
  id (INTEGER)
  item_code (TEXT)
  item_description (TEXT)

🔸 Table: business_details
  id (INTEGER)
  company_name (TEXT)
  address_line1 (TEXT)
  address_line2 (TEXT)
  city (TEXT)
  province (TEXT)
  postal_code (TEXT)
  telephone (TEXT)
  vat_number (TEXT)

🔸 Table: received_item_logs
  id (INTEGER)
  order_item_id (INTEGER)
  qty_received (REAL)
  received_by_user_id (INTEGER)
  received_date (TEXT)

🔸 Table: settings
  id (INTEGER)
  order_number_start (TEXT)
  auth_threshold_1 (INTEGER)
  auth_threshold_2 (INTEGER)
  auth_threshold_3 (INTEGER)
  auth_threshold_4 (INTEGER)

🔸 Table: users
  id (INTEGER)
  username (TEXT)
  password_hash (TEXT)
  rights (TEXT)
  auth_threshold_band (INTEGER)

🌲 PROJECT TREE (depth=4)
============================================================
.
├── backend
│   ├── __pycache__
│   │   ├── database.cpython-313.pyc
│   │   └── main.cpython-313.pyc
│   ├── database.py
│   ├── endpoints
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-313.pyc
│   │   │   ├── admin.cpython-313.pyc
│   │   │   ├── auth.cpython-313.pyc
│   │   │   ├── html_routes.cpython-313.pyc
│   │   │   ├── new_order_pdf_generator.cpython-313.pyc
│   │   │   ├── order_attachments.cpython-313.pyc
│   │   │   ├── order_email.cpython-313.pyc
│   │   │   ├── order_queries.cpython-313.pyc
│   │   │   ├── order_receiving.cpython-313.pyc
│   │   │   ├── orders.cpython-313.pyc
│   │   │   └── pending_order_pdf_generator.cpython-313.pyc
│   │   ├── admin.py
│   │   ├── auth.py
│   │   ├── html_routes.py
│   │   ├── lookups
│   │   │   ├── __init__.py
│   │   │   ├── __pycache__
│   │   │   │   ├── __init__.cpython-313.pyc
│   │   │   │   ├── business_details.cpython-313.pyc
│   │   │   │   ├── items.cpython-313.pyc
│   │   │   │   ├── projects.cpython-313.pyc
│   │   │   │   ├── requesters.cpython-313.pyc
│   │   │   │   ├── settings.cpython-313.pyc
│   │   │   │   ├── suppliers.cpython-313.pyc
│   │   │   │   └── users.cpython-313.pyc
│   │   │   ├── business_details.py
│   │   │   ├── items.py
│   │   │   ├── projects.py
│   │   │   ├── requesters.py
│   │   │   ├── settings.py
│   │   │   ├── suppliers.py
│   │   │   └── users.py
│   │   ├── mobile
│   │   │   ├── __pycache__
│   │   │   │   └── awaiting_authorisation.cpython-313.pyc
│   │   │   └── awaiting_authorisation.py
│   │   ├── new_order_pdf_generator.py
│   │   ├── order_attachments.py
│   │   ├── order_email.py
│   │   ├── order_notes.py
│   │   ├── order_queries.py
│   │   ├── order_receiving.py
│   │   ├── orders.py
│   │   ├── pending_order_pdf_generator.py
│   │   ├── users.py
│   │   ├── utils.py
│   │   └── whatsapp.py
│   ├── main.py
│   ├── scrapers
│   ├── twilio
│   │   ├── __init__.py
│   │   └── twilio_utils.py
│   ├── utils
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-313.pyc
│   │   │   ├── db_utils.cpython-313.pyc
│   │   │   ├── order_utils.cpython-313.pyc
│   │   │   └── send_email.cpython-313.pyc
│   │   ├── db_utils.py
│   │   ├── order_utils.py
│   │   └── send_email.py
│   └── utils.py
├── bootstrap_admin_user.py
├── data
│   ├── orders_backup_20250509_081210.db
│   ├── orders_backup_20250509_081218.db
│   ├── orders_backup_before_reset_20250519_105625.db
│   ├── orders_backup_before_reset_20250521_062017.db
│   ├── orders.db
│   ├── pdfs
│   │   ├── order_URC1200.pdf
│   │   ├── order_URC1201.pdf
│   │   └── order_URC1203.pdf
│   ├── printouts
│   │   ├── order_1.txt
│   │   ├── order_3.txt
│   │   └── order_7.txt
│   ├── test_orders.db
│   └── uploads
│       ├── 101_2025-05-07_11-05.pdf
│       ├── 101_Screenshot_2025-05-07_at_13.34.24.png
│       ├── 13_Screenshot_2025-04-23_at_05.19.18.png
│       ├── 14_Screenshot_2025-04-23_at_05.19.18.png
│       ├── 153_Intimisso.pdf
│       ├── 155_Investment_Made_-_12_May_2025.jpg
│       ├── 17_Intimisso.pdf
│       ├── 18_Hydehurst RC- Proof of submission.pdf
│       ├── 19_Fidessa Consulting.PDF
│       ├── 20_test_invoice.pdf
│       ├── 21_Fidessa Consulting.PDF
│       ├── 21_test_invoice.pdf
│       ├── 22_Hydehurst RC- Proof of submission.pdf
│       ├── 24_Fidessa Consulting.PDF
│       ├── 25_Screenshot 2025-04-20 at 17.12.14.png
│       ├── 26_Intimisso.pdf
│       ├── 27_test_invoice.pdf
│       ├── 28_Deposit - 2.pdf
│       ├── 28_test_invoice.pdf
│       ├── 30_2025-04-22_18-29.pdf
│       ├── 30_2025-04-22_18-44_1.pdf
│       ├── 30_2025-04-22_18-44.pdf
│       ├── 30_Intimisso.pdf
│       ├── 31_Screenshot_2025-04-23_at_05.19.18.png
│       ├── 42_Intimisso.pdf
│       ├── 43_Intimisso.pdf
│       ├── 44_order_URC1201.pdf
│       └── test_invoice.pdf
├── frontend
│   ├── static
│   │   ├── css
│   │   │   └── style.css
│   │   ├── images
│   │   │   └── universal_logo.jpg
│   │   ├── js
│   │   │   ├── audit_trail.js
│   │   │   ├── authorisations_per_user.js
│   │   │   ├── components
│   │   │   │   ├── attachment_modal.js
│   │   │   │   ├── expand_line_items.js
│   │   │   │   ├── order_note_modal.js
│   │   │   │   ├── pdf_modal.js
│   │   │   │   ├── receive_modal.js
│   │   │   │   ├── shared_filters.js
│   │   │   │   └── utils.js
│   │   │   ├── login.js
│   │   │   ├── maintenance_screen
│   │   │   │   ├── business_details.js
│   │   │   │   ├── index.js
│   │   │   │   ├── items.js
│   │   │   │   ├── projects.js
│   │   │   │   ├── requesters.js
│   │   │   │   ├── settings.js
│   │   │   │   ├── suppliers.js
│   │   │   │   └── users.js
│   │   │   ├── maintenance.js
│   │   │   ├── new_order_main.js
│   │   │   ├── new_order_modals.js
│   │   │   ├── new_order_screen
│   │   │   │   ├── pdf_utils.js
│   │   │   │   └── submit_utils.js
│   │   │   ├── partially_delivered.js
│   │   │   ├── pending_orders.js
│   │   │   ├── received_orders.js
│   │   │   └── send_email.js
│   │   └── mobile
│   │       ├── css
│   │       │   └── authorisations.css
│   │       └── js
│   │           └── authorisations_screen
│   └── templates
│       ├── _tab_nav.html
│       ├── audit_trail.html
│       ├── authorisations_per_user.html
│       ├── home.html
│       ├── index.html
│       ├── login.html
│       ├── maintenance.html
│       ├── mobile
│       │   ├── authorisations.html
│       │   └── css
│       ├── new_order.html
│       ├── partially_delivered.html
│       ├── pdf_template.html
│       ├── pending_orders.html
│       ├── print_template.html
│       └── received_orders.html
├── logs
│   ├── client.log
│   ├── db_activity_log.txt
│   ├── new_orders_log.txt
│   ├── order_receiving_log.txt
│   ├── partially_delivered_log.txt
│   ├── route_audit.log
│   └── server.log
├── requirements.txt
├── scripts
│   ├── __pycache__
│   │   └── add_debug_validation_handler.cpython-313.pyc
│   ├── add_debug_validation_handler.py
│   ├── database_scripts
│   │   ├── clear_database_tables.py
│   │   ├── print_all_data.py
│   │   └── seed_static_data.py
│   ├── dump_scripts
│   │   ├── individual_screens
│   │   │   ├── output_all_mobile_scripts.py
│   │   │   ├── output_all_pdf_scripts.py
│   │   │   ├── output_audit_trail_screen_files.py
│   │   │   ├── output_authorisations_per_user.py
│   │   │   ├── output_login_screen_files.py
│   │   │   ├── output_maintenance_screen_files.py
│   │   │   ├── output_new_order_screen.py
│   │   │   └── tree_dependencies_database.py
│   │   └── mother_output_all_files_code_to_text.py
│   ├── git_scripts
│   │   ├── google_vm_pull_and_start.py
│   │   ├── google_vm_push_and_leave.py
│   │   ├── pull_and_start.py
│   │   ├── pull_database_from_google_vm.py
│   │   ├── push_and_leave.py
│   │   └── push_database_to_vm.py
│   ├── start_server.py
│   └── stop_server.py
├── scripts_for_each_screen
│   └── output_all_mobile_files.txt
├── scripts_for_entire_project
├── setup_env.py
└── venv
    ├── bin
    │   ├── activate
    │   ├── activate.csh
    │   ├── activate.fish
    │   ├── Activate.ps1
    │   ├── dotenv
    │   ├── fastapi
    │   ├── fonttools
    │   ├── normalizer
    │   ├── pip
    │   ├── pip3
    │   ├── pyftmerge
    │   ├── pyftsubset
    │   ├── python -> python3
    │   ├── python3 -> /usr/bin/python3
    │   ├── ttx
    │   ├── uvicorn
    │   └── weasyprint
    ├── include
    │   └── python3.13
    ├── lib
    │   └── python3.13
    │       └── site-packages
    │           ├── __pycache__
    │           ├── annotated_types
    │           ├── anyio
    │           ├── bcrypt
    │           ├── bcrypt-4.3.0.dist-info
    │           ├── certifi-2025.4.26.dist-info
    │           ├── cffi
    │           ├── charset_normalizer-3.4.2.dist-info
    │           ├── click
    │           ├── cssselect2
    │           ├── dotenv
    │           ├── fastapi
    │           ├── fontTools
    │           ├── h11
    │           ├── h11-0.16.0.dist-info
    │           ├── itsdangerous
    │           ├── jinja2
    │           ├── markupsafe
    │           ├── PIL
    │           ├── pip
    │           ├── pip-25.1.1.dist-info
    │           ├── pycparser
    │           ├── pydantic
    │           ├── pydantic_core
    │           ├── pydantic_core-2.33.2.dist-info
    │           ├── pydantic-2.11.4.dist-info
    │           ├── pydyf
    │           ├── pyphen
    │           ├── python_multipart
    │           ├── sniffio
    │           ├── starlette
    │           ├── tinycss2
    │           ├── tinyhtml5
    │           ├── twilio
    │           ├── twilio-9.6.0.dist-info
    │           ├── typing_inspection
    │           ├── uvicorn
    │           ├── weasyprint
    │           └── webencodings
    ├── pyvenv.cfg
    └── share
        └── man
            └── man1
                └── ttx.1

90 directories, 195 files
