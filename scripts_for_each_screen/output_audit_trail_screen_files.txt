üìÑ frontend/templates/audit_trail.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Audit Trail - Universal Recycling</title>
  <link rel="icon" href="data:,">
  <link rel="stylesheet" href="/static/css/style.css" />
  <script type="module" src="/static/js/audit_trail.js"></script>
  </head>
<body>

  {% include "_tab_nav.html" %}

  <h2>Audit Trail</h2>

  <div class="filters">
    <label for="start-date-filter-test">Start Date:</label>
    <input type="date" id="start-date-filter-test">
    <label for="end-date-filter-test">End Date:</label>
    <input type="date" id="end-date-filter-test">
    <label for="requester-filter-test">Requester:</label>
    <select id="requester-filter-test">
      <option value="All">All</option>
    </select>
    <label for="supplier-filter-test">Supplier:</label>
    <select id="supplier-filter-test">
      <option value="All">All</option>
    </select>
    <label for="status-filter-test">Status:</label>
    <select id="status-filter-test">
      <option value="All">All</option>
      <option value="Pending">Pending</option>
      <option value="COD">COD</option>
      <option value="Authorised">Authorised</option>
      <option value="Awaiting Authorisation">Awaiting Authorisation</option>
      <option value="Received">Received</option>
      <option value="Deleted">Deleted</option>
      <option value="Partially Received">Partially Received</option>
      <option value="Draft">Draft</option>
    </select>
    <button id="run-filter-btn-test">Run</button>
    <button id="clear-filter-btn-test">Clear</button>
  </div>

  <div class="audit-table-container"> 
    <div class="audit-header-row">
      <div class="order-cell">Request Date</div>
      <div class="order-cell">Order Number</div>
      <div class="order-cell">Supplier</div> <div class="order-cell">Requester</div> <div class="order-cell order-cell-total">Total</div>
      <div class="order-cell">Status</div>
      <div class="order-cell">Actions</div> </div>
    <div id="audit-body-test" class="audit-body-blocks">
      <div style="padding: 1rem; text-align: center;">Loading orders...</div>
    </div>
  </div>

</body>
</html>

üìÑ frontend/static/js/audit_trail.js
------------------------------------------------------------
// File: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/js/audit_trail.js

// CHANGED: Import expandAuditTrailDetails from the new dedicated file
import { expandAuditTrailDetails } from "./audit_trail_expand.js"; 
import {
  showUploadAttachmentsModal,
  checkAttachments,
  showViewAttachmentsModal,
} from "./components/attachment_modal.js";
import {
  showOrderNoteModal,
  showSupplierNoteModal,
} from "./components/order_note_modal.js";
import { showPDFModal } from "./components/pdf_modal.js";
// Re-using shared filter functions from existing components
import { loadRequesters, loadSuppliers } from "./components/shared_filters.js";

// New function to format currency with thousand separators and 2 decimal places
function formatCurrency(amount) {
  if (amount == null) return "R0.00";
  return `R${parseFloat(amount).toLocaleString('en-ZA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
}

console.log("Loading audit_trail.js for improved display");

function escapeHTML(str = "") {
  return str
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/\'/g, "&#39;");
}

async function loadAuditOrders() { 
  const params = new URLSearchParams();

  const statusFilter = document.getElementById("status-filter-test").value;
  const requesterFilter = document.getElementById("requester-filter-test").value;
  const supplierFilter = document.getElementById("supplier-filter-test").value;
  const startDateFilter = document.getElementById("start-date-filter-test").value;
  const endDateFilter = document.getElementById("end-date-filter-test").value;

  if (statusFilter && statusFilter.toLowerCase() !== "all") {
    params.append("status", statusFilter);
  }
  if (requesterFilter && requesterFilter.toLowerCase() !== "all") {
    params.append("requester", requesterFilter);
  }
  if (supplierFilter && supplierFilter.toLowerCase() !== "all") {
    params.append("supplier", supplierFilter);
  }
  if (startDateFilter) {
    params.append("start_date", startDateFilter);
  }
  if (endDateFilter) {
    params.append("end_date", endDateFilter);
  }

  try {
    const res = await fetch(`/orders/api/audit_trail_orders?${params.toString()}`); 
    if (!res.ok) throw new Error(`HTTP ${res.status}: ${await res.text()}`);
    const { orders = [] } = await res.json();

    const tbody = document.getElementById("audit-body-test");
    tbody.innerHTML = "";

    if (orders.length === 0) {
      tbody.innerHTML = "<div class='order-block' style='padding: 1rem; text-align: center; border: none; box-shadow: none;'>No orders found.</div>";
      return;
    }

    orders.forEach((order, idx) => {
      // Determine which date to show in the main list header
      const displayDate = escapeHTML(order.received_date && order.status === 'Received' ?
                                    new Date(order.received_date).toLocaleDateString("en-ZA") :
                                    (order.created_date ? new Date(order.created_date).toLocaleDateString("en-ZA") : "N/A"));

      const sanitizedNumber = escapeHTML(order.order_number || "");
      const sanitizedRequester = escapeHTML(order.requester || "N/A");
      const sanitizedSupplier  = escapeHTML(order.supplier  || "N/A");
      const sanitizedStatus    = escapeHTML(order.status    || "");
      // For the main list 'User' column, prioritize who created, then who authorised, then who paid, then who received.
      // This is subjective, the audit_user (latest action) is also an option.
      const mainListUser = escapeHTML(
          order.created_by_user || 
          order.authorised_by_user || 
          order.paid_by_user || 
          order.received_by_user || 
          "N/A"
      );
      const sanitizedTotal = formatCurrency(order.total);

      // --- START NEW STRUCTURE FOR BLUE RECTANGLE EFFECT ---
      const orderBlock = document.createElement("div");
      orderBlock.classList.add("order-block");
      orderBlock.dataset.orderId = order.id;

      const headerRowDiv = document.createElement("div");
      headerRowDiv.classList.add("order-block-header-row");
      headerRowDiv.innerHTML = `
        <div class="order-cell">${displayDate}</div> <div class="order-cell">${sanitizedNumber}</div>
        <div class="order-cell">${sanitizedRequester}</div>
        <div class="order-cell">${sanitizedSupplier}</div>
        <div class="order-cell order-cell-total">${sanitizedTotal}</div> 
        <div class="order-cell"><span class="status">${sanitizedStatus}</span></div>
        <div class="order-cell">${mainListUser}</div> <div class="order-cell order-cell-actions">
          <span class="expand-icon"  title="Show order details"        data-id="${order.id}">‚¨áÔ∏è</span>
          <span class="clip-icon"    title="View / add attachments" data-id="${order.id}" data-number="${sanitizedNumber}">üìé</span>
          <span class="note-icon"    title="Edit order note"        data-id="${order.id}" data-note="${escapeHTML(order.order_note || "")}" id="order-note-test-${idx}">üìù</span>
          <span class="supplier-note-icon" title="View note to supplier" data-note="${escapeHTML(order.note_to_supplier || "")}">üì¶</span>
          <span class="pdf-icon"     title="View purchase-order PDF" data-id="${order.id}" data-number="${sanitizedNumber}">üìÑ</span>
        </div>`;
      
      orderBlock.appendChild(headerRowDiv);

      const detailRowDiv = document.createElement("div");
      detailRowDiv.id = `receipt-items-row-${order.id}`;
      detailRowDiv.classList.add("order-block-detail-row");
      detailRowDiv.style.display = "none";
      orderBlock.appendChild(detailRowDiv);

      tbody.appendChild(orderBlock);

      /* --- per-row handlers (re-using existing modal functions) --- */
      headerRowDiv.querySelector(".expand-icon").onclick = async (e) => {
          // CHANGED: Call the dedicated expandAuditTrailDetails
          await expandAuditTrailDetails(order.id, e.target, detailRowDiv);
      };

      headerRowDiv.querySelector(".clip-icon").onclick = async (e) => {
        const tgt = e.target, id = order.id, num = sanitizedNumber;
        const has = await checkAttachments(id);
        if (has) {
          showViewAttachmentsModal(id, num);
        } else {
          showUploadAttachmentsModal(id, num, async () => {
            if (await checkAttachments(id)) tgt.classList.toggle("eye-icon", true);
          });
        }
      };

      headerRowDiv.querySelector(`#order-note-test-${idx}`).onclick = (e) =>
        showOrderNoteModal(order.order_note || "", order.id, (newNote) =>
          e.target.setAttribute("data-note", escapeHTML(newNote))
        );

      headerRowDiv.querySelector(".supplier-note-icon").onclick = () =>
        showSupplierNoteModal(order.note_to_supplier || "");

      const currentOrderId = order.id;
      const currentOrderNumber = sanitizedNumber;

      headerRowDiv.querySelector(".pdf-icon").addEventListener("click", async () => {
        try {
          const resp = await fetch(`/orders/api/generate_pdf_for_order/${currentOrderId}`);
          if (!resp.ok) throw new Error(`PDF generation failed with status ${resp.status}`);

          const contentType = resp.headers.get('content-type');
          if (contentType && contentType.includes('application/pdf')) {
            const blob = await resp.blob();
            if (blob.size === 0) {
              throw new Error('Received empty PDF file');
            }
            showPDFModal(blob, currentOrderId, currentOrderNumber);
          } else {
            const data = await resp.json(); 
            throw new Error(`Unexpected response: ${JSON.stringify(data)}`);
          }
        } catch (err) {
          alert(`‚ùå Could not generate PDF (${err.message})`);
          console.error(err);
        }
      });
    });
  } catch (err) {
    console.error("‚ùå Error loading audit trail orders:", err);
    alert(`Failed to load audit trail orders: ${err.message}`);
  }
}

/* ---------- bootstrap for audit trail screen ---------- */
window.addEventListener("DOMContentLoaded", async () => {
  // Populate filter dropdowns
  await loadRequesters("requester-filter-test"); 
  await loadSuppliers("supplier-filter-test");   
  
  loadAuditOrders(); // Initial load of orders

  // Add event listeners for filter buttons
  const runButton = document.getElementById("run-filter-btn-test");
  if (runButton) {
    runButton.addEventListener("click", loadAuditOrders); 
  }

  const clearButton = document.getElementById("clear-filter-btn-test");
  if (clearButton) {
    clearButton.addEventListener("click", () => {
      // Reset all filter dropdowns and date inputs to "All" or empty
      document.getElementById("status-filter-test").value = "All";
      document.getElementById("requester-filter-test").value = "All";
      document.getElementById("supplier-filter-test").value = "All";
      document.getElementById("start-date-filter-test").value = "";
      document.getElementById("end-date-filter-test").value = "";
      loadAuditOrders(); // Reload orders with cleared filters
    });
  }
});

// Expose functions for potential debugging or future needs if modals rely on window scope
// REMOVED: expandLineItemsWithReceipts export/assignment as it's no longer the primary expander here
window.showUploadAttachmentsModal  = showUploadAttachmentsModal;
window.checkAttachments            = checkAttachments;
window.showViewAttachmentsModal    = showViewAttachmentsModal;
window.showOrderNoteModal          = showOrderNoteModal;
window.showSupplierNoteModal       = showSupplierNoteModal;

üìÑ frontend/static/js/components/pdf_modal.js
------------------------------------------------------------
// File: frontend/static/js/components/pdf_modal.js

// Helper function to convert Blob to Base64
function blobToBase64(blob) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
            // Remove the "data:application/pdf;base64," prefix
            const base64data = reader.result.split(',')[1];
            resolve(base64data);
        };
        reader.onerror = reject;
        reader.readAsDataURL(blob);
    });
}

// Helper function to show a prompt for email and then attempt to send
// Now accepts orderId, orderNumber, pdfBlob, and an optional initialEmail
async function promptForEmailAndSend(orderId, orderNumber, pdfBlob, initialEmail = '') {
    const emailPromptModal = document.createElement("div");
    emailPromptModal.style.position = "fixed";
    emailPromptModal.style.top = "0";
    emailPromptModal.style.left = "0";
    emailPromptModal.style.width = "100vw";
    emailPromptModal.style.height = "100vh";
    emailPromptModal.style.backgroundColor = "rgba(0,0,0,0.7)";
    emailPromptModal.style.display = "flex";
    emailPromptModal.style.alignItems = "center";
    emailPromptModal.style.justifyContent = "center";
    emailPromptModal.style.zIndex = 10001; // Higher than PDF modal

    emailPromptModal.innerHTML = `
        <div style="background:white; padding:2rem; border-radius:8px; box-shadow:0 0 15px rgba(0,0,0,0.3); text-align:center;">
            <h3>Email Purchase Order ${orderNumber || ''}</h3>
            <p>Please confirm or enter the recipient's email address:</p>
            <input type="email" id="manual-supplier-email" placeholder="supplier@example.com" style="width:80%; padding:0.5rem; margin-bottom:1rem; border:1px solid #ccc; border-radius:4px;">
            <div style="display:flex; justify-content:center; gap:10px;">
                <button id="send-manual-email-btn" style="background:#28a745; color:white; padding:8px 15px; border:none; border-radius:4px; cursor:pointer;">Send Email</button>
                <button id="cancel-manual-email-btn" style="background:#ccc; color:black; padding:8px 15px; border:none; border-radius:4px; cursor:pointer;">Cancel</button>
            </div>
            <div style="margin-top:10px;">
                <input type="checkbox" id="save-email-checkbox">
                <label for="save-email-checkbox">Save email to supplier record (if order is saved)</label>
            </div>
        </div>
    `;
    document.body.appendChild(emailPromptModal);

    const manualEmailInput = document.getElementById("manual-supplier-email");
    manualEmailInput.value = initialEmail; // Pre-populate the email
    const sendManualEmailBtn = document.getElementById("send-manual-email-btn");
    const cancelManualEmailBtn = document.getElementById("cancel-manual-email-btn");
    const saveEmailCheckbox = document.getElementById("save-email-checkbox");

    // Disable "Save email" checkbox if order is not saved (no orderId)
    if (!orderId) {
        saveEmailCheckbox.disabled = true;
        saveEmailCheckbox.checked = false;
        saveEmailCheckbox.parentNode.style.opacity = "0.5";
        saveEmailCheckbox.parentNode.title = "Saving email to supplier is only available for saved orders.";
    }

    cancelManualEmailBtn.onclick = () => emailPromptModal.remove();

    sendManualEmailBtn.onclick = async () => {
        const email = manualEmailInput.value.trim();
        if (!email || !email.includes('@') || !email.includes('.')) {
            alert("Please enter a valid email address.");
            return;
        }

        try {
            const pdfBase64 = await blobToBase64(pdfBlob); // Convert PDF blob to Base64

            const payload = {
                pdf_base64: pdfBase64,
                order_number: orderNumber,
                recipient_email: email,
                order_id: orderId, // Will be null for new order previews
                save_email_to_supplier: saveEmailCheckbox.checked && !!orderId // Only save if orderId exists
            };

            const response = await fetch(`/email/send_pdf`, { // Call the new generic email endpoint
                method: "POST",
                headers: { "Content-Type": "application/json" },
                credentials: "include",
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || "Failed to send email.");
            }

            const result = await response.json();
            alert("‚úÖ Purchase order emailed successfully!");
            emailPromptModal.remove(); // Close prompt modal

            // Check if backend requested to update order_note (for new order previews)
            if (result.update_order_note && typeof window.updateOrderNoteForEmail === 'function') {
                window.updateOrderNoteForEmail(email, orderNumber);
            }
            
            // Close the main PDF modal and clean up
            const mainPdfModal = document.getElementById("pdf-modal");
            if (mainPdfModal && document.body.contains(mainPdfModal)) {
                document.body.removeChild(mainPdfModal);
            }
            URL.revokeObjectURL(pdfBlob); // Clean up Blob URL

        } catch (err) {
            console.error("Email failed with manual input:", err);
            alert(`‚ùå Failed to send email: ${err.message}`);
        }
    };
}


// MODIFIED: showPDFModal now accepts orderId and orderNumber (both optional)
// It also takes initialSupplierEmail (optional) to pre-populate the prompt
export function showPDFModal(blob, orderId = null, orderNumber = null, initialSupplierEmail = '') {
    // Remove existing modal if it exists (to prevent duplicates if opened rapidly)
    const existingModal = document.getElementById("pdf-modal");
    if (existingModal) existingModal.remove();

    const modal = document.createElement("div");
    modal.id = "pdf-modal"; // Assign an ID for easier targeting
    modal.style.position = "fixed";
    modal.style.top = 0;
    modal.style.left = 0;
    modal.style.width = "100%";
    modal.style.height = "100%";
    modal.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
    modal.style.display = "flex";
    modal.style.alignItems = "center";
    modal.style.justifyContent = "center";
    modal.style.zIndex = 10000;

    const contentWrapper = document.createElement("div");
    contentWrapper.style.width = "80%";
    contentWrapper.style.height = "80%";
    contentWrapper.style.display = "flex";
    contentWrapper.style.flexDirection = "column";
    contentWrapper.style.backgroundColor = "white";
    contentWrapper.style.borderRadius = "8px";
    contentWrapper.style.boxShadow = "0 0 10px #fff";
    contentWrapper.style.overflow = "hidden";

    const headerBar = document.createElement("div");
    headerBar.style.display = "flex";
    headerBar.style.justifyContent = "flex-end";
    headerBar.style.alignItems = "center";
    headerBar.style.backgroundColor = "#f0f0f0";
    headerBar.style.padding = "8px 12px";

    const pdfURL = URL.createObjectURL(blob);
    const iframe = document.createElement("iframe");
    iframe.src = pdfURL;
    iframe.style.width = "100%";
    iframe.style.height = "100%";
    iframe.style.border = "none";

    // === üìß Email Button ===
    const emailBtn = document.createElement("button");
    emailBtn.textContent = "üìß Email PDF";
    emailBtn.style.background = "#28a745";
    emailBtn.style.color = "#fff";
    emailBtn.style.border = "none";
    emailBtn.style.padding = "6px 12px";
    emailBtn.style.borderRadius = "4px";
    emailBtn.style.cursor = "pointer";
    emailBtn.style.marginRight = "8px";

    // MODIFIED: Email button is always enabled if orderNumber is provided (for display purposes)
    // The prompt will handle missing email addresses
    if (orderNumber) { // Check for orderNumber as it's always available for previews/saved orders
        emailBtn.disabled = false; 
        emailBtn.onclick = async () => {
            // Always prompt for email, pre-populating with initialSupplierEmail
            promptForEmailAndSend(orderId, orderNumber, blob, initialSupplierEmail);
        };
    } else {
        // If no orderNumber (shouldn't happen for POs, but for robustness)
        emailBtn.disabled = true;
        emailBtn.title = "Emailing is only available for purchase orders.";
        emailBtn.style.opacity = "0.5";
        emailBtn.style.cursor = "not-allowed";
    }

    // === Download Button ===
    const downloadBtn = document.createElement("button");
    downloadBtn.textContent = "Download PDF";
    downloadBtn.style.background = "#007bff";
    downloadBtn.style.color = "#fff";
    downloadBtn.style.border = "none";
    downloadBtn.style.padding = "6px 12px";
    downloadBtn.style.borderRadius = "4px";
    downloadBtn.style.cursor = "pointer";
    downloadBtn.onclick = () => {
        const link = document.createElement("a");
        link.href = pdfURL;
        const filename = orderNumber ? `PurchaseOrder_${orderNumber}.pdf` : "PurchaseOrder.pdf";
        link.download = filename;
        link.click();
    };

    const buttonGroup = document.createElement("div");
    buttonGroup.style.display = "flex";
    buttonGroup.style.alignItems = "center";
    buttonGroup.style.gap = "10px"; // adds spacing between buttons

    buttonGroup.appendChild(emailBtn);
    buttonGroup.appendChild(downloadBtn);

    const closeBtn = document.createElement("button");
    closeBtn.textContent = "‚úñ";
    closeBtn.style.background = "transparent";
    closeBtn.style.border = "none";
    closeBtn.style.color = "#333";
    closeBtn.style.fontSize = "20px";
    closeBtn.style.cursor = "pointer";
    closeBtn.onclick = () => {
        if (document.body.contains(modal)) {
            document.body.removeChild(modal);
        }
        URL.revokeObjectURL(pdfURL); // Clean up the Blob URL
    };

    headerBar.appendChild(buttonGroup);
    headerBar.appendChild(closeBtn);

    // Close modal if clicking outside contentWrapper
    modal.addEventListener("click", (e) => {
        if (e.target === modal) {
            if (document.body.contains(modal)) {
                document.body.removeChild(modal);
            }
            URL.revokeObjectURL(pdfURL);
        }
    });

    contentWrapper.appendChild(headerBar);
    contentWrapper.appendChild(iframe);
    modal.appendChild(contentWrapper);
    document.body.appendChild(modal);
}


üìÑ frontend/static/css/style.css
------------------------------------------------------------
body {
  font-family: Arial, sans-serif;
  margin: 2rem;
  background-color: #f4f6f8;
}

h2 {
  margin-bottom: 1.5rem;
  font-size: 1.8rem;
  color: #1a3c5e;
}

/* ------------------ TABLE ------------------ */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 1rem;
  background-color: #fff;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  overflow: hidden;
}

th {
  background-color: #e8eef4;
  font-weight: 600;
  color: #1a3c5e;
  text-transform: none;
  font-size: 0.95rem;
  height: 48px;
}

td {
  border: 1px solid #e0e4e8;
  padding: 0.75rem;
  text-align: left; /* CHANGED FROM CENTER */
  font-size: 0.95rem;
  color: #333;
  overflow: visible;
  position: relative;
}

td button {
  margin-right: 0.5rem;
}

td button:last-child {
  margin-right: 0;
}

#users-table td,
#requesters-table td,
#items-table td,
#suppliers-table td,
#projects-table td {
  text-align: left;
}

.filters {
  margin-bottom: 1.5rem;
  display: flex;
  flex-wrap: wrap;
  gap: 1.5rem;
  align-items: center;
  background-color: #fff;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.filters label {
  font-weight: 600;
  color: #1a3c5e;
  margin-right: 0.5rem;
  font-size: 0.95rem;
}

input[type="date"],
input[type="text"],
input[type="number"],
select,
textarea {
  padding: 0.6rem;
  font-size: 0.95rem;
  font-family: Arial, sans-serif;
  border: 1px solid #c7d0d9;
  border-radius: 6px;
  background-color: #fff;
  min-width: 180px;
  max-width: 240px;
  transition: border-color 0.2s;
}

input[type="date"]:focus,
select:focus,
input[type="text"]:focus,
textarea:focus {
  outline: none;
  border-color: #0066cc;
  box-shadow: 0 0 0 2px rgba(0, 102, 204, 0.2);
}

button {
  padding: 0.6rem 1.5rem;
  cursor: pointer;
  background-color: #0066cc;
  color: #fff;
  border: none;
  border-radius: 6px;
  font-size: 0.95rem;
  font-weight: 500;
  transition: background-color 0.2s;
}

button:hover {
  background-color: #0055aa;
}

.expand-icon,
.clip-icon,
.eye-icon,
.note-icon,
.supplier-note-icon,
.receive-icon,
.pdf-icon {
  cursor: pointer;
  font-size: 1.2rem;
  margin: 0 0.4rem;
  display: inline-block;
  color: #0066cc;
  transition: color 0.2s;
}

.expand-icon:hover,
.clip-icon:hover,
.eye-icon:hover,
.note-icon:hover,
.supplier-note-icon:hover,
.receive-icon:hover {
  color: #003366;
}

.eye-icon.disabled {
  opacity: 0.3;
  cursor: default;
}

.login-box {
  background: white;
  padding: 2rem 3rem;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 400px;
  text-align: center;
  margin: 5rem auto;
}

.login-box h2 {
  margin-bottom: 1.5rem;
  font-size: 1.5rem;
  color: #333;
}

.login-box input {
  width: 100%;
  padding: 0.8rem;
  margin-bottom: 1.2rem;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 1rem;
}

.login-box button {
  width: 100%;
  padding: 0.8rem;
  background-color: #0056b3;
  border: none;
  color: white;
  font-size: 1rem;
  border-radius: 5px;
  cursor: pointer;
}

.login-box button:hover {
  background-color: #004a99;
}

#login-error {
  margin-top: 0.5rem;
  color: red;
  font-size: 0.9rem;
}

.tabs {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
}

.tab {
  padding: 0.5rem 1rem;
  cursor: pointer;
  background: #ddd;
  border-radius: 4px 4px 0 0;
}

.tab.active {
  background: #007BFF;
  color: white;
}

.tab-content {
  display: none;
  padding: 1rem;
  border: 1px solid #ccc;
  border-radius: 0 4px 4px 4px;
  background-color: white;
}

.tab-content.active {
  display: block;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  font-weight: bold;
}

.order-header {
  margin-bottom: 2rem;
}

.order-header label span {
  font-weight: bold;
  font-size: 1.05rem;
  margin-left: 0.5rem;
}

.form-row {
  display: flex;
  flex-wrap: wrap;
  gap: 2rem;
  margin-bottom: 2rem;
}

.column {
  flex: 1 1 240px;
  display: flex;
  flex-direction: column;
}

#note_to_supplier {
  min-height: 100px;
}

.delivery-block {
  margin-top: 2.5rem;
  margin-bottom: 2.5rem;
}

.add-item-block {
  margin-top: 2rem;
  margin-bottom: 2rem;
  overflow: visible;
  position: relative;
  min-height: 300px;
  z-index: 1; /* <-- ADD THIS */

}

.summary {
  margin-bottom: 2rem;
}

.button-group {
  margin-top: 2rem;
}

.receive-modal table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 1rem;
  font-size: 14px;
}

.receive-modal th,
.receive-modal td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: left;
}

.receive-modal input[type="number"] {
  width: 80px;
}

i:hover {
  cursor: pointer;
}

.note-icon:hover,
.clip-icon:hover,
.expand-icon:hover,
.receive-icon:hover,
.supplier-note-icon:hover {
  cursor: pointer;
}

.email-icon {
  cursor: pointer;
  margin-left: 5px;
  font-size: 1.2em;
}

.email-icon:hover {
  color: #007bff;
}

#settings .form-group label,
#settings .form-group input {
  display: block;
  margin-bottom: 0.5rem;
}

#settings .form-group input {
  width: 250px;
  padding: 0.5rem;
}

#settings .form-group {
  margin-bottom: 1.2rem;
}

#business_details .form-group label,
#business_details .form-group input {
  display: block;
  margin-bottom: 0.5rem;
}

#business_details .form-group input {
  width: 280px;
  padding: 0.5rem;
}

#business_details .form-group {
  margin-bottom: 1.2rem;
}

#users .form-group label,
#users .form-group input,
#users .form-group select {
  display: block;
  margin-bottom: 0.5rem;
}

#users .form-group input,
#users .form-group select {
  width: 280px;
  padding: 0.5rem;
}

#users .form-group {
  margin-bottom: 1.2rem;
}

.receive-icon.disabled {
  opacity: 0.4;
  pointer-events: none;
  cursor: not-allowed;
}

/* --- FIX CLIPPED DROPDOWNS --- */
td,
tr,
tbody,
#items-body,
#items {
  overflow: visible !important;
  position: relative;
  z-index: 1;
}

#items-table-container {
  overflow: visible;
  position: relative;
  z-index: 2;
}

.position-relative {
  position: relative;
}

/* --- CUSTOM FIELD WIDTHS --- */
.wide-select {
  min-width: 280px;
  max-width: 360px;
}

.narrow-input {
  width: 80px;
  max-width: 90px;
  text-align: right;
}

.medium-input {
  width: 100px;
  max-width: 120px;
  text-align: right;
}

/* Force TomSelect dropdown to appear on top of everything else */
.ts-dropdown {
  z-index: 9999 !important;
}

.ts-dropdown {
  z-index: 9999 !important;
  position: absolute !important;
}

.add-item-block {
  z-index: auto !important;
}

.fuzzy-fix-scope {
  z-index: auto !important;
}

.converted-icon.disabled {
  opacity: 0.4;
  pointer-events: none;
}

th {
  text-align: left;
}

/* File: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/css/style.css */

/* Custom Alignment for Table Columns */
/* Total column should be right-aligned */
table th:nth-child(5) { /* Targets the 5th header column (Total) */
    text-align: right;
    padding-right: 7mm; /* ADDED: Moves the heading text slightly left */
}
table td:nth-child(5) { /* Targets the 5th data cell column (Total) */
    text-align: right;
}

/* Actions column should be left-aligned (overriding any default center alignment) */
table th:nth-child(7), /* Targets the 7th header column (Actions) */
table td:nth-child(7) { /* Targets the 7th data cell column (Actions) */
    text-align: left;
}




/* Ensure icons within the action column are aligned to the left of their cell */
.expand-icon,
.clip-icon,
.eye-icon,
.note-icon,
.supplier-note-icon,
.receive-icon,
.pdf-icon,
.delete-icon,
.edit-draft-icon {
    display: inline-block;
    margin-right: 0.4rem;
}

/* File: /Users/stevencohen/Projects/universal_recycling/orders_project/frontend/static/css/style.css */

/* New styles for the Audit Trail "blue rectangle" grouping effect */

/* Container for each full order block (header row + details) */
.order-block {
    border: 1px solid #007bff; /* Blue border */
    background-color: #f0f8ff; /* Light blue background */
    margin-bottom: 1rem; /* Space between order blocks */
    border-radius: 8px; /* Rounded corners */
    overflow: hidden; /* Ensures content stays within rounded corners */
    box-shadow: 0 2px 5px rgba(0,0,0,0.05); /* Subtle shadow */
}

/* Style for the header row within the order-block */
.order-block-header-row {
    display: flex; /* Use flexbox for column layout within the row */
    align-items: center; /* Vertically align content */
    background-color: #e8eef4; /* Light grey background for the header area */
    padding: 0.75rem 1rem; /* Padding inside the header row */
    font-size: 0.95rem;
    font-weight: bold; /* Make header text bold */
    color: #1a3c5e; /* Darker text */
    border-bottom: 1px solid #cceeff; /* Light blue border at the bottom of the header */
}

/* Style for individual "cells" within the header row */
.order-cell {
    padding: 0 0.5rem; /* Horizontal padding for spacing */
    text-align: left; /* Default left alignment */
    flex-basis: 0; /* Allow flex items to grow from 0 */
    flex-grow: 1; /* Allow flex items to grow to fill space */
    min-width: 50px; /* Minimum width for very small columns */
    /* Set specific flex-grow values to mimic column widths */
}

/* Adjust flex-grow for specific columns to match approximate table widths */
/* These flex-grow values are approximations; you might need to fine-tune them */
.order-block-header-row .order-cell:nth-child(1) { flex-grow: 1; min-width: 100px; } /* Request Date */
.order-block-header-row .order-cell:nth-child(2) { flex-grow: 1.2; min-width: 100px; } /* Order Number */
.order-block-header-row .order-cell:nth-child(3) { flex-grow: 1.5; min-width: 120px; } /* Requester */
.order-block-header-row .order-cell:nth-child(4) { flex-grow: 2; min-width: 150px; } /* Supplier */
.order-block-header-row .order-cell:nth-child(5) { flex-grow: 0.8; text-align: right; padding-right: 7mm; min-width: 80px; } /* Total (right aligned, with padding) */
.order-block-header-row .order-cell:nth-child(6) { flex-grow: 1; min-width: 80px; } /* Status */
.order-block-header-row .order-cell:nth-child(7) { flex-grow: 0.8; min-width: 80px; } /* User */
.order-block-header-row .order-cell:nth-child(8) { flex-grow: 2; text-align: left; min-width: 150px; } /* Actions (left aligned) */


/* Styling for the expanded detail section */
.order-block-detail-row {
    padding: 1rem; /* Internal padding */
    background-color: #f8f8ff; /* Slightly different background for details */
    border-top: 1px dashed #cceeff; /* Subtle dashed line above details */
}

/* Styling for sections within the expanded detail row (Payment, Items, etc.) */
.expanded-section {
    margin-bottom: 1rem; /* Space between sections */
}
.expanded-section:last-child {
    margin-bottom: 0; /* No margin after the last section */
}

/* Specific style for payment details section */
.payment-details-section {
    background-color: #e6f7ff; /* Light blue background as in your original snippet */
    border-left: 4px solid #007bff; /* Blue left border */
    padding: 0.8rem;
    font-size: 0.95rem;
}

/* Style for tables within the expanded detail section (items, receipts) */
.items-table-section table,
.items-table-section table th, /* Ensure inner table headers are also styled */
.items-table-section table td {
    border: 1px solid #ddd; /* Lighter border for inner tables */
    padding: 6px;
    font-size: 0.9rem;
}

.items-table-section table th {
    background-color: #f2f2f2; /* Light grey for inner table headers */
    font-weight: bold;
}

/* Specific alignment for columns within expanded items table */
.items-table-section table td:nth-child(3), /* Qty */
.items-table-section table td:nth-child(4), /* Price */
.items-table-section table td:nth-child(5) { /* Total */
    text-align: right;
}

/* Specific alignment for columns within receipts sub-table */
.items-table-section table table td:nth-child(1) { /* Qty in Receipts */
    text-align: right;
}
.items-table-section table table td:nth-child(2), /* Date in Receipts */
.items-table-section table table td:nth-child(3) { /* User in Receipts */
    text-align: left;
}
/* Add padding/margin to separate receipt sub-table from its header if needed */
.items-table-section table td table {
    margin-top: 5px; /* Small top margin for receipts table */
    border: none; /* No border around the receipts sub-table itself */
    box-shadow: none; /* No shadow for inner tables */
}
.items-table-section table td table td {
    padding: 3px; /* Smaller padding for receipt details */
    background-color: #fcfcff; /* Very light background for receipts */
}
.items-table-section table td table thead tr {
    background-color: #eef; /* Slightly darker header for receipts sub-table */
}

/* New styles for the Audit Trail header (replacing the old thead) */
.audit-header-row {
    display: flex; /* Makes it a flex container to align columns */
    align-items: center; /* Vertically centers text */
    background-color: #e8eef4; /* Same background as old th */
    padding: 0.75rem 1rem; /* Same padding as .order-block-header-row */
    font-size: 0.95rem;
    font-weight: bold;
    color: #1a3c5e;
    border-bottom: 1px solid #cceeff; /* Visual separator */
    border-radius: 8px 8px 0 0; /* Rounded top corners matching order-block */
    margin-bottom: 0.5rem; /* Small space between header and first order block */
}

/* Styles for the container of all audit trail order blocks */
.audit-body-blocks {
    /* This div now essentially replaces the <tbody> element visually */
    /* No specific flex/grid here, just a container */
}

/* These rules ensure the widths of the header cells match the content cells */
.audit-header-row .order-cell:nth-child(1) { flex-grow: 1; min-width: 100px; } /* Request Date */
.audit-header-row .order-cell:nth-child(2) { flex-grow: 1.2; min-width: 100px; } /* Order Number */
.audit-header-row .order-cell:nth-child(3) { flex-grow: 1.5; min-width: 120px; } /* Requester */
.audit-header-row .order-cell:nth-child(4) { flex-grow: 2; min-width: 150px; } /* Supplier */
.audit-header-row .order-cell:nth-child(5) { flex-grow: 0.8; text-align: right; padding-right: 7mm; min-width: 80px; } /* Total */
.audit-header-row .order-cell:nth-child(6) { flex-grow: 1; min-width: 80px; } /* Status */
.audit-header-row .order-cell:nth-child(7) { flex-grow: 0.8; min-width: 80px; } /* User */
.audit-header-row .order-cell:nth-child(8) { flex-grow: 2; text-align: left; min-width: 150px; } /* Actions */

/* Specific alignment for Pending Requisitions Actions column (5th column) */
#pending-requisitions-table th:nth-child(5),
#pending-requisitions-table td:nth-child(5) {
    text-align: left;
    /* This padding matches the margin-right on your icons (0.4rem)
       to ensure visual alignment from the leftmost edge of the cell. */
    padding-left: 0.4rem;
}

üìÑ backend/endpoints/order_pdf.py
------------------------------------------------------------
[ERROR] Could not read file: [Errno 2] No such file or directory: 'backend/endpoints/order_pdf.py'


üìÑ backend/endpoints/order_queries.py
------------------------------------------------------------
# File: /Users/stevencohen/Projects/universal_recycling/orders_project/backend/endpoints/order_queries.py

from pydantic import BaseModel
from backend.database import get_db_connection
from fastapi import APIRouter, HTTPException, Query, Depends
from typing import Optional, List, Dict
from datetime import datetime
import sqlite3
from pathlib import Path
import json

from backend.utils.permissions_utils import require_login

router = APIRouter(tags=["orders"])

def log_event(filename: str, data: dict):
    """Logs an event to a file."""
    log_path = Path(f"logs/{filename}")
    log_path.parent.mkdir(parents=True, exist_ok=True)
    with log_path.open("a", encoding="utf-8") as f:
        timestamp = datetime.now().isoformat()
        f.write(f"[{timestamp}] {json.dumps(data, ensure_ascii=False)}\n")

class CodPaymentPayload(BaseModel):
    amount_paid: float
    payment_date: str  # Expected format:YYYY-MM-DD

def validate_date(date_str: Optional[str]) -> Optional[str]:
    """Helper function to validate date strings."""
    if not date_str:
        return None
    try:
        # Try to parse various formats to ensure flexibility, then return YYYY-MM-DD
        dt_obj = None
        try:
            dt_obj = datetime.strptime(date_str, "%Y-%m-%d")
        except ValueError:
            try:
                dt_obj = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
            except ValueError:
                try:
                    dt_obj = datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%S.%f")
                except ValueError:
                    dt_obj = datetime.strptime(date_str, "%Y/%m/%d")
        if dt_obj:
            return dt_obj.strftime("%Y-%m-%d")
        return None
    except ValueError:
        raise HTTPException(status_code=400, detail=f"Invalid date format: {date_str}. Use YYYY-MM-DD.")


@router.get("/pending_orders")
async def get_pending_orders(
    start_date: Optional[str] = Query(None),
    end_date: Optional[str] = Query(None),
    requester: Optional[str] = Query(None),
    supplier: Optional[str] = Query(None),
    status: Optional[str] = Query(None),
    user: Dict = Depends(require_login)
):
    conn = get_db_connection()
    conn.row_factory = sqlite3.Row
    try:
        filters = []
        params = []

        # Default filters for pending orders screen
        filters.append("UPPER(o.status) IN ('PENDING', 'WAITING FOR APPROVAL', 'AWAITING AUTHORISATION', 'AUTHORISED', 'DRAFT', 'PAID', 'PARTIALLY RECEIVED')")
        filters.append("UPPER(o.status) != 'DELETED'")


        if start_date:
            valid_start_date = validate_date(start_date)
            filters.append("DATE(o.created_date) >= DATE(?)")
            params.append(valid_start_date)

        if end_date:
            valid_end_date = validate_date(end_date)
            filters.append("DATE(o.created_date) <= DATE(?)")
            params.append(valid_end_date)

        if requester is not None and requester.strip().lower() != "all" and requester.strip() != "":
            filters.append("UPPER(r.name) LIKE UPPER(?)")
            params.append(f"%{requester.strip()}%")

        if supplier is not None and supplier.strip().lower() != "all" and supplier.strip() != "":
            filters.append("UPPER(s.name) LIKE UPPER(?)")
            params.append(f"%{supplier.strip()}%")

        if status is not None and status.strip().lower() != "all" and status.strip() != "":
            filters.append("UPPER(o.status) = UPPER(?)")
            params.append(status.strip())

        where_clause = " AND ".join(filters) if filters else "1=1"

        cursor = conn.execute(f"""
            SELECT
                o.id, o.created_date, o.order_number,
                r.name AS requester, s.name AS supplier,
                o.order_note, o.note_to_supplier, o.total, o.status
            FROM orders o
            LEFT JOIN requesters r ON o.requester_id = r.id
            LEFT JOIN suppliers s ON o.supplier_id = s.id
            WHERE {where_clause}
            ORDER BY
                CAST(SUBSTR(o.order_number, INSTR(o.order_number, 'C') + 1) AS INTEGER) DESC,
                o.created_date DESC
        """, params)
        orders = [dict(row) for row in cursor.fetchall()]
        for order in orders:
            if order["created_date"]:
                try:
                    order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d %H:%M:%S").strftime("%Y-%m-%d")
                except ValueError:
                    try:
                        order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d").strftime("%Y-%m-%d")
                    except ValueError:
                        order["created_date"] = "N/A"
            else:
                order["created_date"] = "N/A"
        log_event("new_orders_log.txt", {"action": "fetch_pending_orders", "count": len(orders)})
        return {"orders": orders}
    except sqlite3.OperationalError as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "sqlite_query", "query": "pending_orders"})
        raise HTTPException(status_code=500, detail=f"Database query error: {e}")
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "pending_orders"})
        raise HTTPException(status_code=500, detail=f"Failed to load pending orders: {e}")
    finally:
        conn.close()


@router.get("/received_orders")
async def get_received_orders(
    start_date: Optional[str] = Query(None),
    end_date: Optional[str] = Query(None),
    requester: Optional[str] = Query(None),
    supplier: Optional[str] = Query(None),
    status: Optional[str] = Query(None),
    user: Dict = Depends(require_login)
):
    conn = get_db_connection()
    conn.row_factory = sqlite3.Row
    try:
        filters = []
        params = []

        # Allow status filter to override or combine
        if status is not None and status.strip().lower() != "all" and status.strip() != "":
            filters.append("UPPER(o.status) = UPPER(?)")
            params.append(status.strip())
        else:
            # Default to showing both 'Received' and 'Partially Received' if 'All' or no status is specified
            filters.append("UPPER(o.status) IN ('RECEIVED', 'PARTIALLY RECEIVED')")

        filters.append("UPPER(o.status) != 'DELETED'")

        if start_date:
            valid_start_date = validate_date(start_date)
            filters.append("DATE(o.created_date) >= DATE(?)")
            params.append(valid_start_date)

        if end_date:
            valid_end_date = validate_date(end_date)
            filters.append("DATE(o.created_date) <= DATE(?)")
            params.append(valid_end_date)

        if requester is not None and requester.strip().lower() != "all" and requester.strip() != "":
            filters.append("UPPER(r.name) LIKE UPPER(?)")
            params.append(f"%{requester.strip()}%")

        if supplier is not None and supplier.strip().lower() != "all" and supplier.strip() != "":
            filters.append("UPPER(s.name) LIKE UPPER(?)")
            params.append(f"%{supplier.strip()}%")

        where_clause = " AND ".join(filters) if filters else "1=1"

        cursor = conn.execute(f"""
            SELECT
                o.id, o.created_date, o.order_number,
                r.name AS requester, s.name AS supplier,
                o.order_note, o.note_to_supplier, o.total, o.status
            FROM orders o
            LEFT JOIN requesters r ON o.requester_id = r.id
            LEFT JOIN suppliers s ON o.supplier_id = s.id
            WHERE {where_clause}
            ORDER BY
                CAST(SUBSTR(o.order_number, INSTR(o.order_number, 'C') + 1) AS INTEGER) DESC,
                o.created_date DESC
        """, params)
        orders = [dict(row) for row in cursor.fetchall()]
        for order in orders:
            if order["created_date"]:
                try:
                    order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d %H:%M:%S").strftime("%Y-%m-%d")
                except ValueError:
                    try:
                        order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d").strftime("%Y-%m-%d")
                    except ValueError:
                        order["created_date"] = "N/A"
            else:
                order["created_date"] = "N/A"
        log_event("new_orders_log.txt", {"action": "fetch_received_orders", "count": len(orders)})
        return {"orders": orders}
    except sqlite3.OperationalError as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "sqlite_query", "query": "received_orders"})
        raise HTTPException(status_code=500, detail=f"Database query error: {e}")
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "received_orders"})
        raise HTTPException(status_code=500, detail=f"Failed to load received orders: {e}")
    finally:
        conn.close()

@router.get("/partially_delivered")
async def get_partially_delivered_orders(
    start_date: Optional[str] = Query(None),
    end_date: Optional[str] = Query(None),
    requester: Optional[str] = Query(None),
    supplier: Optional[str] = Query(None),
    user: Dict = Depends(require_login)
):
    conn = get_db_connection()
    conn.row_factory = sqlite3.Row
    try:
        filters = ["oi.qty_received < oi.qty_ordered", "UPPER(o.status) != 'CANCELLED'", "UPPER(o.status) != 'DELETED'"]
        params = []

        if start_date:
            valid_start_date = validate_date(start_date)
            filters.append("DATE(o.created_date) >= DATE(?)")
            params.append(valid_start_date)

        if end_date:
            valid_end_date = validate_date(end_date)
            filters.append("DATE(o.created_date) <= DATE(?)")
            params.append(valid_end_date)

        if requester is not None and requester.strip().lower() != "all" and requester.strip() != "":
            filters.append("UPPER(r.name) LIKE UPPER(?)")
            params.append(f"%{requester.strip()}%")

        if supplier is not None and supplier.strip().lower() != "all" and supplier.strip() != "":
            filters.append("UPPER(s.name) LIKE UPPER(?)")
            params.append(f"%{supplier.strip()}%")

        where_clause = " AND ".join(filters) if filters else "1=1"

        cursor = conn.execute(f"""
            SELECT DISTINCT o.id, o.created_date, o.order_number,
                r.name AS requester, s.name AS supplier,
                o.order_note, o.note_to_supplier, o.total, o.status
            FROM orders o
            LEFT JOIN requesters r ON o.requester_id = r.id
            LEFT JOIN suppliers s ON o.supplier_id = s.id
            JOIN order_items oi ON o.id = oi.order_id
            WHERE {where_clause}
            ORDER BY
                CAST(SUBSTR(o.order_number, INSTR(o.order_number, 'C') + 1) AS INTEGER) DESC,
                o.created_date DESC
        """, params)
        orders = [dict(row) for row in cursor.fetchall()]
        for order in orders:
            if order["created_date"]:
                try:
                    order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d %H:%M:%S").strftime("%Y-%m-%d")
                except ValueError:
                    try:
                        order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d").strftime("%Y-%m-%d")
                    except ValueError:
                        order["created_date"] = "N/A"
            else:
                order["created_date"] = "N/A"
        return {"orders": orders}
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "partially_delivered"})
        raise HTTPException(status_code=500, detail=f"Failed to fetch partially delivered orders: {e}")
    finally:
        conn.close()

@router.get("/items_for_order/{order_id}")
async def get_items_for_order(order_id: int, user: Dict = Depends(require_login)):
    conn = get_db_connection()
    conn.row_factory = sqlite3.Row
    try:
        cursor = conn.execute("""
            SELECT id, item_code, item_description, project, qty_ordered, qty_received, received_date, price,
                   (qty_ordered * price) AS total
            FROM order_items
            WHERE order_id = ?
        """, (order_id,))
        items = [dict(row) for row in cursor.fetchall()]
        log_event("new_orders_log.txt", {"action": "fetch_items_for_order", "order_id": order_id, "count": len(items)})
        return {"items": items}
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "items_for_order"})
        raise HTTPException(status_code=500, detail=f"Failed to fetch items: {e}")
    finally:
        conn.close()

# The following function is being REMOVED to resolve endpoint conflict
# @router.get("/orders/api/audit_trail_orders")
# async def get_audit_trail_orders(
#     status: Optional[str] = Query(None, description="Filter by order status"),
#     start_date: Optional[str] = Query(None),
#     end_date: Optional[str] = Query(None),
#     requester: Optional[str] = Query(None),
#     supplier: Optional[str] = Query(None),
#     user: Dict = Depends(require_login)
# ):
#     conn = get_db_connection()
#     conn.row_factory = sqlite3.Row
#     try:
#         filters = []
#         params = []

#         # Standardized status filtering
#         if status is not None and status.strip().lower() != "all" and status.strip() != "":
#             filters.append("UPPER(o.status) = UPPER(?)")
#             params.append(status.strip())

#         # Standardized date filters
#         if start_date:
#             valid_start_date = validate_date(start_date)
#             filters.append("DATE(o.created_date) >= DATE(?)")
#             params.append(valid_start_date)

#         if end_date:
#             valid_end_date = validate_date(end_date)
#             filters.append("DATE(o.created_date) <= DATE(?)")
#             params.append(valid_end_date)

#         # Filter by requester, ensuring "All" is skipped
#         if requester is not None and requester.strip().lower() != "all" and requester.strip() != "":
#             filters.append("UPPER(r.name) LIKE UPPER(?)")
#             params.append(f"%{requester.strip()}%")

#         # Filter by supplier, ensuring "All" is skipped
#         if supplier is not None and supplier.strip().lower() != "all" and supplier.strip() != "":
#             filters.append("UPPER(s.name) LIKE UPPER(?)")
#             params.append(f"%{supplier.strip()}%")

#         where_clause = " AND ".join(filters) if filters else "1=1"

#         # --- DEBUGGING LOG ENTRY ---
#         log_event("audit_trail_debug_log.txt", {
#             "debug_point": "pre_execute_audit_query",
#             "filters_list": filters,
#             "params_list": params,
#             "final_where_clause": where_clause
#         })
#         print(f"\n--- DEBUG AUDIT TRAIL QUERY CONSTRUCTION ---")
#         print(f"Filters List: {filters}")
#         print(f"Parameters List: {params}")
#         print(f"Final WHERE Clause: {where_clause}")
#         print(f"--------------------------------------------\n")
#         # --- END DEBUGGING LOG ENTRY ---

#         cursor = conn.execute(f"""
#             SELECT
#                 o.id, o.created_date, o.received_date, o.order_number,
#                 r.name AS requester, s.name AS supplier,
#                 o.order_note, o.note_to_supplier, o.total, o.status,
#                 u_auth.username AS audit_user,
#                 ap.action_date AS paid_date,
#                 ap.details AS paid_details,
#                 u_paid.username AS paid_by_user
#             FROM orders o
#             LEFT JOIN requesters r ON o.requester_id = r.id
#             LEFT JOIN suppliers s ON o.supplier_id = s.id
#             LEFT JOIN (
#                 SELECT order_id, MAX(action_date) AS latest_action_date, user_id
#                 FROM audit_trail
#                 WHERE action = 'Authorised'
#                 GROUP BY order_id
#             ) latest_auth ON latest_auth.order_id = o.id
#             LEFT JOIN users u_auth ON latest_auth.user_id = u_auth.id
#             LEFT JOIN (
#                 SELECT order_id, MAX(action_date) AS action_date, details, user_id
#                 FROM audit_trail
#                 WHERE action = 'Marked COD Paid'
#                 GROUP BY order_id
#             ) ap ON ap.order_id = o.id
#             LEFT JOIN users u_paid ON ap.user_id = u_paid.id
#             WHERE {where_clause}
#             GROUP BY o.id
#             ORDER BY
#                 CAST(SUBSTR(o.order_number, INSTR(o.order_number, 'C') + 1) AS INTEGER) DESC,
#                 o.created_date DESC
#         """, params)

#         orders = [dict(row) for row in cursor.fetchall()]

#         # Format dates for display
#         for order in orders:
#             # Handle created_date
#             if order["created_date"]:
#                 try:
#                     order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d %H:%M:%S").strftime("%Y-%m-%d")
#                 except ValueError:
#                     try:
#                         order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d").strftime("%Y-%m-%d")
#                     except ValueError:
#                          order["created_date"] = "N/A"
#             else:
#                 order["created_date"] = "N/A"

#             # Handle received_date
#             if order["received_date"]:
#                 try:
#                     order["received_date"] = datetime.strptime(order["received_date"], "%Y-%m-%d %H:%M:%M").strftime("%Y-%m-%d")
#                 except ValueError:
#                     try:
#                         order["received_date"] = datetime.strptime(order["received_date"], "%Y-%m-%d").strftime("%Y-%m-%d")
#                     except ValueError:
#                         order["received_date"] = "N/A"
#             else:
#                 order["received_date"] = "N/A"

#             # NEW: Format paid_date if exists
#             if order["paid_date"]:
#                 try:
#                     order["paid_date"] = datetime.strptime(order["paid_date"], "%Y-%m-%d %H:%M:%S.%f").strftime("%Y-%m-%d %H:%M")
#                 except ValueError:
#                     # Fallback for other potential formats if necessary
#                     order["paid_date"] = "N/A"


#         # Log the activity (standard log, not debug log)
#         log_event("audit_trail_log.txt", {
#             "action": "fetch_audit_trail_orders",
#             "count": len(orders),
#             "filters": {
#                 "status": status,
#                 "start_date": start_date,
#                 "end_date": end_date,
#                 "requester": requester,
#                 "supplier": supplier
#             }
#         })
#         return {"orders": orders}

#     except Exception as e:
#         print(f"Error in get_audit_trail_orders: {e}")
#         # Log error with received filters for better debugging
#         log_event("audit_trail_log.txt", {
#             "error": str(e),
#             "type": "audit_trail_orders",
#             "filters_received_on_error": {
#                 "status": status,
#                 "start_date": start_date,
#                 "end_date": end_date,
#                 "requester": requester,
#                 "supplier": supplier
#             }
#         })
#         raise HTTPException(status_code=500, detail=f"Failed to load audit trail orders: {e}")
#     finally:
#         conn.close()

@router.get("/last_audit_action/{order_id}")
async def get_last_audit_action(order_id: int, user: Dict = Depends(require_login)):
    conn = get_db_connection()
    conn.row_factory = sqlite3.Row
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT details, action_date
            FROM audit_trail
            WHERE order_id = ?
            ORDER BY action_date DESC
            LIMIT 1
        """, (order_id,))
        row = cursor.fetchone()
        if row:
            return {"details": row["details"], "action_date": row["action_date"]}
        else:
            return {"details": "No actions yet", "action_date": None}
    except Exception as e:
        print(f"Error in get_last_audit_action: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to fetch last audit action: {e}")
    finally:
        conn.close()


@router.get("/order_summary")
async def get_order_summary(user: Dict = Depends(require_login)):
    conn = get_db_connection()
    conn.row_factory = sqlite3.Row
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT
                COALESCE(SUM(CASE WHEN UPPER(status) = 'PENDING' THEN 1 ELSE 0 END), 0) AS pending,
                COALESCE(SUM(CASE WHEN UPPER(status) = 'AWAITING AUTHORISATION' THEN 1 ELSE 0 END), 0) AS awaiting,
                COALESCE(SUM(CASE WHEN UPPER(status) = 'AUTHORISED' THEN 1 ELSE 0 END), 0) AS authorised,
                COALESCE(SUM(CASE WHEN UPPER(status) = 'RECEIVED' THEN 1 ELSE 0 END), 0) AS received,
                COUNT(*) AS total
            FROM orders
        """)
        row = cursor.fetchone()
        return {
            "pending": row[0],
            "awaiting": row[1],
            "authorised": row[2],
            "received": row[3],
            "total": row[4]
        }
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "order_summary"})
        raise HTTPException(status_code=500, detail=f"Failed to load order summary: {e}")
    finally:
        conn.close()

@router.get("/cod_orders")
async def get_cod_orders(
    start_date: Optional[str] = Query(None),
    end_date: Optional[str] = Query(None),
    requester: Optional[str] = Query(None),
    supplier: Optional[str] = Query(None),
    status: Optional[str] = Query(None),
    user: Dict = Depends(require_login)
):
    conn = get_db_connection()
    conn.row_factory = sqlite3.Row
    try:
        filters = [] # Start with an empty list
        params = []

        filters.append("UPPER(o.payment_terms) = 'COD'") # Always filter for COD

        if start_date:
            valid_start_date = validate_date(start_date)
            filters.append("DATE(o.created_date) >= DATE(?)")
            params.append(valid_start_date)

        if end_date:
            valid_end_date = validate_date(end_date)
            filters.append("DATE(o.created_date) <= DATE(?)")
            params.append(valid_end_date)

        if requester is not None and requester.strip().lower() != "all" and requester.strip() != "":
            filters.append("UPPER(r.name) LIKE UPPER(?)")
            params.append(f"%{requester.strip()}%")

        if supplier is not None and supplier.strip().lower() != "all" and supplier.strip() != "":
            filters.append("UPPER(s.name) LIKE UPPER(?)")
            params.append(f"%{supplier.strip()}%")

        if status is not None and status.strip().lower() != "all" and status.strip() != "":
            filters.append("UPPER(o.status) = UPPER(?)")
            params.append(status.strip())

        where_clause = " AND ".join(filters) if filters else "1=1"

        cursor = conn.execute(f"""
            SELECT
                o.id, o.created_date, o.order_number,
                r.name AS requester, s.name AS supplier,
                o.order_note, o.note_to_supplier, o.total, o.status
            FROM orders o
            LEFT JOIN requesters r ON o.requester_id = r.id
            LEFT JOIN suppliers s ON o.supplier_id = s.id
            WHERE {where_clause}
            AND UPPER(o.status) != 'DELETED' -- This Python comment is now correctly outside the f-string
            ORDER BY
                CAST(SUBSTR(o.order_number, INSTR(o.order_number, 'C') + 1) AS INTEGER) DESC,
                o.created_date DESC
        """, params)
        orders = [dict(row) for row in cursor.fetchall()]
        for order in orders:
            if order["created_date"]:
                try:
                    order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d %H:%M:%S").strftime("%Y-%m-%d")
                except ValueError:
                    try:
                        order["created_date"] = datetime.strptime(order["created_date"], "%Y-%m-%d").strftime("%Y-%m-%d")
                    except ValueError:
                        order["created_date"] = "N/A"
            else:
                order["created_date"] = "N/A"
        log_event("new_orders_log.txt", {"action": "fetch_cod_orders", "count": len(orders)})
        return {"orders": orders}
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "cod_orders"})
        raise HTTPException(status_code=500, detail=f"Failed to fetch COD orders: {e}")
    finally:
        conn.close()

@router.put("/mark_cod_paid/{order_id}")
async def mark_cod_paid(order_id: int, payload: CodPaymentPayload, user: Dict = Depends(require_login)):
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE orders
            SET amount_paid = ?, payment_date = ?
            WHERE id = ?
        """, (payload.amount_paid, payload.payment_date, order_id))
        conn.commit()

        cursor.execute("""
            INSERT INTO audit_trail (order_id, action, action_date, details, user_id)
            VALUES (?, ?, datetime('now'), ?, ?)
        """, (
            order_id,
            "Marked COD Paid",
            f"Amount: R{payload.amount_paid:.2f}, Date: {payload.payment_date}",
            user['id']
        ))
        conn.commit()

        return {"success": True}
    except Exception as e:
        log_event("new_orders_log.txt", {"error": str(e), "type": "mark_cod_paid"})
        raise HTTPException(status_code=500, detail=f"Failed to mark COD paid: {e}")
    finally:
        conn.close()

üìÑ backend/endpoints/html_routes.py
------------------------------------------------------------
from fastapi import APIRouter, Request, HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from backend.database import get_db_connection
import logging

# Logging setup
logging.basicConfig(
    filename="logs/server.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

router = APIRouter()
templates = Jinja2Templates(directory="frontend/templates")


@router.get("/orders/new", response_class=HTMLResponse)
async def new_order_page(request: Request):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            # Fetch requesters
            cursor.execute("SELECT id, name FROM requesters ORDER BY name")
            requesters = [dict(row) for row in cursor.fetchall()]

            # Fetch suppliers
            cursor.execute("SELECT id, name FROM suppliers ORDER BY name")
            suppliers = [dict(row) for row in cursor.fetchall()]

            # Fetch items
            cursor.execute("SELECT item_code, item_description FROM items ORDER BY item_code")
            items = [dict(row) for row in cursor.fetchall()]

            # Fetch projects
            cursor.execute("SELECT project_code, project_name FROM projects ORDER BY project_code")
            projects = [dict(row) for row in cursor.fetchall()]

            # Fetch business details
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            row = cursor.fetchone()
            if not row:
                logging.error("No business details found in database")
                raise HTTPException(status_code=500, detail="No business details found in database")

            business_details = dict(row)
            logging.info(f"Business details fetched: {business_details}")

        return templates.TemplateResponse(
            "new_order.html",
            {
                "request": request,
                "requesters": requesters,
                "suppliers": suppliers,
                "items": items,
                "projects": projects,
                "business_details": business_details
            }
        )
    except Exception as e:
        logging.error(f"Error rendering new order page: {str(e)}")
        raise


@router.get("/orders/pending_orders", response_class=HTMLResponse)
async def pending_orders_page(request: Request):
    try:
        return templates.TemplateResponse("pending_orders.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering pending orders page: {str(e)}")
        raise


@router.get("/mobile/mobile_authorisations", response_class=HTMLResponse)
async def mobile_authorisations_screen(request: Request):
    try:
        return templates.TemplateResponse("mobile/mobile_authorisations.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering mobile authorisations screen: {str(e)}")
        raise


@router.get("/orders/authorisations_per_user", response_class=HTMLResponse)
async def authorisations_per_user_screen(request: Request):
    try:
        return templates.TemplateResponse("authorisations_per_user.html", {"request": request})
    except Exception as e:
        logging.error(f"Error rendering authorisations_per_user screen: {str(e)}")
        raise


@router.get("/orders/{order_id}", response_class=HTMLResponse)
async def view_order_by_id(order_id: int, request: Request):
    try:
        return templates.TemplateResponse("order_detail.html", {"request": request, "order_id": order_id})
    except Exception as e:
        logging.error(f"Error rendering order detail page: {str(e)}")
        raise


üìÑ backend/database.py
------------------------------------------------------------
# File: backend/database.py

import sqlite3
from pathlib import Path
import logging
from typing import Optional # ADDED: Import Optional

# Logging setup
logging.basicConfig(
    filename="logs/db_activity_log.txt",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

DB_PATH = Path("data/orders.db")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            # -- Core Tables --
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requesters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS suppliers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    account_number TEXT,
                    name TEXT,
                    telephone TEXT,
                    vat_number TEXT,
                    registration_number TEXT,
                    email TEXT,
                    contact_name TEXT,
                    contact_telephone TEXT,
                    address_line1 TEXT,
                    address_line2 TEXT,
                    address_line3 TEXT,
                    postal_code TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_number TEXT,
                    status TEXT,
                    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    received_date TEXT,
                    total REAL,
                    order_note TEXT,
                    note_to_supplier TEXT,
                    supplier_id INTEGER,
                    requester_id INTEGER,
                    required_auth_band INTEGER,
                    payment_terms TEXT DEFAULT 'On account',
                    payment_date TEXT,
                    amount_paid REAL,
                    FOREIGN KEY (supplier_id) REFERENCES suppliers(id),
                    FOREIGN KEY (requester_id) REFERENCES requesters(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS order_items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    item_code TEXT,
                    item_description TEXT,
                    project TEXT,
                    qty_ordered REAL,
                    qty_received REAL,
                    received_date TEXT,
                    price REAL,
                    total REAL,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS attachments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    filename TEXT NOT NULL,
                    file_path TEXT NOT NULL,
                    upload_date TEXT NOT NULL,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS audit_trail (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    action TEXT,
                    details TEXT,
                    action_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    user_id INTEGER,
                    FOREIGN KEY (order_id) REFERENCES orders(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS settings (
                    id INTEGER PRIMARY KEY CHECK (id = 1),
                    order_number_start TEXT,
                    auth_threshold_1 INTEGER,
                    auth_threshold_2 INTEGER,
                    auth_threshold_3 INTEGER,
                    auth_threshold_4 INTEGER,
                    requisition_number_start TEXT DEFAULT 'REQ1000'
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    password_hash TEXT NOT NULL,
                    rights TEXT NOT NULL,
                    auth_threshold_band INTEGER CHECK (auth_threshold_band IN (1, 2, 3, 4)),
                    roles TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS projects (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    project_code TEXT UNIQUE,
                    project_name TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    item_code TEXT UNIQUE,
                    item_description TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS business_details (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    company_name TEXT NOT NULL,
                    address_line1 TEXT,
                    address_line2 TEXT,
                    city TEXT,
                    province TEXT,
                    postal_code TEXT,
                    telephone TEXT,
                    vat_number TEXT
                )
            """)
            cursor.execute("""
                INSERT OR IGNORE INTO business_details (
                    id, company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                ) VALUES (
                    1, 'Universal Recycling Company Pty Ltd', '123 Industrial Road', 'Unit 4', 'Cape Town', 'Western Cape', '8001', '+27 21 555 1234', 'VAT123456789'
                )
            """)

            # -- New: Requisitions --
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requisitioners (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requisitions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    requisition_number TEXT UNIQUE,
                    requisitioner_id INTEGER NOT NULL,
                    requisition_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    requisition_note TEXT,
                    status TEXT DEFAULT 'submitted',
                    converted_order_id INTEGER DEFAULT NULL,
                    FOREIGN KEY (requisitioner_id) REFERENCES requisitioners(id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS requisition_items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    requisition_id INTEGER NOT NULL,
                    description TEXT NOT NULL,
                    project TEXT,
                    quantity REAL,
                    FOREIGN KEY (requisition_id) REFERENCES requisitions(id)
                )
            """)

            conn.commit()
            logging.info("Database initialized successfully.")
    except sqlite3.Error as e:
        logging.error(f"‚ùå DB init failed: {e}")
        raise

def determine_status_and_band(total: float) -> tuple[str, int]:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT auth_threshold_1, auth_threshold_2, auth_threshold_3, auth_threshold_4 FROM settings WHERE id = 1")
        row = cursor.fetchone()
        if not row:
            raise ValueError("Authorization thresholds not configured.")
        thresholds = [row["auth_threshold_1"], row["auth_threshold_2"], row["auth_threshold_3"], row["auth_threshold_4"]]
        status = "Pending"
        required_band = 0
        if total > thresholds[0]:
            status = "Awaiting Authorisation"
            if total <= thresholds[1]:
                required_band = 1
            elif total <= thresholds[2]:
                required_band = 2
            elif total <= thresholds[3]:
                required_band = 3
            else:
                required_band = 4
        return status, required_band

# MODIFIED: Added current_user_id: int parameter
def create_order(order_data: dict, items: list, current_user_id: int, created_date: Optional[str] = None) -> dict:
    if order_data.get("status") == "Draft":
        status = "Draft"
        required_band = None
    else:
        status, required_band = determine_status_and_band(order_data["total"])

    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        if created_date:
            cursor.execute("""
                INSERT INTO orders (
                    order_number, status, created_date, total, order_note, note_to_supplier,
                    supplier_id, requester_id, required_auth_band, payment_terms
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                order_data["order_number"],
                status,
                created_date,
                order_data["total"],
                order_data["order_note"],
                order_data["note_to_supplier"],
                order_data["supplier_id"],
                order_data["requester_id"],
                required_band,
                order_data.get("payment_terms", "On account")
            ))
        else:
            cursor.execute("""
                INSERT INTO orders (
                    order_number, status, total, order_note, note_to_supplier,
                    supplier_id, requester_id, required_auth_band, payment_terms
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                order_data["order_number"],
                status,
                order_data["total"],
                order_data["order_note"],
                order_data["note_to_supplier"],
                order_data["supplier_id"],
                order_data["requester_id"],
                required_band,
                order_data.get("payment_terms", "On account")
            ))

        order_id = cursor.lastrowid
        for item in items:
            cursor.execute("""
                INSERT INTO order_items (
                    order_id, item_code, item_description, project,
                    qty_ordered, price, total
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                order_id,
                item["item_code"],
                item["item_description"],
                item["project"],
                item["qty_ordered"],
                item["price"],
                item["qty_ordered"] * item["price"]
            ))
        cursor.execute("""
            INSERT INTO audit_trail (order_id, action, details, user_id)
            VALUES (?, 'Created', ?, ?)
        """, (order_id, f"Order {order_data['order_number']} created", current_user_id)) # CHANGED: user_id now comes from current_user_id
        conn.commit()
        cursor.execute("""
            SELECT * FROM orders WHERE id = ?
        """, (order_id,))
        return dict(cursor.fetchone())

def get_settings() -> dict:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT order_number_start, auth_threshold_1, auth_threshold_2,
                   auth_threshold_3, auth_threshold_4, requisition_number_start
            FROM settings WHERE id = 1
        """)
        row = cursor.fetchone()
        return dict(row) if row else {}

def update_settings(payload: dict):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO settings (
                id, order_number_start, auth_threshold_1, auth_threshold_2,
                auth_threshold_3, auth_threshold_4, requisition_number_start
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(id) DO UPDATE SET
                order_number_start = excluded.order_number_start,
                auth_threshold_1 = excluded.auth_threshold_1,
                auth_threshold_2 = excluded.auth_threshold_2,
                auth_threshold_3 = excluded.auth_threshold_3,
                auth_threshold_4 = excluded.auth_threshold_4,
                requisition_number_start = excluded.requisition_number_start
        """, (
            1,
            payload["order_number_start"],
            payload["auth_threshold_1"],
            payload["auth_threshold_2"],
            payload["auth_threshold_3"],
            payload["auth_threshold_4"],
            payload.get("requisition_number_start", "REQ1000")
        ))
        conn.commit()

def get_business_details() -> dict:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT company_name, address_line1, address_line2, city, province,
                   postal_code, telephone, vat_number
            FROM business_details WHERE id = 1
        """)
        row = cursor.fetchone()
        return dict(row) if row else {}

def get_next_requisition_number():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT requisition_number_start FROM settings WHERE id = 1")
        row = cursor.fetchone()
        if not row:
            raise ValueError("Missing settings row for requisition_number_start")

        current_number = row["requisition_number_start"]
        prefix = ''.join(filter(str.isalpha, current_number)) or "REQ"
        numeric = ''.join(filter(str.isdigit, current_number))
        next_number = int(numeric) + 1 if numeric else 1000
        new_number = f"{prefix}{next_number}"

        cursor.execute("UPDATE settings SET requisition_number_start = ? WHERE id = 1", (new_number,))
        conn.commit()
        return new_number

üìÑ backend/main.py
------------------------------------------------------------
# File: backend/main.py

from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.responses import HTMLResponse, RedirectResponse, Response
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.routing import APIRouter
from backend.endpoints import html_routes
from backend.endpoints import requisitions
from backend.endpoints import requisition_attachments
from backend.endpoints.lookups import mark_cod_paid_api as mark_cod_paid_api_module
from backend.endpoints.mobile import mobile_requisition_auth
from backend.endpoints.email_service import router as email_service_router 

from pathlib import Path
import logging
import sys
import os

# --- Database ---
from backend.database import init_db, get_db_connection

# --- MODIFIED: Import permissions from backend.utils.permissions_utils ---
from backend.utils.permissions_utils import require_login, require_screen_permission 

# --- Routers ---
from backend.endpoints import routers
from backend.endpoints.mobile import mobile_auth
from backend.endpoints.mobile import mobile_requisition_auth
from backend.endpoints.mobile import mobile_requisition
from backend.endpoints.admin import admin_router
from backend.endpoints.auth import router as auth_router
from backend.endpoints.orders import router as orders_router
from backend.endpoints.new_order_pdf_generator import router as new_order_pdf_router
from backend.endpoints.pending_order_pdf_generator import router as pending_order_pdf_router
from backend.endpoints.order_queries import router as order_queries_router
from backend.endpoints.order_receiving import router as order_receiving_router
from backend.endpoints.order_attachments import router as attachments_router
from backend.endpoints.utils import router as utils_router
from backend.endpoints.mobile.mobile_awaiting_authorisation import router as mobile_auth_router
from backend.endpoints.lookups import items as items_router
from backend.endpoints.lookups import suppliers as suppliers_router
from backend.endpoints.lookups import projects as projects_router
from backend.endpoints.order_notes import router as order_notes_router
from backend.endpoints.lookups import requisitioners as requisitioners_router

# For audit trail filtering: Import the specific audit trail filters router
from backend.endpoints.audit_trail_filters import router as audit_trail_filters_router 

# Allow scripts to import from parent
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from scripts.add_debug_validation_handler import install_validation_handler

# Setup logging
Path("logs").mkdir(exist_ok=True)
logging.basicConfig(
    filename="logs/server_startup.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

try:
    init_db()
    logging.info("‚úÖ Database initialized successfully.")
except Exception as e:
    logging.exception("‚ùå Failed to initialize database")
    raise

# --- FastAPI App Init ---
app = FastAPI(
    debug=True,
    title="Universal Recycling Purchase Order System",
    description="Purchase Order management system for Universal Recycling"
)

install_validation_handler(app)

# --- Static and Upload Directories ---
app.mount("/static", StaticFiles(directory="frontend/static"), name="static")
app.mount("/data/uploads", StaticFiles(directory="data/uploads"), name="uploads")

# --- Middleware ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
app.add_middleware(SessionMiddleware, secret_key="your-new-secure-key", same_site="lax", https_only=False)

templates = Jinja2Templates(directory="frontend/templates")

# --- Static Routes Router ---
static_router = APIRouter()

# For audit trail test only: New route for the test screen, bypassing permissions
@static_router.get("/audit_trail_test", response_class=HTMLResponse)
async def audit_trail_test_page(request: Request):
    return templates.TemplateResponse(
        "audit_trail_test.html",
        {"request": request}
    )

@static_router.get("/mobile/authorisations", response_class=HTMLResponse, 
                    dependencies=[Depends(require_login), Depends(require_screen_permission("my_authorisations"))]) 
async def mobile_authorisations_page(request: Request):
    user_screen_permissions = request.session.get("screen_permissions", [])
    return templates.TemplateResponse(
        "mobile/mobile_authorisations.html",
        {
            "request": request,
            "user_screen_permissions": user_screen_permissions
        }
    )

@static_router.get("/mobile/requisition_login", response_class=HTMLResponse)
async def mobile_requisition_login_page(request: Request):
    return templates.TemplateResponse("mobile/mobile_requisition_login.html", {"request": request})

@static_router.get("/home", response_class=HTMLResponse, 
                   dependencies=[Depends(require_login)]) 
async def home(request: Request):
    logging.info("Rendering home page")
    user_screen_permissions = request.session.get("screen_permissions", [])
    return templates.TemplateResponse(
        "home.html", 
        {
            "request": request,
            "user_screen_permissions": user_screen_permissions 
        }
    )

@static_router.get("/orders/new", response_class=HTMLResponse, 
                    dependencies=[Depends(require_login), Depends(require_screen_permission("new_order"))])
async def new_order_page(request: Request):
    logging.info("Starting to render new order page")
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM requesters ORDER BY name")
            requesters = [dict(row) for row in cursor.fetchall()]
            cursor.execute("SELECT id, name FROM suppliers ORDER BY name")
            suppliers = [dict(row) for row in cursor.fetchall()]
            cursor.execute("SELECT item_code, item_description FROM items ORDER BY item_code")
            items = [dict(row) for row in cursor.fetchall()]
            cursor.execute("SELECT project_code, project_name FROM projects ORDER BY project_code")
            projects = [dict(row) for row in cursor.fetchall()]
            cursor.execute("""
                SELECT company_name, address_line1, address_line2, city, province, postal_code, telephone, vat_number
                FROM business_details WHERE id = 1
            """)
            row = cursor.fetchone()
            business_details = dict(row) if row else {
                "company_name": "Default Company",
                "address_line1": "N/A",
                "address_line2": "",
                "city": "N/A",
                "province": "N/A",
                "postal_code": "N/A",
                "telephone": "N/A",
                "vat_number": "N/A"
            }
        user_screen_permissions = request.session.get("screen_permissions", [])
        return templates.TemplateResponse("new_order.html", {
            "request": request,
            "requesters": requesters,
            "suppliers": suppliers,
            "items": items,
            "projects": projects,
            "business_details": business_details,
            "user_screen_permissions": user_screen_permissions 
        })

    except Exception as e:
        logging.error(f"Error rendering new order page: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Error rendering new order page: {str(e)}")

@static_router.get("/orders/pending_orders", response_class=HTMLResponse,
                   dependencies=[Depends(require_login), Depends(require_screen_permission("pending_orders"))])
async def pending_orders_page(request: Request):
    user_screen_permissions = request.session.get("screen_permissions", [])
    return templates.TemplateResponse(
        "pending_orders.html",
        {
            "request": request,
            "user_screen_permissions": user_screen_permissions 
        }
    )

@static_router.get("/orders/cod_orders", response_class=HTMLResponse,
                   dependencies=[Depends(require_login), Depends(require_screen_permission("cod_orders"))])
async def cod_orders_page(request: Request):
    user_screen_permissions = request.session.get("screen_permissions", [])
    return templates.TemplateResponse(
        "cod_orders.html",
        {
            "request": request,
            "user_screen_permissions": user_screen_permissions 
        }
    )

@static_router.get("/orders/received_orders", response_class=HTMLResponse,
                   dependencies=[Depends(require_login), Depends(require_screen_permission("received_orders"))])
async def received_orders_page(request: Request):
    user_screen_permissions = request.session.get("screen_permissions", [])
    return templates.TemplateResponse(
        "received_orders.html",
        {
            "request": request,
            "user_screen_permissions": user_screen_permissions 
        }
    )

@static_router.get("/orders/audit_trail", response_class=HTMLResponse,
                   dependencies=[Depends(require_login), Depends(require_screen_permission("audit_trail"))])
async def audit_trail_page(request: Request):
    user_screen_permissions = request.session.get("screen_permissions", [])
    return templates.TemplateResponse(
        "audit_trail.html",
        {
            "request": request,
            "user_screen_permissions": user_screen_permissions 
        }
    )

@static_router.get("/maintenance", response_class=HTMLResponse,
                   dependencies=[Depends(require_login), Depends(require_screen_permission("maintenance"))])
async def maintenance_page(request: Request):
    user_screen_permissions = request.session.get("screen_permissions", [])
    return templates.TemplateResponse(
        "maintenance.html",
        {

            "request": request,
            "user_screen_permissions": user_screen_permissions 
        }
    )

@static_router.get("/orders/partially_delivered", response_class=HTMLResponse,
                   dependencies=[Depends(require_login), Depends(require_screen_permission("partially_delivered_orders"))])
async def partially_delivered_page(request: Request):
    user_screen_permissions = request.session.get("screen_permissions", [])
    return templates.TemplateResponse(
        "partially_delivered.html",
        {
            "request": request,
            "user_screen_permissions": user_screen_permissions 
        }
    )

@static_router.get("/requisitions/pending_requisitions", response_class=HTMLResponse,
                   dependencies=[Depends(require_login), Depends(require_screen_permission("pending_requisitions"))])
async def pending_requisitions_page(request: Request):
    user_screen_permissions = request.session.get("screen_permissions", [])
    return templates.TemplateResponse(
        "pending_requisitions.html",
        {
            "request": request,
            "user_screen_permissions": user_screen_permissions 
        }
    )

@static_router.get("/requisitions/new", response_class=HTMLResponse,
                   dependencies=[Depends(require_login), Depends(require_screen_permission("new_requisition"))])
async def new_requisition_page(request: Request):
    user_screen_permissions = request.session.get("screen_permissions", [])
    return templates.TemplateResponse(
        "new_requisition.html",
        {
            "request": request,
            "user_screen_permissions": user_screen_permissions 
        }
    )

@static_router.get("/favicon.ico")
async def favicon():
    favicon_path = Path("frontend/static/favicon.ico")
    if not favicon_path.exists():
        return {"error": "Favicon not found"}, 404
    try:
        with open(favicon_path, "rb") as f:
            content = f.read()
        return Response(content=content, media_type="image/x-icon")
    except Exception as e:
        logging.error(f"Error serving favicon: {str(e)}", exc_info=True)
        return {"error": "Failed to serve favicon"}, 500
    
@static_router.get("/orders/authorisations_per_user", response_class=HTMLResponse,
                   dependencies=[Depends(require_login), Depends(require_screen_permission("my_authorisations"))])
async def authorisations_per_user_page(request: Request):
    user_screen_permissions = request.session.get("screen_permissions", [])
    return templates.TemplateResponse(
        "authorisations_per_user.html",
        {
            "request": request,
            "user_screen_permissions": user_screen_permissions 
        }
    )

@static_router.get("/mobile/requisition", response_class=HTMLResponse) 
async def mobile_requisition_form(request: Request):
    user_screen_permissions = request.session.get("screen_permissions", [])
    return templates.TemplateResponse(
        "mobile/mobile_requisition.html",
        {
            "request": request,
            "user_screen_permissions": user_screen_permissions
        }
    )

# --- Include Routers ---
# IMPORTANT: Place the specific audit_trail_filters_router inclusion BEFORE order_queries_router
app.include_router(static_router)
app.include_router(mobile_auth_router)

# Correctly include audit_trail_filters_router for /orders/api/audit_trail_orders
# THIS IS THE CRITICAL LINE FOR AUDIT TRAIL FILTERING
app.include_router(audit_trail_filters_router, prefix="/orders/api") 

for router in routers:
    if router is not order_queries_router and router is not orders_router and router is not attachments_router and router is not order_receiving_router:
        app.include_router(router, prefix="/lookups")

app.include_router(html_routes.router)
app.include_router(admin_router, prefix="/admin")
app.include_router(order_queries_router, prefix="/orders/api") # This prefix is correct for other endpoints in order_queries.py
app.include_router(new_order_pdf_router, prefix="/orders/api")
app.include_router(auth_router)
app.include_router(mobile_auth.router)
app.include_router(orders_router, prefix="/orders")
app.include_router(attachments_router, prefix="/orders")
app.include_router(order_receiving_router, prefix="/orders")
app.include_router(utils_router)
app.include_router(pending_order_pdf_router, prefix="/orders/api")
app.include_router(order_notes_router)
app.include_router(items_router.router, prefix="/lookups")
app.include_router(suppliers_router.router, prefix="/maintenance")
app.include_router(projects_router.router, prefix="/maintenance")
app.include_router(requisitions.router)
app.include_router(requisitioners_router.router, prefix="/lookups")
app.include_router(mark_cod_paid_api_module.router, prefix="/orders")
app.include_router(requisition_attachments.router, prefix="/requisitions")
app.include_router(mobile_requisition_auth.router)
app.include_router(mobile_requisition.router)
app.include_router(email_service_router)


# --- Dev CLI ---
if __name__ == "__main__":
    import uvicorn
    try:
        logging.info("üöÄ Starting Uvicorn server...")
        uvicorn.run(app, host="0.0.0.0", port=8004)
    except Exception as e:
        logging.exception("‚ùå Server failed to start")
        ra

